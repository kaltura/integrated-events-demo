"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CancelableAction = void 0;
var CancelableAction = /** @class */ (function () {
    function CancelableAction(executor) {
        this._executors = [];
        this._onCancel = executor(this._onResolve.bind(this), this._onReject.bind(this), this);
    }
    CancelableAction.resolve = function (result) {
        return new CancelableAction(function (resolve) {
            resolve(result);
        });
    };
    CancelableAction.reject = function (error) {
        return new CancelableAction(function (resolve, reject) {
            reject(error);
        });
    };
    CancelableAction.prototype._onResolve = function (value) {
        this._notifyExecutor(value);
    };
    CancelableAction.prototype._onReject = function (reason) {
        this._notifyExecutor(reason);
    };
    CancelableAction.prototype._notifyExecutor = function (value) {
        var nextExecutor = this._executors.length > 0 ? this._executors.splice(0, 1)[0] : null;
        var newValue;
        if (nextExecutor) {
            try {
                if (value instanceof Error) {
                    if (nextExecutor.reject) {
                        newValue = nextExecutor.reject(value);
                    }
                    else {
                        this._handleErrorOriginatedFromExecuter(value);
                    }
                }
                else {
                    if (nextExecutor.resolve) {
                        newValue = nextExecutor.resolve(value);
                    }
                }
                if (newValue instanceof CancelableAction) {
                    newValue.then(this._onResolve.bind(this), this._onReject.bind(this));
                    return;
                }
                else if (newValue instanceof Promise) {
                    newValue.then(this._onResolve.bind(this), this._onReject.bind(this));
                    return;
                }
                else {
                    newValue = typeof newValue === 'undefined' ? value : newValue;
                    this._notifyExecutor(newValue);
                }
            }
            catch (e) {
                this._handleErrorOriginatedFromExecuter(e);
            }
        }
    };
    CancelableAction.prototype._handleErrorOriginatedFromExecuter = function (reason) {
        if (this._executors.length > 0) {
            this._notifyExecutor(reason);
        }
        else {
            throw reason;
        }
    };
    CancelableAction.prototype.cancel = function () {
        if (this._onCancel) {
            this._onCancel();
        }
    };
    CancelableAction.prototype.then = function (resolve, reject) {
        this._executors.push({ resolve: resolve, reject: reject });
        return this;
    };
    CancelableAction.prototype.catch = function (reject) {
        this._executors.push({ resolve: null, reject: reject });
        return this;
    };
    return CancelableAction;
}());
exports.CancelableAction = CancelableAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUVPLDZEQUFrQyxHQUExQyxVQUEyQyxNQUFXO1FBQ3BELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDOUI7YUFBTTtZQUNMLE1BQU0sTUFBTSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsaUNBQU0sR0FBTjtRQUNFLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBRUQsK0JBQUksR0FBSixVQUFLLE9BQXFCLEVBQUUsTUFBZ0I7UUFDMUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0NBQUssR0FBTCxVQUFNLE1BQWdCO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQUEsRUFBRSxDQUFDLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQXJGQSxBQXFGQyxJQUFBO0FBckZZLDRDQUFnQiIsImZpbGUiOiJjYW5jZWxhYmxlLWFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIENhbmNlbEZuID0gKCkgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIFJlc29sdmVGbjxUPiA9ICh2YWx1ZTogVCB8IG51bGwpID0+IGFueSB8IHZvaWQ7XG5leHBvcnQgdHlwZSBSZWplY3RGbiA9IChyZWFzb246IEVycm9yKSA9PiBhbnkgfCB2b2lkO1xuXG5leHBvcnQgY2xhc3MgQ2FuY2VsYWJsZUFjdGlvbjxUPlxue1xuICBzdGF0aWMgcmVzb2x2ZTxUPihyZXN1bHQ6IFQpOiBDYW5jZWxhYmxlQWN0aW9uPFQ+IHtcbiAgICByZXR1cm4gbmV3IENhbmNlbGFibGVBY3Rpb248VD4oKHJlc29sdmUpID0+IHtcbiAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyByZWplY3Q8VD4oZXJyb3I6IEVycm9yKTogQ2FuY2VsYWJsZUFjdGlvbjxUPiB7XG4gICAgcmV0dXJuIG5ldyBDYW5jZWxhYmxlQWN0aW9uPFQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9leGVjdXRvcnM6IHsgcmVzb2x2ZTogUmVzb2x2ZUZuPFQ+LCByZWplY3Q6IFJlamVjdEZuIH1bXSA9IFtdO1xuICBwcml2YXRlIF9vbkNhbmNlbDogQ2FuY2VsRm4gfCB2b2lkO1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcjogKHJlc29sdmU6IFJlc29sdmVGbjxUPiwgcmVqZWN0OiBSZWplY3RGbiwgYWN0aW9uPzogQ2FuY2VsYWJsZUFjdGlvbjxUPikgPT4gQ2FuY2VsRm4gfCB2b2lkKSB7XG4gICAgdGhpcy5fb25DYW5jZWwgPSBleGVjdXRvcih0aGlzLl9vblJlc29sdmUuYmluZCh0aGlzKSwgdGhpcy5fb25SZWplY3QuYmluZCh0aGlzKSwgdGhpcyk7XG4gIH1cblxuICBwcml2YXRlIF9vblJlc29sdmUodmFsdWU/OiBUKTogdm9pZCB7XG4gICAgdGhpcy5fbm90aWZ5RXhlY3V0b3IodmFsdWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfb25SZWplY3QocmVhc29uPzogRXJyb3IpOiB2b2lkIHtcbiAgICB0aGlzLl9ub3RpZnlFeGVjdXRvcihyZWFzb24pO1xuICB9XG5cbiAgcHJpdmF0ZSBfbm90aWZ5RXhlY3V0b3IodmFsdWU6IFQgfCBFcnJvcik6IHZvaWQge1xuICAgIGNvbnN0IG5leHRFeGVjdXRvciA9IHRoaXMuX2V4ZWN1dG9ycy5sZW5ndGggPiAwID8gdGhpcy5fZXhlY3V0b3JzLnNwbGljZSgwLCAxKVswXSA6IG51bGw7XG4gICAgbGV0IG5ld1ZhbHVlOiBhbnk7XG4gICAgaWYgKG5leHRFeGVjdXRvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBpZiAobmV4dEV4ZWN1dG9yLnJlamVjdCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBuZXh0RXhlY3V0b3IucmVqZWN0KHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlRXJyb3JPcmlnaW5hdGVkRnJvbUV4ZWN1dGVyKHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKG5leHRFeGVjdXRvci5yZXNvbHZlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IG5leHRFeGVjdXRvci5yZXNvbHZlKDxUPnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmIChuZXdWYWx1ZSBpbnN0YW5jZW9mIENhbmNlbGFibGVBY3Rpb24pIHtcbiAgICAgICAgICBuZXdWYWx1ZS50aGVuKHRoaXMuX29uUmVzb2x2ZS5iaW5kKHRoaXMpLCB0aGlzLl9vblJlamVjdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgbmV3VmFsdWUudGhlbih0aGlzLl9vblJlc29sdmUuYmluZCh0aGlzKSwgdGhpcy5fb25SZWplY3QuYmluZCh0aGlzKSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1ZhbHVlID0gdHlwZW9mIG5ld1ZhbHVlID09PSAndW5kZWZpbmVkJyA/IHZhbHVlIDogbmV3VmFsdWU7XG4gICAgICAgICAgdGhpcy5fbm90aWZ5RXhlY3V0b3IobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZUVycm9yT3JpZ2luYXRlZEZyb21FeGVjdXRlcihlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9oYW5kbGVFcnJvck9yaWdpbmF0ZWRGcm9tRXhlY3V0ZXIocmVhc29uOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZXhlY3V0b3JzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuX25vdGlmeUV4ZWN1dG9yKHJlYXNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IHJlYXNvbjtcbiAgICB9XG4gIH1cblxuICBjYW5jZWwoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX29uQ2FuY2VsKSB7XG4gICAgICB0aGlzLl9vbkNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIHRoZW4ocmVzb2x2ZTogUmVzb2x2ZUZuPFQ+LCByZWplY3Q6IFJlamVjdEZuKTogdGhpcyB7XG4gICAgdGhpcy5fZXhlY3V0b3JzLnB1c2goeyByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjYXRjaChyZWplY3Q6IFJlamVjdEZuKTogdGhpcyB7XG4gICAgdGhpcy5fZXhlY3V0b3JzLnB1c2goeyByZXNvbHZlOiBudWxsLCByZWplY3QgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==
