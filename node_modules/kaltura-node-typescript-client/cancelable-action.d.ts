export type CancelFn = () => void;
export type ResolveFn<T> = (value: T | null) => any | void;
export type RejectFn = (reason: Error) => any | void;
export declare class CancelableAction<T> {
    static resolve<T>(result: T): CancelableAction<T>;
    static reject<T>(error: Error): CancelableAction<T>;
    private _executors;
    private _onCancel;
    constructor(executor: (resolve: ResolveFn<T>, reject: RejectFn, action?: CancelableAction<T>) => CancelFn | void);
    private _onResolve;
    private _onReject;
    private _notifyExecutor;
    private _handleErrorOriginatedFromExecuter;
    cancel(): void;
    then(resolve: ResolveFn<T>, reject: RejectFn): this;
    catch(reject: RejectFn): this;
}
