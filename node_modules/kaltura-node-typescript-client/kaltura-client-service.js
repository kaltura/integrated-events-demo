"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaClient = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("./api/kaltura-request");
var kaltura_multi_request_1 = require("./api/kaltura-multi-request");
var kaltura_file_request_1 = require("./api/kaltura-file-request");
var kaltura_upload_request_1 = require("./api/kaltura-upload-request");
var kaltura_request_adapter_1 = require("./adapters/kaltura-request-adapter");
var kaltura_file_request_adapter_1 = require("./adapters/kaltura-file-request-adapter");
var kaltura_multi_request_adapter_1 = require("./adapters/kaltura-multi-request-adapter");
var kaltura_client_exception_1 = require("./api/kaltura-client-exception");
var kaltura_upload_request_adapter_1 = require("./adapters/kaltura-upload-request-adapter");
var kaltura_request_options_1 = require("./api/kaltura-request-options");
var cancelable_action_1 = require("./cancelable-action");
var KalturaClient = /** @class */ (function () {
    function KalturaClient(_options, defaultRequestOptionsArgs) {
        this._options = _options;
        this._defaultRequestOptions = new kaltura_request_options_1.KalturaRequestOptions(defaultRequestOptionsArgs || {});
    }
    KalturaClient.prototype.appendOptions = function (options) {
        if (!options) {
            throw new kaltura_client_exception_1.KalturaClientException('client::append_options', "missing required argument 'options'");
        }
        this._options = Object.assign(this._options || {}, options);
    };
    KalturaClient.prototype.setOptions = function (options) {
        if (!options) {
            throw new kaltura_client_exception_1.KalturaClientException('client::set_options', "missing required argument 'options'");
        }
        this._options = options;
    };
    KalturaClient.prototype.appendDefaultRequestOptions = function (args) {
        if (!args) {
            throw new kaltura_client_exception_1.KalturaClientException('client::append_default_request_options', "missing required argument 'args'");
        }
        this._defaultRequestOptions = Object.assign(this._defaultRequestOptions || new kaltura_request_options_1.KalturaRequestOptions(), new kaltura_request_options_1.KalturaRequestOptions(args));
    };
    KalturaClient.prototype.setDefaultRequestOptions = function (args) {
        if (!args) {
            throw new kaltura_client_exception_1.KalturaClientException('client::set_default_request_options', "missing required argument 'args'");
        }
        this._defaultRequestOptions = new kaltura_request_options_1.KalturaRequestOptions(args);
    };
    KalturaClient.prototype.getDefaultRequestOptions = function () {
        return this._defaultRequestOptions;
    };
    KalturaClient.prototype._validateOptions = function () {
        if (!this._options) {
            return new kaltura_client_exception_1.KalturaClientException('client::missing_options', 'cannot transmit request, missing client options (did you forgot to provide options manually?)');
        }
        if (!this._options.endpointUrl) {
            return new kaltura_client_exception_1.KalturaClientException('client::missing_options', "cannot transmit request, missing 'endpointUrl' in client options");
        }
        if (!this._options.clientTag) {
            return new kaltura_client_exception_1.KalturaClientException('client::missing_options', "cannot transmit request, missing 'clientTag' in client options");
        }
        return null;
    };
    KalturaClient.prototype.request = function (request) {
        var optionsViolationError = this._validateOptions();
        if (optionsViolationError) {
            return cancelable_action_1.CancelableAction.reject(optionsViolationError);
        }
        if (request instanceof kaltura_file_request_1.KalturaFileRequest) {
            return new kaltura_file_request_adapter_1.KalturaFileRequestAdapter().transmit(request, this._options, this._defaultRequestOptions);
        }
        else if (request instanceof kaltura_upload_request_1.KalturaUploadRequest) {
            return new kaltura_upload_request_adapter_1.KalturaUploadRequestAdapter(this._options, this._defaultRequestOptions).transmit(request);
        }
        else if (request instanceof kaltura_request_1.KalturaRequest) {
            return new kaltura_request_adapter_1.KalturaRequestAdapter().transmit(request, this._options, this._defaultRequestOptions);
        }
        else {
            return cancelable_action_1.CancelableAction.reject(new kaltura_client_exception_1.KalturaClientException("client::request_type_error", 'unsupported request type requested'));
        }
    };
    KalturaClient.prototype.multiRequest = function (arg) {
        var optionsViolationError = this._validateOptions();
        if (optionsViolationError) {
            return cancelable_action_1.CancelableAction.reject(optionsViolationError);
        }
        var request = arg instanceof kaltura_multi_request_1.KalturaMultiRequest ? arg : (arg instanceof Array ? new (kaltura_multi_request_1.KalturaMultiRequest.bind.apply(kaltura_multi_request_1.KalturaMultiRequest, tslib_1.__spreadArray([void 0], arg, false)))() : null);
        if (!request) {
            return cancelable_action_1.CancelableAction.reject(new kaltura_client_exception_1.KalturaClientException('client::invalid_request', "Expected argument of type Array or KalturaMultiRequest"));
        }
        var containsFileRequest = request.requests.some(function (item) { return item instanceof kaltura_file_request_1.KalturaFileRequest; });
        if (containsFileRequest) {
            return cancelable_action_1.CancelableAction.reject(new kaltura_client_exception_1.KalturaClientException('client::invalid_request', "multi-request not support requests of type 'KalturaFileRequest', use regular request instead"));
        }
        else {
            return new kaltura_multi_request_adapter_1.KalturaMultiRequestAdapter().transmit(request, this._options, this._defaultRequestOptions);
        }
    };
    return KalturaClient;
}());
exports.KalturaClient = KalturaClient;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
