"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaUploadRequest = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("./kaltura-request");
var KalturaUploadRequest = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaUploadRequest, _super);
    function KalturaUploadRequest(data, _a) {
        var responseType = _a.responseType, responseSubType = _a.responseSubType, responseConstructor = _a.responseConstructor;
        var _this = _super.call(this, data, { responseType: responseType, responseSubType: responseSubType, responseConstructor: responseConstructor }) || this;
        _this.uploadedFileSize = 0;
        _this.uploadedFileSize = data.uploadedFileSize;
        return _this;
    }
    KalturaUploadRequest.prototype.getFileInfo = function () {
        var metadataProperties = this._getMetadata().properties;
        var filePropertyName = Object.keys(metadataProperties).find(function (propertyName) { return metadataProperties[propertyName].type === "f"; });
        return filePropertyName ? { propertyName: filePropertyName, file: this[filePropertyName] } : null;
    };
    KalturaUploadRequest.prototype.toRequestObject = function () {
        var result = _super.prototype.toRequestObject.call(this);
        var filePropertyName = this.getFileInfo().propertyName;
        if (filePropertyName) {
            delete result[filePropertyName];
        }
        return result;
    };
    return KalturaUploadRequest;
}(kaltura_request_1.KalturaRequest));
exports.KalturaUploadRequest = KalturaUploadRequest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9rYWx0dXJhLXVwbG9hZC1yZXF1ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxREFBdUU7QUFPdkU7SUFBNkMsZ0RBQWlCO0lBRzVELDhCQUFZLElBQThCLEVBQUUsRUFBNko7WUFBM0osWUFBWSxrQkFBQSxFQUFFLGVBQWUscUJBQUEsRUFBRSxtQkFBbUIseUJBQUE7UUFBaEcsWUFDRSxrQkFBTSxJQUFJLEVBQUUsRUFBRSxZQUFZLGNBQUEsRUFBRSxlQUFlLGlCQUFBLEVBQUUsbUJBQW1CLHFCQUFBLEVBQUUsQ0FBQyxTQUVwRTtRQUxNLHNCQUFnQixHQUFXLENBQUMsQ0FBQztRQUlsQyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDOztJQUNoRCxDQUFDO0lBRU0sMENBQVcsR0FBbEI7UUFDRSxJQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxVQUFVLENBQUM7UUFDMUQsSUFBTSxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsWUFBWSxJQUFJLE9BQUEsa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBN0MsQ0FBNkMsQ0FBQyxDQUFDO1FBQzdILE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDcEcsQ0FBQztJQUVNLDhDQUFlLEdBQXRCO1FBQ0UsSUFBTSxNQUFNLEdBQUcsaUJBQU0sZUFBZSxXQUFFLENBQUM7UUFDL0IsSUFBYyxnQkFBZ0IsR0FBSyxJQUFJLENBQUMsV0FBVyxFQUFFLGFBQXZCLENBQXdCO1FBRTlELElBQUksZ0JBQWdCLEVBQUU7WUFDcEIsT0FBTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNqQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDSCwyQkFBQztBQUFELENBeEJBLEFBd0JDLENBeEI0QyxnQ0FBYyxHQXdCMUQ7QUF4Qlksb0RBQW9CIiwiZmlsZSI6ImFwaS9rYWx0dXJhLXVwbG9hZC1yZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gXCIuL2thbHR1cmEtcmVxdWVzdFwiO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UgfSBmcm9tIFwiLi9rYWx0dXJhLW9iamVjdC1iYXNlXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVVwbG9hZFJlcXVlc3RBcmdzIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgdXBsb2FkZWRGaWxlU2l6ZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFVcGxvYWRSZXF1ZXN0PFQ+IGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8VD4ge1xuICBwdWJsaWMgdXBsb2FkZWRGaWxlU2l6ZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBLYWx0dXJhVXBsb2FkUmVxdWVzdEFyZ3MsIHsgcmVzcG9uc2VUeXBlLCByZXNwb25zZVN1YlR5cGUsIHJlc3BvbnNlQ29uc3RydWN0b3IgfTogeyByZXNwb25zZVR5cGU6IHN0cmluZywgcmVzcG9uc2VTdWJUeXBlPzogc3RyaW5nLCByZXNwb25zZUNvbnN0cnVjdG9yOiB7IG5ldygpOiBLYWx0dXJhT2JqZWN0QmFzZSB9IH0pIHtcbiAgICBzdXBlcihkYXRhLCB7IHJlc3BvbnNlVHlwZSwgcmVzcG9uc2VTdWJUeXBlLCByZXNwb25zZUNvbnN0cnVjdG9yIH0pO1xuICAgIHRoaXMudXBsb2FkZWRGaWxlU2l6ZSA9IGRhdGEudXBsb2FkZWRGaWxlU2l6ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGaWxlSW5mbygpOiB7IGZpbGU6IEZpbGUsIHByb3BlcnR5TmFtZTogc3RyaW5nIH0ge1xuICAgIGNvbnN0IG1ldGFkYXRhUHJvcGVydGllcyA9IHRoaXMuX2dldE1ldGFkYXRhKCkucHJvcGVydGllcztcbiAgICBjb25zdCBmaWxlUHJvcGVydHlOYW1lID0gT2JqZWN0LmtleXMobWV0YWRhdGFQcm9wZXJ0aWVzKS5maW5kKHByb3BlcnR5TmFtZSA9PiBtZXRhZGF0YVByb3BlcnRpZXNbcHJvcGVydHlOYW1lXS50eXBlID09PSBcImZcIik7XG4gICAgcmV0dXJuIGZpbGVQcm9wZXJ0eU5hbWUgPyB7IHByb3BlcnR5TmFtZTogZmlsZVByb3BlcnR5TmFtZSwgZmlsZTogdGhpc1tmaWxlUHJvcGVydHlOYW1lXSB9IDogbnVsbDtcbiAgfVxuXG4gIHB1YmxpYyB0b1JlcXVlc3RPYmplY3QoKToge30ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLnRvUmVxdWVzdE9iamVjdCgpO1xuICAgIGNvbnN0IHsgcHJvcGVydHlOYW1lOiBmaWxlUHJvcGVydHlOYW1lIH0gPSB0aGlzLmdldEZpbGVJbmZvKCk7XG5cbiAgICBpZiAoZmlsZVByb3BlcnR5TmFtZSkge1xuICAgICAgZGVsZXRlIHJlc3VsdFtmaWxlUHJvcGVydHlOYW1lXTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59Il19
