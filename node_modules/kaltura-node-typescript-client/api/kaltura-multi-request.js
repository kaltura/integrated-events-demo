"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaMultiRequest = void 0;
var tslib_1 = require("tslib");
var kaltura_request_base_1 = require("./kaltura-request-base");
var kaltura_multi_response_1 = require("./kaltura-multi-response");
var kaltura_api_exception_1 = require("./kaltura-api-exception");
var environment_1 = require("../environment");
var KalturaMultiRequest = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaMultiRequest, _super);
    function KalturaMultiRequest() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _this = _super.call(this, {}) || this;
        _this.requests = [];
        _this.requests = args;
        return _this;
    }
    KalturaMultiRequest.prototype.buildRequest = function (defaultRequestOptions) {
        var result = _super.prototype.toRequestObject.call(this);
        for (var i = 0, length_1 = this.requests.length; i < length_1; i++) {
            result[i] = this.requests[i].buildRequest(defaultRequestOptions);
        }
        return result;
    };
    KalturaMultiRequest.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { default: 'multirequest', type: 'c' }
        });
        return result;
    };
    KalturaMultiRequest.prototype._unwrapResponse = function (response) {
        if (environment_1.environment.response.nestedResponse) {
            if (response && response.hasOwnProperty('result')) {
                return response.result;
            }
            else if (response && response.hasOwnProperty('error')) {
                return response.error;
            }
        }
        return response;
    };
    KalturaMultiRequest.prototype.setCompletion = function (callback) {
        this.callback = callback;
        return this;
    };
    KalturaMultiRequest.prototype.handleResponse = function (responses) {
        var kalturaResponses = [];
        var unwrappedResponse = this._unwrapResponse(responses);
        var responseObject = null;
        if (!unwrappedResponse || !(unwrappedResponse instanceof Array) || unwrappedResponse.length !== this.requests.length) {
            var response = new kaltura_api_exception_1.KalturaAPIException("server response is invalid, expected array of ".concat(this.requests.length), 'client::response_type_error', null);
            for (var i = 0, len = this.requests.length; i < len; i++) {
                kalturaResponses.push(this.requests[i].handleResponse(response));
            }
        }
        else {
            for (var i = 0, len = this.requests.length; i < len; i++) {
                var serverResponse = unwrappedResponse[i];
                kalturaResponses.push(this.requests[i].handleResponse(serverResponse));
            }
            if (this.callback) {
                try {
                    this.callback(new kaltura_multi_response_1.KalturaMultiResponse(kalturaResponses));
                }
                catch (ex) {
                    // do nothing by design
                }
            }
        }
        return new kaltura_multi_response_1.KalturaMultiResponse(kalturaResponses);
    };
    return KalturaMultiRequest;
}(kaltura_request_base_1.KalturaRequestBase));
exports.KalturaMultiRequest = KalturaMultiRequest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9rYWx0dXJhLW11bHRpLXJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLCtEQUE0RDtBQUU1RCxtRUFBZ0U7QUFDaEUsaUVBQThEO0FBRzlELDhDQUE2QztBQUc3QztJQUF5QywrQ0FBa0I7SUFNekQ7UUFBWSxjQUE4QjthQUE5QixVQUE4QixFQUE5QixxQkFBOEIsRUFBOUIsSUFBOEI7WUFBOUIseUJBQThCOztRQUExQyxZQUNFLGtCQUFNLEVBQUUsQ0FBQyxTQUVWO1FBTEQsY0FBUSxHQUEwQixFQUFFLENBQUM7UUFJbkMsS0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7O0lBQ3ZCLENBQUM7SUFFRCwwQ0FBWSxHQUFaLFVBQWEscUJBQTRDO1FBQ3ZELElBQU0sTUFBTSxHQUFHLGlCQUFNLGVBQWUsV0FBRSxDQUFDO1FBRXZDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsUUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVTLDBDQUFZLEdBQXRCO1FBQ0UsSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDWCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNFLE9BQU8sRUFBRSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRTtTQUNoRCxDQUFDLENBQUM7UUFFTCxPQUFPLE1BQU0sQ0FBQztJQUVoQixDQUFDO0lBRU8sNkNBQWUsR0FBdkIsVUFBd0IsUUFBYTtRQUNuQyxJQUFJLHlCQUFXLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtZQUN2QyxJQUFJLFFBQVEsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNqRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDeEI7aUJBQU0sSUFBSSxRQUFRLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtnQkFDdkQsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO2FBQ3ZCO1NBQ0Y7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRUQsMkNBQWEsR0FBYixVQUFjLFFBQWtEO1FBQzlELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELDRDQUFjLEdBQWQsVUFBZSxTQUFjO1FBQzNCLElBQU0sZ0JBQWdCLEdBQTJCLEVBQUUsQ0FBQztRQUVwRCxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUMsaUJBQWlCLFlBQVksS0FBSyxDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3BILElBQU0sUUFBUSxHQUFHLElBQUksMkNBQW1CLENBQUMsd0RBQWlELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFFLEVBQUUsNkJBQTZCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkosS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hELGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQ2xFO1NBQ0Y7YUFDSTtZQUVILEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4RCxJQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDNUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7YUFDeEU7WUFFRCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLElBQUk7b0JBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLDZDQUFvQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztpQkFDM0Q7Z0JBQUMsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsdUJBQXVCO2lCQUN4QjthQUNGO1NBQ0Y7UUFFRCxPQUFPLElBQUksNkNBQW9CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ0gsMEJBQUM7QUFBRCxDQWhGQSxBQWdGQyxDQWhGd0MseUNBQWtCLEdBZ0YxRDtBQWhGWSxrREFBbUIiLCJmaWxlIjoiYXBpL2thbHR1cmEtbXVsdGktcmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEthbHR1cmFSZXNwb25zZSB9IGZyb20gXCIuL2thbHR1cmEtcmVzcG9uc2VcIjtcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0IH0gZnJvbSBcIi4va2FsdHVyYS1yZXF1ZXN0XCI7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdEJhc2UgfSBmcm9tIFwiLi9rYWx0dXJhLXJlcXVlc3QtYmFzZVwiO1xuXG5pbXBvcnQgeyBLYWx0dXJhTXVsdGlSZXNwb25zZSB9IGZyb20gXCIuL2thbHR1cmEtbXVsdGktcmVzcG9uc2VcIjtcbmltcG9ydCB7IEthbHR1cmFBUElFeGNlcHRpb24gfSBmcm9tIFwiLi9rYWx0dXJhLWFwaS1leGNlcHRpb25cIjtcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL2thbHR1cmEtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IGVudmlyb25tZW50IH0gZnJvbSAnLi4vZW52aXJvbm1lbnQnO1xuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhTXVsdGlSZXF1ZXN0IGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RCYXNlIHtcblxuICBwcm90ZWN0ZWQgY2FsbGJhY2s6IChyZXNwb25zZTogS2FsdHVyYU11bHRpUmVzcG9uc2UpID0+IHZvaWQ7XG5cbiAgcmVxdWVzdHM6IEthbHR1cmFSZXF1ZXN0PGFueT5bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IEthbHR1cmFSZXF1ZXN0PGFueT5bXSkge1xuICAgIHN1cGVyKHt9KTtcbiAgICB0aGlzLnJlcXVlc3RzID0gYXJncztcbiAgfVxuXG4gIGJ1aWxkUmVxdWVzdChkZWZhdWx0UmVxdWVzdE9wdGlvbnM6IEthbHR1cmFSZXF1ZXN0T3B0aW9ucyk6IHt9IHtcbiAgICBjb25zdCByZXN1bHQgPSBzdXBlci50b1JlcXVlc3RPYmplY3QoKTtcblxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSB0aGlzLnJlcXVlc3RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbaV0gPSB0aGlzLnJlcXVlc3RzW2ldLmJ1aWxkUmVxdWVzdChkZWZhdWx0UmVxdWVzdE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCk6IEthbHR1cmFPYmplY3RNZXRhZGF0YSB7XG4gICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAge1xuICAgICAgICBzZXJ2aWNlOiB7IGRlZmF1bHQ6ICdtdWx0aXJlcXVlc3QnLCB0eXBlOiAnYycgfVxuICAgICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuXG4gIH1cblxuICBwcml2YXRlIF91bndyYXBSZXNwb25zZShyZXNwb25zZTogYW55KTogYW55IHtcbiAgICBpZiAoZW52aXJvbm1lbnQucmVzcG9uc2UubmVzdGVkUmVzcG9uc2UpIHtcbiAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5oYXNPd25Qcm9wZXJ0eSgncmVzdWx0JykpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2Vycm9yJykpIHtcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmVycm9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuXG4gIHNldENvbXBsZXRpb24oY2FsbGJhY2s6IChyZXNwb25zZTogS2FsdHVyYU11bHRpUmVzcG9uc2UpID0+IHZvaWQpOiBLYWx0dXJhTXVsdGlSZXF1ZXN0IHtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBoYW5kbGVSZXNwb25zZShyZXNwb25zZXM6IGFueSk6IEthbHR1cmFNdWx0aVJlc3BvbnNlIHtcbiAgICBjb25zdCBrYWx0dXJhUmVzcG9uc2VzOiBLYWx0dXJhUmVzcG9uc2U8YW55PltdID0gW107XG5cbiAgICBjb25zdCB1bndyYXBwZWRSZXNwb25zZSA9IHRoaXMuX3Vud3JhcFJlc3BvbnNlKHJlc3BvbnNlcyk7XG4gICAgbGV0IHJlc3BvbnNlT2JqZWN0ID0gbnVsbDtcblxuICAgIGlmICghdW53cmFwcGVkUmVzcG9uc2UgfHwgISh1bndyYXBwZWRSZXNwb25zZSBpbnN0YW5jZW9mIEFycmF5KSB8fCB1bndyYXBwZWRSZXNwb25zZS5sZW5ndGggIT09IHRoaXMucmVxdWVzdHMubGVuZ3RoKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IG5ldyBLYWx0dXJhQVBJRXhjZXB0aW9uKGBzZXJ2ZXIgcmVzcG9uc2UgaXMgaW52YWxpZCwgZXhwZWN0ZWQgYXJyYXkgb2YgJHt0aGlzLnJlcXVlc3RzLmxlbmd0aH1gLCAnY2xpZW50OjpyZXNwb25zZV90eXBlX2Vycm9yJywgbnVsbCk7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGhpcy5yZXF1ZXN0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBrYWx0dXJhUmVzcG9uc2VzLnB1c2godGhpcy5yZXF1ZXN0c1tpXS5oYW5kbGVSZXNwb25zZShyZXNwb25zZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcblxuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRoaXMucmVxdWVzdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VydmVyUmVzcG9uc2UgPSB1bndyYXBwZWRSZXNwb25zZVtpXTtcbiAgICAgICAga2FsdHVyYVJlc3BvbnNlcy5wdXNoKHRoaXMucmVxdWVzdHNbaV0uaGFuZGxlUmVzcG9uc2Uoc2VydmVyUmVzcG9uc2UpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrKG5ldyBLYWx0dXJhTXVsdGlSZXNwb25zZShrYWx0dXJhUmVzcG9uc2VzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgLy8gZG8gbm90aGluZyBieSBkZXNpZ25cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgS2FsdHVyYU11bHRpUmVzcG9uc2Uoa2FsdHVyYVJlc3BvbnNlcyk7XG4gIH1cbn1cbiJdfQ==
