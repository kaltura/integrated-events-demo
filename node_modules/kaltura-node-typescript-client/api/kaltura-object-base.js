"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaObjectBase = void 0;
var kaltura_client_utils_1 = require("./kaltura-client-utils");
var kaltura_types_factory_1 = require("./kaltura-types-factory");
var kaltura_logger_1 = require("./kaltura-logger");
;
var KalturaObjectBase = /** @class */ (function () {
    function KalturaObjectBase(data) {
        this._allowedEmptyArray = [];
        this._dependentProperties = {};
        if (data) {
            Object.assign(this, data);
        }
        if (typeof this.relatedObjects === 'undefined')
            this.relatedObjects = {};
    }
    KalturaObjectBase.prototype.allowEmptyArray = function () {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        var metadata = this._getMetadata().properties;
        for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {
            var property = properties_1[_a];
            var metadataProperty = metadata[property];
            if (!metadataProperty) {
                kaltura_logger_1.Logger.debug("ignore property '".concat(property, "' flagged to allow empty array as it doesn't not exists on type (did you set the right property in method 'allowEmptyArray'?)"));
            }
            else if (metadataProperty.type !== 'a') {
                kaltura_logger_1.Logger.debug("ignore property '".concat(property, "' flagged to allow empty array as it is not of type array (did you set the right property in method 'allowEmptyArray'?)"));
            }
            else {
                this._allowedEmptyArray.push(property);
            }
        }
        return this;
    };
    KalturaObjectBase.prototype.setData = function (handler) {
        if (handler) {
            handler(this);
        }
        return this;
    };
    KalturaObjectBase.prototype.getTypeName = function () {
        return this._getMetadata().properties['objectType'].default;
    };
    KalturaObjectBase.prototype._getMetadata = function () {
        // DEVELOPER NOTICE: according to the server schema, property 'relatedObjects' should have be of type 'KalturaListResponse'.
        // this is not an option as it created circle reference where KalturaListResponse > KalturaObjectBase > KalturaListResponse.
        // Hence, we cannot set the type explicitly and we need to expose the default type 'KalturaObjectBase'
        return {
            properties: {
                relatedObjects: { type: 'm', readOnly: true, subTypeConstructor: null, subType: 'KalturaListResponse' },
            }
        };
    };
    KalturaObjectBase.prototype.hasMetadataProperty = function (propertyName) {
        return !!this._getMetadata().properties[propertyName];
    };
    KalturaObjectBase.prototype.toRequestObject = function () {
        var _this = this;
        var metadata = this._getMetadata();
        var result = {};
        try {
            Object.keys(metadata.properties).forEach(function (propertyName) {
                var propertyData = metadata.properties[propertyName];
                var propertyValue = _this._createRequestPropertyValue(propertyName, propertyData);
                switch (propertyValue.status) {
                    case "exists":
                        result[propertyName] = propertyValue.value;
                        break;
                    case "removed":
                        result["".concat(propertyName, "__null")] = ''; // mark property for deletion
                        break;
                    case "missing":
                    default:
                        break;
                }
            });
        }
        catch (err) {
            // TODO [kaltura] should use logHandler
            kaltura_logger_1.Logger.error(err.message);
            throw err;
        }
        return result;
    };
    KalturaObjectBase.prototype.fromResponseObject = function (data) {
        var _this = this;
        var metadata = this._getMetadata();
        var result = {};
        try {
            Object.keys(metadata.properties).forEach(function (propertyName) {
                var propertyData = metadata.properties[propertyName];
                var propertyValue = _this._parseResponseProperty(propertyName, propertyData, data);
                if (propertyValue != null && typeof propertyValue !== 'undefined') {
                    _this[propertyName] = propertyValue;
                }
            });
        }
        catch (err) {
            // TODO [kaltura] should use logHandler
            kaltura_logger_1.Logger.error(err.message);
            throw err;
        }
        return result;
    };
    KalturaObjectBase.prototype._parseResponseProperty = function (propertyName, property, source) {
        var _this = this;
        var result;
        var sourceValue = propertyName ? source[propertyName] : source;
        if (typeof sourceValue !== 'undefined') {
            if (sourceValue === null) {
                result = null;
            }
            else {
                switch (property.type) {
                    case 'b': // boolean
                        if (typeof sourceValue === 'boolean') {
                            result = sourceValue;
                        }
                        else if (sourceValue + '' === '0') {
                            result = false;
                        }
                        else if (sourceValue + '' === '1') {
                            result = true;
                        }
                        break;
                    case 's': // string
                        result = sourceValue + '';
                        break;
                    case 'n': // number
                    case 'en': // enum of type number
                        result = sourceValue * 1;
                        break;
                    case 'es': // enum of type number
                        result = typeof sourceValue !== 'undefined' && sourceValue !== null ? sourceValue.toString() : undefined;
                        break;
                    case 'o': // object
                        var propertyObjectType = sourceValue['objectType'];
                        if (propertyObjectType) {
                            result = this._createKalturaObject(propertyObjectType, property.subType);
                            if (result) {
                                result.fromResponseObject(sourceValue);
                            }
                            else {
                                throw new Error("Failed to create kaltura object of type '".concat(source['objectType'], "' (fallback type '").concat(property.subType, "')"));
                            }
                        }
                        else {
                            throw new Error("Failed to create kaltura object for property '".concat(propertyName, "' (type '").concat(property.subType, "'). provided response object is missing property 'objectType'."));
                        }
                        break;
                    case 'm': // map
                        var parsedMap_1 = {};
                        if (sourceValue instanceof Object) {
                            Object.keys(sourceValue).forEach(function (itemKey) {
                                var itemValue = sourceValue[itemKey];
                                var newItem = _this._createKalturaObject(itemValue['objectType'], property.subType);
                                if (itemValue && newItem) {
                                    newItem.fromResponseObject(itemValue);
                                    parsedMap_1[itemKey] = newItem;
                                }
                                else {
                                    throw new Error("Failed to create kaltura object for type '".concat(property.subType, "'"));
                                }
                            });
                            result = parsedMap_1;
                        }
                        else {
                            throw new Error("failed to parse property '".concat(propertyName, ". Expected type object, got type '").concat(typeof sourceValue));
                        }
                        break;
                    case 'a': // array
                        if (sourceValue instanceof Array) {
                            var parsedArray_1 = [];
                            sourceValue.forEach(function (responseItem) {
                                var newItem = _this._createKalturaObject(responseItem['objectType'], property.subType);
                                if (newItem) {
                                    newItem.fromResponseObject(responseItem);
                                    parsedArray_1.push(newItem);
                                }
                                else {
                                    throw new Error("Failed to create kaltura object for type '".concat(responseItem['objectType'], "' and for fallback type '").concat(property.subType, "'"));
                                }
                            });
                            result = parsedArray_1;
                        }
                        else {
                            throw new Error("failed to parse property '".concat(propertyName, ". Expected type array, got type '").concat(typeof sourceValue));
                        }
                        break;
                    case 'd': // date
                        if (this._isNumeric(sourceValue)) {
                            result = kaltura_client_utils_1.KalturaClientUtils.fromServerDate(sourceValue * 1);
                        }
                        else {
                            throw new Error("failed to parse property '".concat(propertyName, ". Expected type date, got type '").concat(typeof sourceValue));
                        }
                        break;
                    default:
                        break;
                }
            }
        }
        return result;
    };
    KalturaObjectBase.prototype._isNumeric = function (n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    };
    KalturaObjectBase.prototype._createKalturaObject = function (objectType, fallbackObjectType) {
        var result = null;
        var usedFallbackType = false;
        if (objectType) {
            result = kaltura_types_factory_1.KalturaTypesFactory.createObject(objectType);
        }
        if (!result && fallbackObjectType) {
            usedFallbackType = true;
            result = kaltura_types_factory_1.KalturaTypesFactory.createObject(fallbackObjectType);
        }
        if (usedFallbackType && result) {
            kaltura_logger_1.Logger.debug("could not find object type '".concat(objectType, "', Falling back to '").concat(fallbackObjectType, "' object type. (Did you remember to set your accepted object types in the request \u201Cconfig.acceptedTypes\u201D attribute?)"));
        }
        else if (!result) {
            kaltura_logger_1.Logger.debug("could not find object type '".concat(objectType, "'. (Did you remember to set your accepted object types in the request \u201Cconfig.acceptedTypes\u201D attribute?)"));
        }
        return result;
    };
    KalturaObjectBase.prototype._createRequestPropertyValue = function (propertyName, property) {
        var result = { status: 'missing' };
        if (property.type === 'c') {
            // constant string
            if (property.default) {
                result = { status: 'exists', value: property.default };
            }
        }
        else if (this._dependentProperties[propertyName]) {
            var dependentProperty = this._dependentProperties[propertyName];
            var resultValue = "{".concat(dependentProperty.request, ":result").concat(dependentProperty.targetPath ? ':' + dependentProperty.targetPath : '', "}");
            result = { status: 'exists', value: resultValue };
        }
        else if (!property.readOnly) {
            var value_1 = this[propertyName];
            if (typeof value_1 !== 'undefined') {
                if (value_1 === null) {
                    result = { status: 'removed' };
                }
                else {
                    switch (property.type) {
                        case 'b': // boolean
                            result = { status: 'exists', value: value_1 };
                            break;
                        case 's': // string
                            result = { status: 'exists', value: value_1 + '' };
                            break;
                        case 'n': // number
                        case 'en': // enum of type number
                            result = { status: 'exists', value: value_1 * 1 };
                            break;
                        case 'o': // object
                            if (value_1 instanceof KalturaObjectBase) {
                                result = { status: 'exists', value: value_1.toRequestObject() };
                            }
                            else {
                                throw new Error("failed to parse property. Expected '".concat(propertyName, " to be kaltura object"));
                            }
                            break;
                        case 'a': // array
                            if (value_1 instanceof Array) {
                                var parsedArray_2 = [];
                                value_1.forEach(function (item) {
                                    if (item instanceof KalturaObjectBase) {
                                        parsedArray_2.push(item.toRequestObject());
                                    }
                                });
                                var allowEmptyArrayAsAValue = this._allowedEmptyArray.indexOf(propertyName) !== -1;
                                if (allowEmptyArrayAsAValue || parsedArray_2.length !== 0) {
                                    if (parsedArray_2.length === value_1.length) {
                                        result = { status: 'exists', value: parsedArray_2 };
                                    }
                                    else {
                                        throw new Error("failed to parse array. Expected all '".concat(propertyName, " items to be kaltura object"));
                                    }
                                }
                            }
                            else {
                                throw new Error("failed to parse property. Expected '".concat(propertyName, " to be Array"));
                            }
                            break;
                        case 'm': //map
                            if (value_1 instanceof Object) {
                                var valueKeys = Object.keys(value_1);
                                if (valueKeys.length > 0) {
                                    var parsedObject_1 = {};
                                    valueKeys.forEach(function (itemKey) {
                                        var itemValue = value_1[itemKey];
                                        if (itemValue instanceof KalturaObjectBase) {
                                            parsedObject_1[itemKey] = itemValue.toRequestObject();
                                        }
                                    });
                                    if (valueKeys.length === Object.keys(parsedObject_1).length) {
                                        result = { status: 'exists', value: parsedObject_1 };
                                    }
                                    else {
                                        throw new Error("failed to parse map. Expected all '".concat(propertyName, " items to be kaltura object"));
                                    }
                                }
                            }
                            else {
                                throw new Error("failed to parse property. Expected '".concat(propertyName, " to be kaltura object"));
                            }
                            break;
                        case 'd': // date
                            if (value_1 instanceof Date) {
                                result = { status: 'exists', value: kaltura_client_utils_1.KalturaClientUtils.toServerDate(value_1) };
                            }
                            else {
                                throw new Error("failed to parse property. Expected '".concat(propertyName, " to be date"));
                            }
                            break;
                        case 'es': // enum of type string
                            result = { status: 'exists', value: typeof value_1 === 'string' ? value_1 : undefined };
                            break;
                        case 'f':
                            if (value_1 instanceof FormData) {
                                result = { status: 'exists', value: value_1 };
                            }
                            break;
                        default:
                            // do nothing
                            break;
                    }
                }
            }
        }
        return result;
    };
    KalturaObjectBase.prototype.setDependency = function () {
        var dependency = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            dependency[_i] = arguments[_i];
        }
        for (var i = 0, len = dependency.length; i < len; i++) {
            var item = dependency[i];
            var _a = item, property = _a.property, request = _a.request, targetPath = _a.targetPath;
            if (item instanceof Array) {
                property = item[0];
                request = item[1];
                targetPath = item.length === 3 ? item[2] : null;
            }
            // The server expect one based index (meaning the first item has index 1)
            // since Javascript array are zero based index we expose the api as zero based
            // and transform the index value in the actual request by adding 1
            request = request + 1;
            this._dependentProperties[property] = { property: property, request: request, targetPath: targetPath };
        }
        return this;
    };
    return KalturaObjectBase;
}());
exports.KalturaObjectBase = KalturaObjectBase;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
