"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaRequest = void 0;
var tslib_1 = require("tslib");
var kaltura_response_1 = require("./kaltura-response");
var kaltura_request_base_1 = require("./kaltura-request-base");
var kaltura_api_exception_1 = require("./kaltura-api-exception");
var kaltura_request_options_1 = require("./kaltura-request-options");
var environment_1 = require("../environment");
var KalturaRequest = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaRequest, _super);
    function KalturaRequest(data, _a) {
        var responseType = _a.responseType, responseSubType = _a.responseSubType, responseConstructor = _a.responseConstructor;
        var _this = _super.call(this, data) || this;
        _this.responseSubType = responseSubType;
        _this.responseType = responseType;
        _this._responseConstructor = responseConstructor;
        return _this;
    }
    KalturaRequest.prototype.setCompletion = function (callback) {
        this.callback = callback;
        return this;
    };
    KalturaRequest.prototype._unwrapResponse = function (response) {
        if (environment_1.environment.response.nestedResponse) {
            if (response && response.hasOwnProperty('result')) {
                if (response.result.hasOwnProperty('error')) {
                    return response.result.error;
                }
                else {
                    return response.result;
                }
            }
            else if (response && response.hasOwnProperty('error')) {
                return response.error;
            }
        }
        return response;
    };
    KalturaRequest.prototype.handleResponse = function (response) {
        var responseResult;
        var responseError;
        try {
            var unwrappedResponse = this._unwrapResponse(response);
            var responseObject = null;
            if (unwrappedResponse) {
                if (unwrappedResponse instanceof kaltura_api_exception_1.KalturaAPIException) {
                    // handle situation when multi request propagated actual api exception object.
                    responseObject = unwrappedResponse;
                }
                else if (unwrappedResponse.objectType === 'KalturaAPIException') {
                    responseObject = new kaltura_api_exception_1.KalturaAPIException(unwrappedResponse.message, unwrappedResponse.code, unwrappedResponse.args);
                }
                else {
                    responseObject = _super.prototype._parseResponseProperty.call(this, "", {
                        type: this.responseType,
                        subType: this.responseSubType
                    }, unwrappedResponse);
                }
            }
            if (!responseObject && this.responseType !== 'v') {
                responseError = new kaltura_api_exception_1.KalturaAPIException("server response is undefined, expected '".concat(this.responseType, " / ").concat(this.responseSubType, "'"), 'client::response_type_error', null);
            }
            else if (responseObject instanceof kaltura_api_exception_1.KalturaAPIException) {
                // got exception from library
                responseError = responseObject;
            }
            else {
                responseResult = responseObject;
            }
        }
        catch (ex) {
            responseError = new kaltura_api_exception_1.KalturaAPIException(ex.message, 'client::general_error', null);
        }
        var result = new kaltura_response_1.KalturaResponse(responseResult, responseError);
        if (this.callback) {
            try {
                this.callback(result);
            }
            catch (ex) {
                // do nothing by design
            }
        }
        return result;
    };
    KalturaRequest.prototype.setRequestOptions = function (arg) {
        this.__requestOptions__ = arg instanceof kaltura_request_options_1.KalturaRequestOptions ? arg : new kaltura_request_options_1.KalturaRequestOptions(arg);
        return this;
    };
    KalturaRequest.prototype.getRequestOptions = function () {
        return this.__requestOptions__;
    };
    KalturaRequest.prototype.buildRequest = function (defaultRequestOptions) {
        var requestOptionsObject = this.__requestOptions__ ? this.__requestOptions__.toRequestObject() : {};
        var defaultRequestOptionsObject = defaultRequestOptions ? defaultRequestOptions.toRequestObject() : {};
        return Object.assign({}, defaultRequestOptionsObject, requestOptionsObject, this.toRequestObject());
    };
    return KalturaRequest;
}(kaltura_request_base_1.KalturaRequestBase));
exports.KalturaRequest = KalturaRequest;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
