"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserReplaceUserLoginDataAction = void 0;
var tslib_1 = require("tslib");
var KalturaUser_1 = require("./KalturaUser");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'user' action 'replaceUserLoginData'.
 *
 * Usage: Replace a user's existing login data to a new or an existing login data
 * to only be used when admin impersonates a partner
 *
 * Server response type:         KalturaUser
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var UserReplaceUserLoginDataAction = /** @class */ (function (_super) {
    tslib_1.__extends(UserReplaceUserLoginDataAction, _super);
    function UserReplaceUserLoginDataAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaUser', responseConstructor: KalturaUser_1.KalturaUser }) || this;
    }
    UserReplaceUserLoginDataAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'user' },
            action: { type: 'c', default: 'replaceUserLoginData' },
            userId: { type: 's' },
            newLoginId: { type: 's' },
            existingLoginId: { type: 's' }
        });
        return result;
    };
    return UserReplaceUserLoginDataAction;
}(kaltura_request_1.KalturaRequest));
exports.UserReplaceUserLoginDataAction = UserReplaceUserLoginDataAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Vc2VyUmVwbGFjZVVzZXJMb2dpbkRhdGFBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZDQUE0QztBQUU1QyxzREFBd0U7QUFReEU7Ozs7Ozs7Ozs7R0FVRztBQUNIO0lBQW9ELDBEQUEyQjtJQU0zRSx3Q0FBWSxJQUF5QztlQUVqRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxhQUFhLEVBQUUsbUJBQW1CLEVBQUcseUJBQVcsRUFBRyxDQUFDO0lBQzNHLENBQUM7SUFFUyxxREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxNQUFNLEVBQUU7WUFDdEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7WUFDekQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDdkIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHFDQUFDO0FBQUQsQ0ExQkEsQUEwQkMsQ0ExQm1ELGdDQUFjLEdBMEJqRTtBQTFCWSx3RUFBOEIiLCJmaWxlIjoiYXBpL3R5cGVzL1VzZXJSZXBsYWNlVXNlckxvZ2luRGF0YUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVXNlciB9IGZyb20gJy4vS2FsdHVyYVVzZXInO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBVc2VyUmVwbGFjZVVzZXJMb2dpbkRhdGFBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgdXNlcklkIDogc3RyaW5nO1xuXHRuZXdMb2dpbklkIDogc3RyaW5nO1xuXHRleGlzdGluZ0xvZ2luSWQ/IDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAndXNlcicgYWN0aW9uICdyZXBsYWNlVXNlckxvZ2luRGF0YScuXG4gKlxuICogVXNhZ2U6IFJlcGxhY2UgYSB1c2VyJ3MgZXhpc3RpbmcgbG9naW4gZGF0YSB0byBhIG5ldyBvciBhbiBleGlzdGluZyBsb2dpbiBkYXRhXG4gKiB0byBvbmx5IGJlIHVzZWQgd2hlbiBhZG1pbiBpbXBlcnNvbmF0ZXMgYSBwYXJ0bmVyXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVVzZXJcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJSZXBsYWNlVXNlckxvZ2luRGF0YUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFVc2VyPiB7XG5cbiAgICB1c2VySWQgOiBzdHJpbmc7XG5cdG5ld0xvZ2luSWQgOiBzdHJpbmc7XG5cdGV4aXN0aW5nTG9naW5JZCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBVc2VyUmVwbGFjZVVzZXJMb2dpbkRhdGFBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFVc2VyJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFVc2VyICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1c2VyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVwbGFjZVVzZXJMb2dpbkRhdGEnIH0sXG5cdFx0XHRcdHVzZXJJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRuZXdMb2dpbklkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGV4aXN0aW5nTG9naW5JZCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
