"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleEventGetConflictsAction = void 0;
var tslib_1 = require("tslib");
var KalturaScheduleEventListResponse_1 = require("./KalturaScheduleEventListResponse");
var KalturaScheduleEvent_1 = require("./KalturaScheduleEvent");
var KalturaScheduleEventConflictType_1 = require("./KalturaScheduleEventConflictType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduleEvent' action 'getConflicts'.
 *
 * Usage: List conflicting events for resourcesIds by event's dates
 *
 * Server response type:         KalturaScheduleEventListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduleEventGetConflictsAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduleEventGetConflictsAction, _super);
    function ScheduleEventGetConflictsAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaScheduleEventListResponse', responseConstructor: KalturaScheduleEventListResponse_1.KalturaScheduleEventListResponse }) || this;
        if (typeof _this.scheduleEventConflictType === 'undefined')
            _this.scheduleEventConflictType = 1;
        return _this;
    }
    ScheduleEventGetConflictsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'schedule_scheduleevent' },
            action: { type: 'c', default: 'getConflicts' },
            resourceIds: { type: 's' },
            scheduleEvent: { type: 'o', subTypeConstructor: KalturaScheduleEvent_1.KalturaScheduleEvent, subType: 'KalturaScheduleEvent' },
            scheduleEventIdToIgnore: { type: 's' },
            scheduleEventConflictType: { type: 'en', subTypeConstructor: KalturaScheduleEventConflictType_1.KalturaScheduleEventConflictType, subType: 'KalturaScheduleEventConflictType' }
        });
        return result;
    };
    return ScheduleEventGetConflictsAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduleEventGetConflictsAction = ScheduleEventGetConflictsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50R2V0Q29uZmxpY3RzQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx1RkFBc0Y7QUFFdEYsK0RBQThEO0FBQzlELHVGQUFzRjtBQUN0RixzREFBd0U7QUFTeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBcUQsMkRBQWdEO0lBT2pHLHlDQUFZLElBQTBDO1FBQXRELFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsa0NBQWtDLEVBQUUsbUJBQW1CLEVBQUcsbUVBQWdDLEVBQUcsQ0FBQyxTQUVwSjtRQURHLElBQUksT0FBTyxLQUFJLENBQUMseUJBQXlCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7O0lBQ2xHLENBQUM7SUFFUyxzREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUN4RSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7WUFDakQsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDJDQUFvQixFQUFFLE9BQU8sRUFBRyxzQkFBc0IsRUFBRTtZQUMzRyx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEMseUJBQXlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLG1FQUFnQyxFQUFFLE9BQU8sRUFBRyxrQ0FBa0MsRUFBRTtTQUN2SSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsc0NBQUM7QUFBRCxDQTdCQSxBQTZCQyxDQTdCb0QsZ0NBQWMsR0E2QmxFO0FBN0JZLDBFQUErQiIsImZpbGUiOiJhcGkvdHlwZXMvU2NoZWR1bGVFdmVudEdldENvbmZsaWN0c0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhU2NoZWR1bGVFdmVudExpc3RSZXNwb25zZSB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlRXZlbnRMaXN0UmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBLYWx0dXJhU2NoZWR1bGVFdmVudCB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlRXZlbnQnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlRXZlbnRDb25mbGljdFR5cGUgfSBmcm9tICcuL0thbHR1cmFTY2hlZHVsZUV2ZW50Q29uZmxpY3RUeXBlJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVkdWxlRXZlbnRHZXRDb25mbGljdHNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgcmVzb3VyY2VJZHMgOiBzdHJpbmc7XG5cdHNjaGVkdWxlRXZlbnQgOiBLYWx0dXJhU2NoZWR1bGVFdmVudDtcblx0c2NoZWR1bGVFdmVudElkVG9JZ25vcmU/IDogc3RyaW5nO1xuXHRzY2hlZHVsZUV2ZW50Q29uZmxpY3RUeXBlPyA6IEthbHR1cmFTY2hlZHVsZUV2ZW50Q29uZmxpY3RUeXBlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2NoZWR1bGVFdmVudCcgYWN0aW9uICdnZXRDb25mbGljdHMnLlxuICpcbiAqIFVzYWdlOiBMaXN0IGNvbmZsaWN0aW5nIGV2ZW50cyBmb3IgcmVzb3VyY2VzSWRzIGJ5IGV2ZW50J3MgZGF0ZXNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhU2NoZWR1bGVFdmVudExpc3RSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVFdmVudEdldENvbmZsaWN0c0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFTY2hlZHVsZUV2ZW50TGlzdFJlc3BvbnNlPiB7XG5cbiAgICByZXNvdXJjZUlkcyA6IHN0cmluZztcblx0c2NoZWR1bGVFdmVudCA6IEthbHR1cmFTY2hlZHVsZUV2ZW50O1xuXHRzY2hlZHVsZUV2ZW50SWRUb0lnbm9yZSA6IHN0cmluZztcblx0c2NoZWR1bGVFdmVudENvbmZsaWN0VHlwZSA6IEthbHR1cmFTY2hlZHVsZUV2ZW50Q29uZmxpY3RUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFNjaGVkdWxlRXZlbnRHZXRDb25mbGljdHNBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZUV2ZW50TGlzdFJlc3BvbnNlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFTY2hlZHVsZUV2ZW50TGlzdFJlc3BvbnNlICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNjaGVkdWxlRXZlbnRDb25mbGljdFR5cGUgPT09ICd1bmRlZmluZWQnKSB0aGlzLnNjaGVkdWxlRXZlbnRDb25mbGljdFR5cGUgPSAxO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NjaGVkdWxlX3NjaGVkdWxlZXZlbnQnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRDb25mbGljdHMnIH0sXG5cdFx0XHRcdHJlc291cmNlSWRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNjaGVkdWxlRXZlbnQgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTY2hlZHVsZUV2ZW50LCBzdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZUV2ZW50JyB9LFxuXHRcdFx0XHRzY2hlZHVsZUV2ZW50SWRUb0lnbm9yZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzY2hlZHVsZUV2ZW50Q29uZmxpY3RUeXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRDb25mbGljdFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVNjaGVkdWxlRXZlbnRDb25mbGljdFR5cGUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
