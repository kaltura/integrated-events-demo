"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatsKmcCollectAction = void 0;
var tslib_1 = require("tslib");
var KalturaStatsKmcEvent_1 = require("./KalturaStatsKmcEvent");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'stats' action 'kmcCollect'.
 *
 * Usage: Will collect the kmcEvent sent form the KMC client
 * // this will actually be an empty function because all events will be sent using GET and will anyway be logged in the Apache log
 *
 * Server response type:         void
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var StatsKmcCollectAction = /** @class */ (function (_super) {
    tslib_1.__extends(StatsKmcCollectAction, _super);
    function StatsKmcCollectAction(data) {
        return _super.call(this, data, { responseType: 'v', responseSubType: '', responseConstructor: null }) || this;
    }
    StatsKmcCollectAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'stats' },
            action: { type: 'c', default: 'kmcCollect' },
            kmcEvent: { type: 'o', subTypeConstructor: KalturaStatsKmcEvent_1.KalturaStatsKmcEvent, subType: 'KalturaStatsKmcEvent' }
        });
        return result;
    };
    return StatsKmcCollectAction;
}(kaltura_request_1.KalturaRequest));
exports.StatsKmcCollectAction = StatsKmcCollectAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TdGF0c0ttY0NvbGxlY3RBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLCtEQUE4RDtBQUM5RCxzREFBd0U7QUFNeEU7Ozs7Ozs7Ozs7R0FVRztBQUNIO0lBQTJDLGlEQUFvQjtJQUkzRCwrQkFBWSxJQUFnQztlQUV4QyxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUM7SUFDeEYsQ0FBQztJQUVTLDRDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLE9BQU8sRUFBRTtZQUN2RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxZQUFZLEVBQUU7WUFDL0MsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyQ0FBb0IsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7U0FDN0YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QjBDLGdDQUFjLEdBc0J4RDtBQXRCWSxzREFBcUIiLCJmaWxlIjoiYXBpL3R5cGVzL1N0YXRzS21jQ29sbGVjdEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVN0YXRzS21jRXZlbnQgfSBmcm9tICcuL0thbHR1cmFTdGF0c0ttY0V2ZW50JztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRzS21jQ29sbGVjdEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBrbWNFdmVudCA6IEthbHR1cmFTdGF0c0ttY0V2ZW50O1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc3RhdHMnIGFjdGlvbiAna21jQ29sbGVjdCcuXG4gKlxuICogVXNhZ2U6IFdpbGwgY29sbGVjdCB0aGUga21jRXZlbnQgc2VudCBmb3JtIHRoZSBLTUMgY2xpZW50XG4gKiAvLyB0aGlzIHdpbGwgYWN0dWFsbHkgYmUgYW4gZW1wdHkgZnVuY3Rpb24gYmVjYXVzZSBhbGwgZXZlbnRzIHdpbGwgYmUgc2VudCB1c2luZyBHRVQgYW5kIHdpbGwgYW55d2F5IGJlIGxvZ2dlZCBpbiB0aGUgQXBhY2hlIGxvZ1xuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIHZvaWRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFN0YXRzS21jQ29sbGVjdEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PHZvaWQ+IHtcblxuICAgIGttY0V2ZW50IDogS2FsdHVyYVN0YXRzS21jRXZlbnQ7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogU3RhdHNLbWNDb2xsZWN0QWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAndicsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzdGF0cycgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2ttY0NvbGxlY3QnIH0sXG5cdFx0XHRcdGttY0V2ZW50IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RhdHNLbWNFdmVudCwgc3ViVHlwZSA6ICdLYWx0dXJhU3RhdHNLbWNFdmVudCcgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
