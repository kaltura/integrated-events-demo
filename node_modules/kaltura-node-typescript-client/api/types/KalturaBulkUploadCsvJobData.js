"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBulkUploadCsvJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBulkUploadCsvVersion_1 = require("./KalturaBulkUploadCsvVersion");
var KalturaString_1 = require("./KalturaString");
var KalturaBulkUploadJobData_1 = require("./KalturaBulkUploadJobData");
var KalturaBulkUploadCsvJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBulkUploadCsvJobData, _super);
    function KalturaBulkUploadCsvJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.columns === 'undefined')
            _this.columns = [];
        return _this;
    }
    KalturaBulkUploadCsvJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBulkUploadCsvJobData' },
            csvVersion: { type: 'en', readOnly: true, subTypeConstructor: KalturaBulkUploadCsvVersion_1.KalturaBulkUploadCsvVersion, subType: 'KalturaBulkUploadCsvVersion' },
            columns: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            processObjectId: { type: 's' },
            processObjectType: { type: 's' }
        });
        return result;
    };
    return KalturaBulkUploadCsvJobData;
}(KalturaBulkUploadJobData_1.KalturaBulkUploadJobData));
exports.KalturaBulkUploadCsvJobData = KalturaBulkUploadCsvJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBulkUploadCsvJobData', KalturaBulkUploadCsvJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQnVsa1VwbG9hZENzdkpvYkRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCw2RUFBNEU7QUFDNUUsaURBQWdEO0FBQ2hELHVFQUFvRztBQVNwRztJQUFpRCx1REFBd0I7SUFPckUscUNBQVksSUFBdUM7UUFBbkQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7SUFDL0QsQ0FBQztJQUVTLGtEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDZCQUE2QixFQUFFO1lBQ2hGLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx5REFBMkIsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDeEksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2QkFBYSxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDdkYsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDekIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0E1QkEsQUE0QkMsQ0E1QmdELG1EQUF3QixHQTRCeEU7QUE1Qlksa0VBQTJCO0FBOEJ4QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNkJBQTZCLEVBQUMsMkJBQTJCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUJ1bGtVcGxvYWRDc3ZKb2JEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUJ1bGtVcGxvYWRDc3ZWZXJzaW9uIH0gZnJvbSAnLi9LYWx0dXJhQnVsa1VwbG9hZENzdlZlcnNpb24nO1xuaW1wb3J0IHsgS2FsdHVyYVN0cmluZyB9IGZyb20gJy4vS2FsdHVyYVN0cmluZyc7XG5pbXBvcnQgeyBLYWx0dXJhQnVsa1VwbG9hZEpvYkRhdGEsIEthbHR1cmFCdWxrVXBsb2FkSm9iRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFCdWxrVXBsb2FkSm9iRGF0YSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUJ1bGtVcGxvYWRDc3ZKb2JEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhQnVsa1VwbG9hZEpvYkRhdGFBcmdzIHtcbiAgICBjb2x1bW5zPyA6IEthbHR1cmFTdHJpbmdbXTtcblx0cHJvY2Vzc09iamVjdElkPyA6IHN0cmluZztcblx0cHJvY2Vzc09iamVjdFR5cGU/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQnVsa1VwbG9hZENzdkpvYkRhdGEgZXh0ZW5kcyBLYWx0dXJhQnVsa1VwbG9hZEpvYkRhdGEge1xuXG4gICAgcmVhZG9ubHkgY3N2VmVyc2lvbiA6IEthbHR1cmFCdWxrVXBsb2FkQ3N2VmVyc2lvbjtcblx0Y29sdW1ucyA6IEthbHR1cmFTdHJpbmdbXTtcblx0cHJvY2Vzc09iamVjdElkIDogc3RyaW5nO1xuXHRwcm9jZXNzT2JqZWN0VHlwZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUJ1bGtVcGxvYWRDc3ZKb2JEYXRhQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY29sdW1ucyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuY29sdW1ucyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFCdWxrVXBsb2FkQ3N2Sm9iRGF0YScgfSxcblx0XHRcdFx0Y3N2VmVyc2lvbiA6IHsgdHlwZSA6ICdlbicsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJ1bGtVcGxvYWRDc3ZWZXJzaW9uLCBzdWJUeXBlIDogJ0thbHR1cmFCdWxrVXBsb2FkQ3N2VmVyc2lvbicgfSxcblx0XHRcdFx0Y29sdW1ucyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVN0cmluZywgc3ViVHlwZSA6ICdLYWx0dXJhU3RyaW5nJyB9LFxuXHRcdFx0XHRwcm9jZXNzT2JqZWN0SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJvY2Vzc09iamVjdFR5cGUgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFCdWxrVXBsb2FkQ3N2Sm9iRGF0YScsS2FsdHVyYUJ1bGtVcGxvYWRDc3ZKb2JEYXRhKTtcbiJdfQ==
