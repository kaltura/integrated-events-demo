"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendorIntegrationUpdateStatusAction = void 0;
var tslib_1 = require("tslib");
var KalturaIntegrationSetting_1 = require("./KalturaIntegrationSetting");
var KalturaVendorIntegrationStatus_1 = require("./KalturaVendorIntegrationStatus");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'vendorIntegration' action 'updateStatus'.
 *
 * Usage: Update vendor catalog item status by id
 *
 * Server response type:         KalturaIntegrationSetting
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var VendorIntegrationUpdateStatusAction = /** @class */ (function (_super) {
    tslib_1.__extends(VendorIntegrationUpdateStatusAction, _super);
    function VendorIntegrationUpdateStatusAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaIntegrationSetting', responseConstructor: KalturaIntegrationSetting_1.KalturaIntegrationSetting }) || this;
    }
    VendorIntegrationUpdateStatusAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'vendor_vendorintegration' },
            action: { type: 'c', default: 'updateStatus' },
            id: { type: 'n' },
            status: { type: 'en', subTypeConstructor: KalturaVendorIntegrationStatus_1.KalturaVendorIntegrationStatus, subType: 'KalturaVendorIntegrationStatus' }
        });
        return result;
    };
    return VendorIntegrationUpdateStatusAction;
}(kaltura_request_1.KalturaRequest));
exports.VendorIntegrationUpdateStatusAction = VendorIntegrationUpdateStatusAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9WZW5kb3JJbnRlZ3JhdGlvblVwZGF0ZVN0YXR1c0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseUVBQXdFO0FBRXhFLG1GQUFrRjtBQUNsRixzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBeUQsK0RBQXlDO0lBSzlGLDZDQUFZLElBQThDO2VBRXRELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLDJCQUEyQixFQUFFLG1CQUFtQixFQUFHLHFEQUF5QixFQUFHLENBQUM7SUFDdkksQ0FBQztJQUVTLDBEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDBCQUEwQixFQUFFO1lBQzFFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGNBQWMsRUFBRTtZQUNqRCxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0RBQThCLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1NBQ2hILENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQ0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJ3RCxnQ0FBYyxHQXdCdEU7QUF4Qlksa0ZBQW1DIiwiZmlsZSI6ImFwaS90eXBlcy9WZW5kb3JJbnRlZ3JhdGlvblVwZGF0ZVN0YXR1c0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nIH0gZnJvbSAnLi9LYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nJztcblxuaW1wb3J0IHsgS2FsdHVyYVZlbmRvckludGVncmF0aW9uU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhVmVuZG9ySW50ZWdyYXRpb25TdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVuZG9ySW50ZWdyYXRpb25VcGRhdGVTdGF0dXNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgaWQgOiBudW1iZXI7XG5cdHN0YXR1cyA6IEthbHR1cmFWZW5kb3JJbnRlZ3JhdGlvblN0YXR1cztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3ZlbmRvckludGVncmF0aW9uJyBhY3Rpb24gJ3VwZGF0ZVN0YXR1cycuXG4gKlxuICogVXNhZ2U6IFVwZGF0ZSB2ZW5kb3IgY2F0YWxvZyBpdGVtIHN0YXR1cyBieSBpZFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFJbnRlZ3JhdGlvblNldHRpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFZlbmRvckludGVncmF0aW9uVXBkYXRlU3RhdHVzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUludGVncmF0aW9uU2V0dGluZz4ge1xuXG4gICAgaWQgOiBudW1iZXI7XG5cdHN0YXR1cyA6IEthbHR1cmFWZW5kb3JJbnRlZ3JhdGlvblN0YXR1cztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBWZW5kb3JJbnRlZ3JhdGlvblVwZGF0ZVN0YXR1c0FjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUludGVncmF0aW9uU2V0dGluZycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd2ZW5kb3JfdmVuZG9yaW50ZWdyYXRpb24nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVTdGF0dXMnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHN0YXR1cyA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFWZW5kb3JJbnRlZ3JhdGlvblN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhVmVuZG9ySW50ZWdyYXRpb25TdGF0dXMnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
