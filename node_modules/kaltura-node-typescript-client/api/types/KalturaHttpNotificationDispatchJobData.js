"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaHttpNotificationDispatchJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaHttpNotificationMethod_1 = require("./KalturaHttpNotificationMethod");
var KalturaHttpNotificationAuthenticationMethod_1 = require("./KalturaHttpNotificationAuthenticationMethod");
var KalturaHttpNotificationSslVersion_1 = require("./KalturaHttpNotificationSslVersion");
var KalturaHttpNotificationCertificateType_1 = require("./KalturaHttpNotificationCertificateType");
var KalturaHttpNotificationSslKeyType_1 = require("./KalturaHttpNotificationSslKeyType");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaEventNotificationDispatchJobData_1 = require("./KalturaEventNotificationDispatchJobData");
var KalturaHttpNotificationDispatchJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaHttpNotificationDispatchJobData, _super);
    function KalturaHttpNotificationDispatchJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.customHeaders === 'undefined')
            _this.customHeaders = [];
        return _this;
    }
    KalturaHttpNotificationDispatchJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaHttpNotificationDispatchJobData' },
            url: { type: 's' },
            method: { type: 'en', subTypeConstructor: KalturaHttpNotificationMethod_1.KalturaHttpNotificationMethod, subType: 'KalturaHttpNotificationMethod' },
            contentType: { type: 's' },
            data: { type: 's' },
            timeout: { type: 'n' },
            connectTimeout: { type: 'n' },
            username: { type: 's' },
            password: { type: 's' },
            authenticationMethod: { type: 'en', subTypeConstructor: KalturaHttpNotificationAuthenticationMethod_1.KalturaHttpNotificationAuthenticationMethod, subType: 'KalturaHttpNotificationAuthenticationMethod' },
            sslVersion: { type: 'en', subTypeConstructor: KalturaHttpNotificationSslVersion_1.KalturaHttpNotificationSslVersion, subType: 'KalturaHttpNotificationSslVersion' },
            sslCertificate: { type: 's' },
            sslCertificateType: { type: 'es', subTypeConstructor: KalturaHttpNotificationCertificateType_1.KalturaHttpNotificationCertificateType, subType: 'KalturaHttpNotificationCertificateType' },
            sslCertificatePassword: { type: 's' },
            sslEngine: { type: 's' },
            sslEngineDefault: { type: 's' },
            sslKeyType: { type: 'es', subTypeConstructor: KalturaHttpNotificationSslKeyType_1.KalturaHttpNotificationSslKeyType, subType: 'KalturaHttpNotificationSslKeyType' },
            sslKey: { type: 's' },
            sslKeyPassword: { type: 's' },
            customHeaders: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            signSecret: { type: 's' }
        });
        return result;
    };
    return KalturaHttpNotificationDispatchJobData;
}(KalturaEventNotificationDispatchJobData_1.KalturaEventNotificationDispatchJobData));
exports.KalturaHttpNotificationDispatchJobData = KalturaHttpNotificationDispatchJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaHttpNotificationDispatchJobData', KalturaHttpNotificationDispatchJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
