"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleEventUpdateLiveFeatureAction = void 0;
var tslib_1 = require("tslib");
var KalturaLiveStreamScheduleEvent_1 = require("./KalturaLiveStreamScheduleEvent");
var KalturaLiveFeature_1 = require("./KalturaLiveFeature");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduleEvent' action 'updateLiveFeature'.
 *
 * Usage: Add feature to live event
 *
 * Server response type:         KalturaLiveStreamScheduleEvent
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduleEventUpdateLiveFeatureAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduleEventUpdateLiveFeatureAction, _super);
    function ScheduleEventUpdateLiveFeatureAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaLiveStreamScheduleEvent', responseConstructor: KalturaLiveStreamScheduleEvent_1.KalturaLiveStreamScheduleEvent }) || this;
    }
    ScheduleEventUpdateLiveFeatureAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'schedule_scheduleevent' },
            action: { type: 'c', default: 'updateLiveFeature' },
            scheduledEventId: { type: 'n' },
            featureName: { type: 's' },
            liveFeature: { type: 'o', subTypeConstructor: KalturaLiveFeature_1.KalturaLiveFeature, subType: 'KalturaLiveFeature' }
        });
        return result;
    };
    return ScheduleEventUpdateLiveFeatureAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduleEventUpdateLiveFeatureAction = ScheduleEventUpdateLiveFeatureAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50VXBkYXRlTGl2ZUZlYXR1cmVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1GQUFrRjtBQUVsRiwyREFBMEQ7QUFDMUQsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTBELGdFQUE4QztJQU1wRyw4Q0FBWSxJQUErQztlQUV2RCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxnQ0FBZ0MsRUFBRSxtQkFBbUIsRUFBRywrREFBOEIsRUFBRyxDQUFDO0lBQ2pKLENBQUM7SUFFUywyREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUN4RSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUN0RCxnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDakMsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtTQUM1RixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCeUQsZ0NBQWMsR0EwQnZFO0FBMUJZLG9GQUFvQyIsImZpbGUiOiJhcGkvdHlwZXMvU2NoZWR1bGVFdmVudFVwZGF0ZUxpdmVGZWF0dXJlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFMaXZlU3RyZWFtU2NoZWR1bGVFdmVudCB9IGZyb20gJy4vS2FsdHVyYUxpdmVTdHJlYW1TY2hlZHVsZUV2ZW50JztcblxuaW1wb3J0IHsgS2FsdHVyYUxpdmVGZWF0dXJlIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZUZlYXR1cmUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVFdmVudFVwZGF0ZUxpdmVGZWF0dXJlQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHNjaGVkdWxlZEV2ZW50SWQgOiBudW1iZXI7XG5cdGZlYXR1cmVOYW1lIDogc3RyaW5nO1xuXHRsaXZlRmVhdHVyZSA6IEthbHR1cmFMaXZlRmVhdHVyZTtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3NjaGVkdWxlRXZlbnQnIGFjdGlvbiAndXBkYXRlTGl2ZUZlYXR1cmUnLlxuICpcbiAqIFVzYWdlOiBBZGQgZmVhdHVyZSB0byBsaXZlIGV2ZW50XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUxpdmVTdHJlYW1TY2hlZHVsZUV2ZW50XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZUV2ZW50VXBkYXRlTGl2ZUZlYXR1cmVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhTGl2ZVN0cmVhbVNjaGVkdWxlRXZlbnQ+IHtcblxuICAgIHNjaGVkdWxlZEV2ZW50SWQgOiBudW1iZXI7XG5cdGZlYXR1cmVOYW1lIDogc3RyaW5nO1xuXHRsaXZlRmVhdHVyZSA6IEthbHR1cmFMaXZlRmVhdHVyZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTY2hlZHVsZUV2ZW50VXBkYXRlTGl2ZUZlYXR1cmVBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFMaXZlU3RyZWFtU2NoZWR1bGVFdmVudCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZVN0cmVhbVNjaGVkdWxlRXZlbnQgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NjaGVkdWxlX3NjaGVkdWxlZXZlbnQnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVMaXZlRmVhdHVyZScgfSxcblx0XHRcdFx0c2NoZWR1bGVkRXZlbnRJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRmZWF0dXJlTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRsaXZlRmVhdHVyZSA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUxpdmVGZWF0dXJlLCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlRmVhdHVyZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
