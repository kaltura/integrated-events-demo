"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTaskProfileAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaScheduledTaskProfile_1 = require("./KalturaScheduledTaskProfile");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduledTaskProfile' action 'add'.
 *
 * Usage: Add a new scheduled task profile
 *
 * Server response type:         KalturaScheduledTaskProfile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduledTaskProfileAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduledTaskProfileAddAction, _super);
    function ScheduledTaskProfileAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaScheduledTaskProfile', responseConstructor: KalturaScheduledTaskProfile_1.KalturaScheduledTaskProfile }) || this;
    }
    ScheduledTaskProfileAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'scheduledtask_scheduledtaskprofile' },
            action: { type: 'c', default: 'add' },
            scheduledTaskProfile: { type: 'o', subTypeConstructor: KalturaScheduledTaskProfile_1.KalturaScheduledTaskProfile, subType: 'KalturaScheduledTaskProfile' }
        });
        return result;
    };
    return ScheduledTaskProfileAddAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduledTaskProfileAddAction = ScheduledTaskProfileAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZWRUYXNrUHJvZmlsZUFkZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsNkVBQTRFO0FBRTVFLHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFtRCx5REFBMkM7SUFJMUYsdUNBQVksSUFBd0M7ZUFFaEQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsNkJBQTZCLEVBQUUsbUJBQW1CLEVBQUcseURBQTJCLEVBQUcsQ0FBQztJQUMzSSxDQUFDO0lBRVMsb0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsb0NBQW9DLEVBQUU7WUFDcEYsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsS0FBSyxFQUFFO1lBQ3hDLG9CQUFvQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx5REFBMkIsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7U0FDdkgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLG9DQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QmtELGdDQUFjLEdBc0JoRTtBQXRCWSxzRUFBNkIiLCJmaWxlIjoiYXBpL3R5cGVzL1NjaGVkdWxlZFRhc2tQcm9maWxlQWRkQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFTY2hlZHVsZWRUYXNrUHJvZmlsZSB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlZFRhc2tQcm9maWxlJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVkVGFza1Byb2ZpbGVBZGRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgc2NoZWR1bGVkVGFza1Byb2ZpbGUgOiBLYWx0dXJhU2NoZWR1bGVkVGFza1Byb2ZpbGU7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdzY2hlZHVsZWRUYXNrUHJvZmlsZScgYWN0aW9uICdhZGQnLlxuICpcbiAqIFVzYWdlOiBBZGQgYSBuZXcgc2NoZWR1bGVkIHRhc2sgcHJvZmlsZVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTY2hlZHVsZWRUYXNrUHJvZmlsZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVkVGFza1Byb2ZpbGVBZGRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhU2NoZWR1bGVkVGFza1Byb2ZpbGU+IHtcblxuICAgIHNjaGVkdWxlZFRhc2tQcm9maWxlIDogS2FsdHVyYVNjaGVkdWxlZFRhc2tQcm9maWxlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFNjaGVkdWxlZFRhc2tQcm9maWxlQWRkQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhU2NoZWR1bGVkVGFza1Byb2ZpbGUnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlZFRhc2tQcm9maWxlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzY2hlZHVsZWR0YXNrX3NjaGVkdWxlZHRhc2twcm9maWxlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYWRkJyB9LFxuXHRcdFx0XHRzY2hlZHVsZWRUYXNrUHJvZmlsZSA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlZFRhc2tQcm9maWxlLCBzdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZWRUYXNrUHJvZmlsZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
