"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAnalyticsFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaReportFilter_1 = require("./KalturaReportFilter");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaAnalyticsFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAnalyticsFilter, _super);
    function KalturaAnalyticsFilter(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.filters === 'undefined')
            _this.filters = [];
        return _this;
    }
    KalturaAnalyticsFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAnalyticsFilter' },
            from_time: { type: 's' },
            to_time: { type: 's' },
            metrics: { type: 's' },
            utcOffset: { type: 'n' },
            dimensions: { type: 's' },
            filters: { type: 'a', subTypeConstructor: KalturaReportFilter_1.KalturaReportFilter, subType: 'KalturaReportFilter' },
            orderBy: { type: 's' }
        });
        return result;
    };
    return KalturaAnalyticsFilter;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaAnalyticsFilter = KalturaAnalyticsFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAnalyticsFilter', KalturaAnalyticsFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQW5hbHl0aWNzRmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsNkRBQTREO0FBQzVELDhEQUFrRjtBQWFsRjtJQUE0QyxrREFBaUI7SUFVekQsZ0NBQVksSUFBa0M7UUFBOUMsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7SUFDL0QsQ0FBQztJQUVTLDZDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzNFLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUNuRyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FsQ0EsQUFrQ0MsQ0FsQzJDLHVDQUFpQixHQWtDNUQ7QUFsQ1ksd0RBQXNCO0FBb0NuQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUFuYWx5dGljc0ZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRGaWx0ZXInO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFBbmFseXRpY3NGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgZnJvbV90aW1lPyA6IHN0cmluZztcblx0dG9fdGltZT8gOiBzdHJpbmc7XG5cdG1ldHJpY3M/IDogc3RyaW5nO1xuXHR1dGNPZmZzZXQ/IDogbnVtYmVyO1xuXHRkaW1lbnNpb25zPyA6IHN0cmluZztcblx0ZmlsdGVycz8gOiBLYWx0dXJhUmVwb3J0RmlsdGVyW107XG5cdG9yZGVyQnk/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQW5hbHl0aWNzRmlsdGVyIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2Uge1xuXG4gICAgZnJvbV90aW1lIDogc3RyaW5nO1xuXHR0b190aW1lIDogc3RyaW5nO1xuXHRtZXRyaWNzIDogc3RyaW5nO1xuXHR1dGNPZmZzZXQgOiBudW1iZXI7XG5cdGRpbWVuc2lvbnMgOiBzdHJpbmc7XG5cdGZpbHRlcnMgOiBLYWx0dXJhUmVwb3J0RmlsdGVyW107XG5cdG9yZGVyQnkgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFBbmFseXRpY3NGaWx0ZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5maWx0ZXJzID09PSAndW5kZWZpbmVkJykgdGhpcy5maWx0ZXJzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUFuYWx5dGljc0ZpbHRlcicgfSxcblx0XHRcdFx0ZnJvbV90aW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHRvX3RpbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bWV0cmljcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1dGNPZmZzZXQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZGltZW5zaW9ucyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmaWx0ZXJzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVwb3J0RmlsdGVyLCBzdWJUeXBlIDogJ0thbHR1cmFSZXBvcnRGaWx0ZXInIH0sXG5cdFx0XHRcdG9yZGVyQnkgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFBbmFseXRpY3NGaWx0ZXInLEthbHR1cmFBbmFseXRpY3NGaWx0ZXIpO1xuIl19
