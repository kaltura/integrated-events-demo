"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaMediaEsearchExportToCsvJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaESearchEntryParams_1 = require("./KalturaESearchEntryParams");
var KalturaExportToCsvOptions_1 = require("./KalturaExportToCsvOptions");
var KalturaExportCsvJobData_1 = require("./KalturaExportCsvJobData");
var KalturaMediaEsearchExportToCsvJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaMediaEsearchExportToCsvJobData, _super);
    function KalturaMediaEsearchExportToCsvJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.options === 'undefined')
            _this.options = [];
        return _this;
    }
    KalturaMediaEsearchExportToCsvJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaMediaEsearchExportToCsvJobData' },
            searchParams: { type: 'o', subTypeConstructor: KalturaESearchEntryParams_1.KalturaESearchEntryParams, subType: 'KalturaESearchEntryParams' },
            options: { type: 'a', subTypeConstructor: KalturaExportToCsvOptions_1.KalturaExportToCsvOptions, subType: 'KalturaExportToCsvOptions' }
        });
        return result;
    };
    return KalturaMediaEsearchExportToCsvJobData;
}(KalturaExportCsvJobData_1.KalturaExportCsvJobData));
exports.KalturaMediaEsearchExportToCsvJobData = KalturaMediaEsearchExportToCsvJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaMediaEsearchExportToCsvJobData', KalturaMediaEsearchExportToCsvJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTWVkaWFFc2VhcmNoRXhwb3J0VG9Dc3ZKb2JEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QseUVBQXdFO0FBQ3hFLHlFQUF3RTtBQUN4RSxxRUFBaUc7QUFRakc7SUFBMkQsaUVBQXVCO0lBSzlFLCtDQUFZLElBQWlEO1FBQTdELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBRWQ7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLE9BQU8sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O0lBQy9ELENBQUM7SUFFUyw0REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1Q0FBdUMsRUFBRTtZQUMxRixZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUNwSCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtTQUN0RyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNENBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCMEQsaURBQXVCLEdBd0JqRjtBQXhCWSxzRkFBcUM7QUEwQmxELDJDQUFtQixDQUFDLFlBQVksQ0FBQyx1Q0FBdUMsRUFBQyxxQ0FBcUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhTWVkaWFFc2VhcmNoRXhwb3J0VG9Dc3ZKb2JEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUVTZWFyY2hFbnRyeVBhcmFtcyB9IGZyb20gJy4vS2FsdHVyYUVTZWFyY2hFbnRyeVBhcmFtcyc7XG5pbXBvcnQgeyBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zIH0gZnJvbSAnLi9LYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFFeHBvcnRDc3ZKb2JEYXRhLCBLYWx0dXJhRXhwb3J0Q3N2Sm9iRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFFeHBvcnRDc3ZKb2JEYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhTWVkaWFFc2VhcmNoRXhwb3J0VG9Dc3ZKb2JEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhRXhwb3J0Q3N2Sm9iRGF0YUFyZ3Mge1xuICAgIHNlYXJjaFBhcmFtcz8gOiBLYWx0dXJhRVNlYXJjaEVudHJ5UGFyYW1zO1xuXHRvcHRpb25zPyA6IEthbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnNbXTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYU1lZGlhRXNlYXJjaEV4cG9ydFRvQ3N2Sm9iRGF0YSBleHRlbmRzIEthbHR1cmFFeHBvcnRDc3ZKb2JEYXRhIHtcblxuICAgIHNlYXJjaFBhcmFtcyA6IEthbHR1cmFFU2VhcmNoRW50cnlQYXJhbXM7XG5cdG9wdGlvbnMgOiBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zID09PSAndW5kZWZpbmVkJykgdGhpcy5vcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYU1lZGlhRXNlYXJjaEV4cG9ydFRvQ3N2Sm9iRGF0YScgfSxcblx0XHRcdFx0c2VhcmNoUGFyYW1zIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRVNlYXJjaEVudHJ5UGFyYW1zLCBzdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoRW50cnlQYXJhbXMnIH0sXG5cdFx0XHRcdG9wdGlvbnMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnMsIHN1YlR5cGUgOiAnS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGEnLEthbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGEpO1xuIl19
