"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaScheduleEvent = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaScheduleEventStatus_1 = require("./KalturaScheduleEventStatus");
var KalturaLinkedScheduleEvent_1 = require("./KalturaLinkedScheduleEvent");
var KalturaScheduleEventClassificationType_1 = require("./KalturaScheduleEventClassificationType");
var KalturaScheduleEventRecurrenceType_1 = require("./KalturaScheduleEventRecurrenceType");
var KalturaScheduleEventRecurrence_1 = require("./KalturaScheduleEventRecurrence");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaScheduleEvent = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaScheduleEvent, _super);
    function KalturaScheduleEvent(data) {
        return _super.call(this, data) || this;
    }
    KalturaScheduleEvent.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaScheduleEvent' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            parentId: { type: 'n', readOnly: true },
            summary: { type: 's' },
            description: { type: 's' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaScheduleEventStatus_1.KalturaScheduleEventStatus, subType: 'KalturaScheduleEventStatus' },
            startDate: { type: 'd' },
            endDate: { type: 'd' },
            referenceId: { type: 's' },
            linkedTo: { type: 'o', subTypeConstructor: KalturaLinkedScheduleEvent_1.KalturaLinkedScheduleEvent, subType: 'KalturaLinkedScheduleEvent' },
            linkedBy: { type: 's' },
            classificationType: { type: 'en', subTypeConstructor: KalturaScheduleEventClassificationType_1.KalturaScheduleEventClassificationType, subType: 'KalturaScheduleEventClassificationType' },
            geoLatitude: { type: 'n' },
            geoLongitude: { type: 'n' },
            location: { type: 's' },
            organizer: { type: 's' },
            ownerId: { type: 's' },
            priority: { type: 'n' },
            sequence: { type: 'n' },
            recurrenceType: { type: 'en', subTypeConstructor: KalturaScheduleEventRecurrenceType_1.KalturaScheduleEventRecurrenceType, subType: 'KalturaScheduleEventRecurrenceType' },
            duration: { type: 'n' },
            contact: { type: 's' },
            comment: { type: 's' },
            tags: { type: 's' },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            recurrence: { type: 'o', subTypeConstructor: KalturaScheduleEventRecurrence_1.KalturaScheduleEventRecurrence, subType: 'KalturaScheduleEventRecurrence' }
        });
        return result;
    };
    return KalturaScheduleEvent;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaScheduleEvent = KalturaScheduleEvent;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaScheduleEvent', KalturaScheduleEvent);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
