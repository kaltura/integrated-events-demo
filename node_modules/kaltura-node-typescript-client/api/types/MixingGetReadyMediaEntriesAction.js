"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixingGetReadyMediaEntriesAction = void 0;
var tslib_1 = require("tslib");
var KalturaMediaEntry_1 = require("./KalturaMediaEntry");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'mixing' action 'getReadyMediaEntries'.
 *
 * Usage: Get all ready media entries that exist in the given mix id
 *
 * Server response type:         KalturaMediaEntry[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var MixingGetReadyMediaEntriesAction = /** @class */ (function (_super) {
    tslib_1.__extends(MixingGetReadyMediaEntriesAction, _super);
    function MixingGetReadyMediaEntriesAction(data) {
        var _this = _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaMediaEntry', responseConstructor: KalturaMediaEntry_1.KalturaMediaEntry }) || this;
        if (typeof _this.version === 'undefined')
            _this.version = -1;
        return _this;
    }
    MixingGetReadyMediaEntriesAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'mixing' },
            action: { type: 'c', default: 'getReadyMediaEntries' },
            mixId: { type: 's' },
            version: { type: 'n' }
        });
        return result;
    };
    return MixingGetReadyMediaEntriesAction;
}(kaltura_request_1.KalturaRequest));
exports.MixingGetReadyMediaEntriesAction = MixingGetReadyMediaEntriesAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NaXhpbmdHZXRSZWFkeU1lZGlhRW50cmllc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseURBQXdEO0FBRXhELHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFzRCw0REFBbUM7SUFLckYsMENBQVksSUFBMkM7UUFBdkQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRyxxQ0FBaUIsRUFBRyxDQUFDLFNBRXRIO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxPQUFPLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0lBQy9ELENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDeEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7WUFDekQsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHVDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QnFELGdDQUFjLEdBeUJuRTtBQXpCWSw0RUFBZ0MiLCJmaWxlIjoiYXBpL3R5cGVzL01peGluZ0dldFJlYWR5TWVkaWFFbnRyaWVzQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFNZWRpYUVudHJ5IH0gZnJvbSAnLi9LYWx0dXJhTWVkaWFFbnRyeSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1peGluZ0dldFJlYWR5TWVkaWFFbnRyaWVzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIG1peElkIDogc3RyaW5nO1xuXHR2ZXJzaW9uPyA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ21peGluZycgYWN0aW9uICdnZXRSZWFkeU1lZGlhRW50cmllcycuXG4gKlxuICogVXNhZ2U6IEdldCBhbGwgcmVhZHkgbWVkaWEgZW50cmllcyB0aGF0IGV4aXN0IGluIHRoZSBnaXZlbiBtaXggaWRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhTWVkaWFFbnRyeVtdXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBNaXhpbmdHZXRSZWFkeU1lZGlhRW50cmllc0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFNZWRpYUVudHJ5W10+IHtcblxuICAgIG1peElkIDogc3RyaW5nO1xuXHR2ZXJzaW9uIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IE1peGluZ0dldFJlYWR5TWVkaWFFbnRyaWVzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnYScsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhTWVkaWFFbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWVkaWFFbnRyeSAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy52ZXJzaW9uID09PSAndW5kZWZpbmVkJykgdGhpcy52ZXJzaW9uID0gLTE7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbWl4aW5nJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0UmVhZHlNZWRpYUVudHJpZXMnIH0sXG5cdFx0XHRcdG1peElkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHZlcnNpb24gOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
