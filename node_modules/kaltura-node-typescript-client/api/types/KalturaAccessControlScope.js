"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAccessControlScope = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAccessControlContextTypeHolder_1 = require("./KalturaAccessControlContextTypeHolder");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaAccessControlScope = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAccessControlScope, _super);
    function KalturaAccessControlScope(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.contexts === 'undefined')
            _this.contexts = [];
        if (typeof _this.hashes === 'undefined')
            _this.hashes = [];
        return _this;
    }
    KalturaAccessControlScope.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAccessControlScope' },
            referrer: { type: 's' },
            ip: { type: 's' },
            ks: { type: 's' },
            userAgent: { type: 's' },
            time: { type: 'd' },
            contexts: { type: 'a', subTypeConstructor: KalturaAccessControlContextTypeHolder_1.KalturaAccessControlContextTypeHolder, subType: 'KalturaAccessControlContextTypeHolder' },
            hashes: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaAccessControlScope;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaAccessControlScope = KalturaAccessControlScope;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAccessControlScope', KalturaAccessControlScope);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQWNjZXNzQ29udHJvbFNjb3BlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsaUdBQWdHO0FBQ2hHLHFEQUFvRDtBQUNwRCw4REFBa0Y7QUFhbEY7SUFBK0MscURBQWlCO0lBVTVELG1DQUFZLElBQXFDO1FBQWpELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBR2Q7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLFFBQVEsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkUsSUFBSSxPQUFPLEtBQUksQ0FBQyxNQUFNLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDOztJQUN2RCxDQUFDO0lBRVMsZ0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMkJBQTJCLEVBQUU7WUFDOUUsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbkIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkVBQXFDLEVBQUUsT0FBTyxFQUFHLHVDQUF1QyxFQUFFO1lBQ3hJLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsaUNBQWUsRUFBRSxPQUFPLEVBQUcsaUJBQWlCLEVBQUU7U0FDakYsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGdDQUFDO0FBQUQsQ0FuQ0EsQUFtQ0MsQ0FuQzhDLHVDQUFpQixHQW1DL0Q7QUFuQ1ksOERBQXlCO0FBcUN0QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsMkJBQTJCLEVBQUMseUJBQXlCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUFjY2Vzc0NvbnRyb2xTY29wZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFBY2Nlc3NDb250cm9sQ29udGV4dFR5cGVIb2xkZXIgfSBmcm9tICcuL0thbHR1cmFBY2Nlc3NDb250cm9sQ29udGV4dFR5cGVIb2xkZXInO1xuaW1wb3J0IHsgS2FsdHVyYUtleVZhbHVlIH0gZnJvbSAnLi9LYWx0dXJhS2V5VmFsdWUnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFBY2Nlc3NDb250cm9sU2NvcGVBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgcmVmZXJyZXI/IDogc3RyaW5nO1xuXHRpcD8gOiBzdHJpbmc7XG5cdGtzPyA6IHN0cmluZztcblx0dXNlckFnZW50PyA6IHN0cmluZztcblx0dGltZT8gOiBEYXRlO1xuXHRjb250ZXh0cz8gOiBLYWx0dXJhQWNjZXNzQ29udHJvbENvbnRleHRUeXBlSG9sZGVyW107XG5cdGhhc2hlcz8gOiBLYWx0dXJhS2V5VmFsdWVbXTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUFjY2Vzc0NvbnRyb2xTY29wZSBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlZmVycmVyIDogc3RyaW5nO1xuXHRpcCA6IHN0cmluZztcblx0a3MgOiBzdHJpbmc7XG5cdHVzZXJBZ2VudCA6IHN0cmluZztcblx0dGltZSA6IERhdGU7XG5cdGNvbnRleHRzIDogS2FsdHVyYUFjY2Vzc0NvbnRyb2xDb250ZXh0VHlwZUhvbGRlcltdO1xuXHRoYXNoZXMgOiBLYWx0dXJhS2V5VmFsdWVbXTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUFjY2Vzc0NvbnRyb2xTY29wZUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmNvbnRleHRzID09PSAndW5kZWZpbmVkJykgdGhpcy5jb250ZXh0cyA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5oYXNoZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmhhc2hlcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFBY2Nlc3NDb250cm9sU2NvcGUnIH0sXG5cdFx0XHRcdHJlZmVycmVyIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlwIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGtzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVzZXJBZ2VudCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0aW1lIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGNvbnRleHRzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQWNjZXNzQ29udHJvbENvbnRleHRUeXBlSG9sZGVyLCBzdWJUeXBlIDogJ0thbHR1cmFBY2Nlc3NDb250cm9sQ29udGV4dFR5cGVIb2xkZXInIH0sXG5cdFx0XHRcdGhhc2hlcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUtleVZhbHVlLCBzdWJUeXBlIDogJ0thbHR1cmFLZXlWYWx1ZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFBY2Nlc3NDb250cm9sU2NvcGUnLEthbHR1cmFBY2Nlc3NDb250cm9sU2NvcGUpO1xuIl19
