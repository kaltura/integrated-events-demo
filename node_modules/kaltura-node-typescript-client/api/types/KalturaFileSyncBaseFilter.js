"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaFileSyncBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaFileSyncObjectType_1 = require("./KalturaFileSyncObjectType");
var KalturaFileSyncStatus_1 = require("./KalturaFileSyncStatus");
var KalturaFileSyncType_1 = require("./KalturaFileSyncType");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaFileSyncBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaFileSyncBaseFilter, _super);
    function KalturaFileSyncBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaFileSyncBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaFileSyncBaseFilter' },
            partnerIdEqual: { type: 'n' },
            fileObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaFileSyncObjectType_1.KalturaFileSyncObjectType, subType: 'KalturaFileSyncObjectType' },
            fileObjectTypeIn: { type: 's' },
            objectIdEqual: { type: 's' },
            objectIdIn: { type: 's' },
            versionEqual: { type: 's' },
            versionIn: { type: 's' },
            objectSubTypeEqual: { type: 'n' },
            objectSubTypeIn: { type: 's' },
            dcEqual: { type: 's' },
            dcIn: { type: 's' },
            originalEqual: { type: 'n' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            readyAtGreaterThanOrEqual: { type: 'n' },
            readyAtLessThanOrEqual: { type: 'n' },
            syncTimeGreaterThanOrEqual: { type: 'n' },
            syncTimeLessThanOrEqual: { type: 'n' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaFileSyncStatus_1.KalturaFileSyncStatus, subType: 'KalturaFileSyncStatus' },
            statusIn: { type: 's' },
            fileTypeEqual: { type: 'en', subTypeConstructor: KalturaFileSyncType_1.KalturaFileSyncType, subType: 'KalturaFileSyncType' },
            fileTypeIn: { type: 's' },
            linkedIdEqual: { type: 'n' },
            linkCountGreaterThanOrEqual: { type: 'n' },
            linkCountLessThanOrEqual: { type: 'n' },
            fileSizeGreaterThanOrEqual: { type: 'n' },
            fileSizeLessThanOrEqual: { type: 'n' }
        });
        return result;
    };
    return KalturaFileSyncBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaFileSyncBaseFilter = KalturaFileSyncBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaFileSyncBaseFilter', KalturaFileSyncBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
