"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCategoryBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAppearInListType_1 = require("./KalturaAppearInListType");
var KalturaPrivacyType_1 = require("./KalturaPrivacyType");
var KalturaInheritanceType_1 = require("./KalturaInheritanceType");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaContributionPolicyType_1 = require("./KalturaContributionPolicyType");
var KalturaCategoryStatus_1 = require("./KalturaCategoryStatus");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaCategoryBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCategoryBaseFilter, _super);
    function KalturaCategoryBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaCategoryBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCategoryBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            idNotIn: { type: 's' },
            parentIdEqual: { type: 'n' },
            parentIdIn: { type: 's' },
            depthEqual: { type: 'n' },
            fullNameEqual: { type: 's' },
            fullNameStartsWith: { type: 's' },
            fullNameIn: { type: 's' },
            fullIdsEqual: { type: 's' },
            fullIdsStartsWith: { type: 's' },
            fullIdsMatchOr: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            tagsLike: { type: 's' },
            tagsMultiLikeOr: { type: 's' },
            tagsMultiLikeAnd: { type: 's' },
            appearInListEqual: { type: 'en', subTypeConstructor: KalturaAppearInListType_1.KalturaAppearInListType, subType: 'KalturaAppearInListType' },
            privacyEqual: { type: 'en', subTypeConstructor: KalturaPrivacyType_1.KalturaPrivacyType, subType: 'KalturaPrivacyType' },
            privacyIn: { type: 's' },
            inheritanceTypeEqual: { type: 'en', subTypeConstructor: KalturaInheritanceType_1.KalturaInheritanceType, subType: 'KalturaInheritanceType' },
            inheritanceTypeIn: { type: 's' },
            referenceIdEqual: { type: 's' },
            referenceIdEmpty: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            contributionPolicyEqual: { type: 'en', subTypeConstructor: KalturaContributionPolicyType_1.KalturaContributionPolicyType, subType: 'KalturaContributionPolicyType' },
            membersCountGreaterThanOrEqual: { type: 'n' },
            membersCountLessThanOrEqual: { type: 'n' },
            pendingMembersCountGreaterThanOrEqual: { type: 'n' },
            pendingMembersCountLessThanOrEqual: { type: 'n' },
            privacyContextEqual: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaCategoryStatus_1.KalturaCategoryStatus, subType: 'KalturaCategoryStatus' },
            statusIn: { type: 's' },
            inheritedParentIdEqual: { type: 'n' },
            inheritedParentIdIn: { type: 's' },
            partnerSortValueGreaterThanOrEqual: { type: 'n' },
            partnerSortValueLessThanOrEqual: { type: 'n' },
            aggregationCategoriesMultiLikeOr: { type: 's' },
            aggregationCategoriesMultiLikeAnd: { type: 's' }
        });
        return result;
    };
    return KalturaCategoryBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaCategoryBaseFilter = KalturaCategoryBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCategoryBaseFilter', KalturaCategoryBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
