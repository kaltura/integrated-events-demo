"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDeliveryProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDeliveryProfileType_1 = require("./KalturaDeliveryProfileType");
var KalturaPlaybackProtocol_1 = require("./KalturaPlaybackProtocol");
var KalturaDeliveryStatus_1 = require("./KalturaDeliveryStatus");
var KalturaUrlRecognizer_1 = require("./KalturaUrlRecognizer");
var KalturaUrlTokenizer_1 = require("./KalturaUrlTokenizer");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaAssetFilter_1 = require("./KalturaAssetFilter");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaDeliveryProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDeliveryProfile, _super);
    function KalturaDeliveryProfile(data) {
        return _super.call(this, data) || this;
    }
    KalturaDeliveryProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDeliveryProfile' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            name: { type: 's' },
            type: { type: 'es', subTypeConstructor: KalturaDeliveryProfileType_1.KalturaDeliveryProfileType, subType: 'KalturaDeliveryProfileType' },
            systemName: { type: 's' },
            description: { type: 's' },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            streamerType: { type: 'es', subTypeConstructor: KalturaPlaybackProtocol_1.KalturaPlaybackProtocol, subType: 'KalturaPlaybackProtocol' },
            url: { type: 's' },
            hostName: { type: 's', readOnly: true },
            status: { type: 'en', subTypeConstructor: KalturaDeliveryStatus_1.KalturaDeliveryStatus, subType: 'KalturaDeliveryStatus' },
            recognizer: { type: 'o', subTypeConstructor: KalturaUrlRecognizer_1.KalturaUrlRecognizer, subType: 'KalturaUrlRecognizer' },
            tokenizer: { type: 'o', subTypeConstructor: KalturaUrlTokenizer_1.KalturaUrlTokenizer, subType: 'KalturaUrlTokenizer' },
            isDefault: { type: 'en', readOnly: true, subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            parentId: { type: 'n', readOnly: true },
            mediaProtocols: { type: 's' },
            priority: { type: 'n' },
            extraParams: { type: 's' },
            supplementaryAssetsFilter: { type: 'o', subTypeConstructor: KalturaAssetFilter_1.KalturaAssetFilter, subType: 'KalturaAssetFilter' },
            enforceDeliveriesSupport: { type: 's' }
        });
        return result;
    };
    return KalturaDeliveryProfile;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaDeliveryProfile = KalturaDeliveryProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDeliveryProfile', KalturaDeliveryProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGVsaXZlcnlQcm9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsMkVBQTBFO0FBQzFFLHFFQUFvRTtBQUNwRSxpRUFBZ0U7QUFDaEUsK0RBQThEO0FBQzlELDZEQUE0RDtBQUM1RCxtRUFBa0U7QUFDbEUsMkRBQTBEO0FBQzFELDhEQUFrRjtBQW9CbEY7SUFBNEMsa0RBQWlCO0lBd0J6RCxnQ0FBWSxJQUFrQztlQUUxQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsNkNBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDM0UsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3BDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsdURBQTBCLEVBQUUsT0FBTyxFQUFHLDRCQUE0QixFQUFFO1lBQy9HLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsaURBQXVCLEVBQUUsT0FBTyxFQUFHLHlCQUF5QixFQUFFO1lBQ2pILEdBQUcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDcEIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzFDLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsNkNBQXFCLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3ZHLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsMkNBQW9CLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1lBQ3hHLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1lBQ3JHLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDN0gsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzFDLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLHlCQUF5QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx1Q0FBa0IsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDbkgsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2hDLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2QkFBQztBQUFELENBN0RBLEFBNkRDLENBN0QyQyx1Q0FBaUIsR0E2RDVEO0FBN0RZLHdEQUFzQjtBQStEbkMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFDLHNCQUFzQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFEZWxpdmVyeVByb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRGVsaXZlcnlQcm9maWxlVHlwZSB9IGZyb20gJy4vS2FsdHVyYURlbGl2ZXJ5UHJvZmlsZVR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVBsYXliYWNrUHJvdG9jb2wgfSBmcm9tICcuL0thbHR1cmFQbGF5YmFja1Byb3RvY29sJztcbmltcG9ydCB7IEthbHR1cmFEZWxpdmVyeVN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYURlbGl2ZXJ5U3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFVcmxSZWNvZ25pemVyIH0gZnJvbSAnLi9LYWx0dXJhVXJsUmVjb2duaXplcic7XG5pbXBvcnQgeyBLYWx0dXJhVXJsVG9rZW5pemVyIH0gZnJvbSAnLi9LYWx0dXJhVXJsVG9rZW5pemVyJztcbmltcG9ydCB7IEthbHR1cmFOdWxsYWJsZUJvb2xlYW4gfSBmcm9tICcuL0thbHR1cmFOdWxsYWJsZUJvb2xlYW4nO1xuaW1wb3J0IHsgS2FsdHVyYUFzc2V0RmlsdGVyIH0gZnJvbSAnLi9LYWx0dXJhQXNzZXRGaWx0ZXInO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFEZWxpdmVyeVByb2ZpbGVBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgbmFtZT8gOiBzdHJpbmc7XG5cdHR5cGU/IDogS2FsdHVyYURlbGl2ZXJ5UHJvZmlsZVR5cGU7XG5cdHN5c3RlbU5hbWU/IDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj8gOiBzdHJpbmc7XG5cdHN0cmVhbWVyVHlwZT8gOiBLYWx0dXJhUGxheWJhY2tQcm90b2NvbDtcblx0dXJsPyA6IHN0cmluZztcblx0c3RhdHVzPyA6IEthbHR1cmFEZWxpdmVyeVN0YXR1cztcblx0cmVjb2duaXplcj8gOiBLYWx0dXJhVXJsUmVjb2duaXplcjtcblx0dG9rZW5pemVyPyA6IEthbHR1cmFVcmxUb2tlbml6ZXI7XG5cdG1lZGlhUHJvdG9jb2xzPyA6IHN0cmluZztcblx0cHJpb3JpdHk/IDogbnVtYmVyO1xuXHRleHRyYVBhcmFtcz8gOiBzdHJpbmc7XG5cdHN1cHBsZW1lbnRhcnlBc3NldHNGaWx0ZXI/IDogS2FsdHVyYUFzc2V0RmlsdGVyO1xuXHRlbmZvcmNlRGVsaXZlcmllc1N1cHBvcnQ/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRGVsaXZlcnlQcm9maWxlIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2Uge1xuXG4gICAgcmVhZG9ubHkgaWQgOiBudW1iZXI7XG5cdHJlYWRvbmx5IHBhcnRuZXJJZCA6IG51bWJlcjtcblx0bmFtZSA6IHN0cmluZztcblx0dHlwZSA6IEthbHR1cmFEZWxpdmVyeVByb2ZpbGVUeXBlO1xuXHRzeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbiA6IHN0cmluZztcblx0cmVhZG9ubHkgY3JlYXRlZEF0IDogRGF0ZTtcblx0cmVhZG9ubHkgdXBkYXRlZEF0IDogRGF0ZTtcblx0c3RyZWFtZXJUeXBlIDogS2FsdHVyYVBsYXliYWNrUHJvdG9jb2w7XG5cdHVybCA6IHN0cmluZztcblx0cmVhZG9ubHkgaG9zdE5hbWUgOiBzdHJpbmc7XG5cdHN0YXR1cyA6IEthbHR1cmFEZWxpdmVyeVN0YXR1cztcblx0cmVjb2duaXplciA6IEthbHR1cmFVcmxSZWNvZ25pemVyO1xuXHR0b2tlbml6ZXIgOiBLYWx0dXJhVXJsVG9rZW5pemVyO1xuXHRyZWFkb25seSBpc0RlZmF1bHQgOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuO1xuXHRyZWFkb25seSBwYXJlbnRJZCA6IG51bWJlcjtcblx0bWVkaWFQcm90b2NvbHMgOiBzdHJpbmc7XG5cdHByaW9yaXR5IDogbnVtYmVyO1xuXHRleHRyYVBhcmFtcyA6IHN0cmluZztcblx0c3VwcGxlbWVudGFyeUFzc2V0c0ZpbHRlciA6IEthbHR1cmFBc3NldEZpbHRlcjtcblx0ZW5mb3JjZURlbGl2ZXJpZXNTdXBwb3J0IDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRGVsaXZlcnlQcm9maWxlQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFEZWxpdmVyeVByb2ZpbGUnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURlbGl2ZXJ5UHJvZmlsZVR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYURlbGl2ZXJ5UHJvZmlsZVR5cGUnIH0sXG5cdFx0XHRcdHN5c3RlbU5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZGVzY3JpcHRpb24gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c3RyZWFtZXJUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBsYXliYWNrUHJvdG9jb2wsIHN1YlR5cGUgOiAnS2FsdHVyYVBsYXliYWNrUHJvdG9jb2wnIH0sXG5cdFx0XHRcdHVybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRob3N0TmFtZSA6IHsgdHlwZSA6ICdzJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHN0YXR1cyA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEZWxpdmVyeVN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhRGVsaXZlcnlTdGF0dXMnIH0sXG5cdFx0XHRcdHJlY29nbml6ZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVcmxSZWNvZ25pemVyLCBzdWJUeXBlIDogJ0thbHR1cmFVcmxSZWNvZ25pemVyJyB9LFxuXHRcdFx0XHR0b2tlbml6ZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVcmxUb2tlbml6ZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVVybFRva2VuaXplcicgfSxcblx0XHRcdFx0aXNEZWZhdWx0IDogeyB0eXBlIDogJ2VuJywgcmVhZE9ubHkgOiB0cnVlLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuLCBzdWJUeXBlIDogJ0thbHR1cmFOdWxsYWJsZUJvb2xlYW4nIH0sXG5cdFx0XHRcdHBhcmVudElkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bWVkaWFQcm90b2NvbHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJpb3JpdHkgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZXh0cmFQYXJhbXMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3VwcGxlbWVudGFyeUFzc2V0c0ZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUFzc2V0RmlsdGVyLCBzdWJUeXBlIDogJ0thbHR1cmFBc3NldEZpbHRlcicgfSxcblx0XHRcdFx0ZW5mb3JjZURlbGl2ZXJpZXNTdXBwb3J0IDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhRGVsaXZlcnlQcm9maWxlJyxLYWx0dXJhRGVsaXZlcnlQcm9maWxlKTtcbiJdfQ==
