"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDistributionValidationErrorInvalidData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionValidationErrorType_1 = require("./KalturaDistributionValidationErrorType");
var KalturaDistributionValidationError_1 = require("./KalturaDistributionValidationError");
var KalturaDistributionValidationErrorInvalidData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDistributionValidationErrorInvalidData, _super);
    function KalturaDistributionValidationErrorInvalidData(data) {
        return _super.call(this, data) || this;
    }
    KalturaDistributionValidationErrorInvalidData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDistributionValidationErrorInvalidData' },
            fieldName: { type: 's' },
            validationErrorType: { type: 'en', subTypeConstructor: KalturaDistributionValidationErrorType_1.KalturaDistributionValidationErrorType, subType: 'KalturaDistributionValidationErrorType' },
            validationErrorParam: { type: 's' }
        });
        return result;
    };
    return KalturaDistributionValidationErrorInvalidData;
}(KalturaDistributionValidationError_1.KalturaDistributionValidationError));
exports.KalturaDistributionValidationErrorInvalidData = KalturaDistributionValidationErrorInvalidData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDistributionValidationErrorInvalidData', KalturaDistributionValidationErrorInvalidData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9ySW52YWxpZERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxtR0FBa0c7QUFDbEcsMkZBQWtJO0FBU2xJO0lBQW1FLHlFQUFrQztJQU1qRyx1REFBWSxJQUF5RDtlQUVqRSxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsb0VBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsK0NBQStDLEVBQUU7WUFDbEcsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixtQkFBbUIsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0VBQXNDLEVBQUUsT0FBTyxFQUFHLHdDQUF3QyxFQUFFO1lBQ3RKLG9CQUFvQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUM1QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsb0RBQUM7QUFBRCxDQXpCQSxBQXlCQyxDQXpCa0UsdUVBQWtDLEdBeUJwRztBQXpCWSxzR0FBNkM7QUEyQjFELDJDQUFtQixDQUFDLFlBQVksQ0FBQywrQ0FBK0MsRUFBQyw2Q0FBNkMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9ySW52YWxpZERhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9yVHlwZSB9IGZyb20gJy4vS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvclR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvciwgS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvckFyZ3MgfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3JJbnZhbGlkRGF0YUFyZ3MgIGV4dGVuZHMgS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvckFyZ3Mge1xuICAgIGZpZWxkTmFtZT8gOiBzdHJpbmc7XG5cdHZhbGlkYXRpb25FcnJvclR5cGU/IDogS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvclR5cGU7XG5cdHZhbGlkYXRpb25FcnJvclBhcmFtPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvckludmFsaWREYXRhIGV4dGVuZHMgS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvciB7XG5cbiAgICBmaWVsZE5hbWUgOiBzdHJpbmc7XG5cdHZhbGlkYXRpb25FcnJvclR5cGUgOiBLYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9yVHlwZTtcblx0dmFsaWRhdGlvbkVycm9yUGFyYW0gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3JJbnZhbGlkRGF0YUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9ySW52YWxpZERhdGEnIH0sXG5cdFx0XHRcdGZpZWxkTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR2YWxpZGF0aW9uRXJyb3JUeXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvclR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvclR5cGUnIH0sXG5cdFx0XHRcdHZhbGlkYXRpb25FcnJvclBhcmFtIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9ySW52YWxpZERhdGEnLEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3JJbnZhbGlkRGF0YSk7XG4iXX0=
