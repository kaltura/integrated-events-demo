"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaViewHistoryUserEntryAdvancedFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaUserEntryExtendedStatus_1 = require("./KalturaUserEntryExtendedStatus");
var KalturaSearchItem_1 = require("./KalturaSearchItem");
var KalturaViewHistoryUserEntryAdvancedFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaViewHistoryUserEntryAdvancedFilter, _super);
    function KalturaViewHistoryUserEntryAdvancedFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaViewHistoryUserEntryAdvancedFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaViewHistoryUserEntryAdvancedFilter' },
            idEqual: { type: 's' },
            idIn: { type: 's' },
            userIdEqual: { type: 's' },
            userIdIn: { type: 's' },
            updatedAtGreaterThanOrEqual: { type: 's' },
            updatedAtLessThanOrEqual: { type: 's' },
            extendedStatusEqual: { type: 'es', subTypeConstructor: KalturaUserEntryExtendedStatus_1.KalturaUserEntryExtendedStatus, subType: 'KalturaUserEntryExtendedStatus' },
            extendedStatusIn: { type: 's' }
        });
        return result;
    };
    return KalturaViewHistoryUserEntryAdvancedFilter;
}(KalturaSearchItem_1.KalturaSearchItem));
exports.KalturaViewHistoryUserEntryAdvancedFilter = KalturaViewHistoryUserEntryAdvancedFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaViewHistoryUserEntryAdvancedFilter', KalturaViewHistoryUserEntryAdvancedFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVmlld0hpc3RvcnlVc2VyRW50cnlBZHZhbmNlZEZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1GQUFrRjtBQUNsRix5REFBK0U7QUFjL0U7SUFBK0QscUVBQWlCO0lBVzVFLG1EQUFZLElBQXFEO2VBRTdELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyxnRUFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRywyQ0FBMkMsRUFBRTtZQUM5RixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtEQUE4QixFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUN0SSxnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDeEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGdEQUFDO0FBQUQsQ0FuQ0EsQUFtQ0MsQ0FuQzhELHFDQUFpQixHQW1DL0U7QUFuQ1ksOEZBQXlDO0FBcUN0RCwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsMkNBQTJDLEVBQUMseUNBQXlDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVZpZXdIaXN0b3J5VXNlckVudHJ5QWR2YW5jZWRGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cyc7XG5pbXBvcnQgeyBLYWx0dXJhU2VhcmNoSXRlbSwgS2FsdHVyYVNlYXJjaEl0ZW1BcmdzIH0gZnJvbSAnLi9LYWx0dXJhU2VhcmNoSXRlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVZpZXdIaXN0b3J5VXNlckVudHJ5QWR2YW5jZWRGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFTZWFyY2hJdGVtQXJncyB7XG4gICAgaWRFcXVhbD8gOiBzdHJpbmc7XG5cdGlkSW4/IDogc3RyaW5nO1xuXHR1c2VySWRFcXVhbD8gOiBzdHJpbmc7XG5cdHVzZXJJZEluPyA6IHN0cmluZztcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IHN0cmluZztcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IHN0cmluZztcblx0ZXh0ZW5kZWRTdGF0dXNFcXVhbD8gOiBLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXM7XG5cdGV4dGVuZGVkU3RhdHVzSW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhVmlld0hpc3RvcnlVc2VyRW50cnlBZHZhbmNlZEZpbHRlciBleHRlbmRzIEthbHR1cmFTZWFyY2hJdGVtIHtcblxuICAgIGlkRXF1YWwgOiBzdHJpbmc7XG5cdGlkSW4gOiBzdHJpbmc7XG5cdHVzZXJJZEVxdWFsIDogc3RyaW5nO1xuXHR1c2VySWRJbiA6IHN0cmluZztcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogc3RyaW5nO1xuXHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiBzdHJpbmc7XG5cdGV4dGVuZGVkU3RhdHVzRXF1YWwgOiBLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXM7XG5cdGV4dGVuZGVkU3RhdHVzSW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFWaWV3SGlzdG9yeVVzZXJFbnRyeUFkdmFuY2VkRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFWaWV3SGlzdG9yeVVzZXJFbnRyeUFkdmFuY2VkRmlsdGVyJyB9LFxuXHRcdFx0XHRpZEVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXNlcklkRXF1YWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXNlcklkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRleHRlbmRlZFN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVVzZXJFbnRyeUV4dGVuZGVkU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cycgfSxcblx0XHRcdFx0ZXh0ZW5kZWRTdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVZpZXdIaXN0b3J5VXNlckVudHJ5QWR2YW5jZWRGaWx0ZXInLEthbHR1cmFWaWV3SGlzdG9yeVVzZXJFbnRyeUFkdmFuY2VkRmlsdGVyKTtcbiJdfQ==
