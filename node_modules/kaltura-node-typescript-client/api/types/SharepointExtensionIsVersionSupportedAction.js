"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SharepointExtensionIsVersionSupportedAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'sharepointExtension' action 'isVersionSupported'.
 *
 * Usage: Is this Kaltura-Sharepoint-Server-Plugin supports minimum version of $major.$minor.$build (which is required by the extension)
 *
 * Server response type:         boolean
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var SharepointExtensionIsVersionSupportedAction = /** @class */ (function (_super) {
    tslib_1.__extends(SharepointExtensionIsVersionSupportedAction, _super);
    function SharepointExtensionIsVersionSupportedAction(data) {
        return _super.call(this, data, { responseType: 'b', responseSubType: '', responseConstructor: null }) || this;
    }
    SharepointExtensionIsVersionSupportedAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'kalturasharepointextension_sharepointextension' },
            action: { type: 'c', default: 'isVersionSupported' },
            serverMajor: { type: 'n' },
            serverMinor: { type: 'n' },
            serverBuild: { type: 'n' }
        });
        return result;
    };
    return SharepointExtensionIsVersionSupportedAction;
}(kaltura_request_1.KalturaRequest));
exports.SharepointExtensionIsVersionSupportedAction = SharepointExtensionIsVersionSupportedAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TaGFyZXBvaW50RXh0ZW5zaW9uSXNWZXJzaW9uU3VwcG9ydGVkQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxzREFBd0U7QUFReEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBaUUsdUVBQXVCO0lBTXBGLHFEQUFZLElBQXNEO2VBRTlELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQztJQUN4RixDQUFDO0lBRVMsa0VBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZ0RBQWdELEVBQUU7WUFDaEcsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDdkQsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDbkIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtEQUFDO0FBQUQsQ0ExQkEsQUEwQkMsQ0ExQmdFLGdDQUFjLEdBMEI5RTtBQTFCWSxrR0FBMkMiLCJmaWxlIjoiYXBpL3R5cGVzL1NoYXJlcG9pbnRFeHRlbnNpb25Jc1ZlcnNpb25TdXBwb3J0ZWRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNoYXJlcG9pbnRFeHRlbnNpb25Jc1ZlcnNpb25TdXBwb3J0ZWRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgc2VydmVyTWFqb3IgOiBudW1iZXI7XG5cdHNlcnZlck1pbm9yIDogbnVtYmVyO1xuXHRzZXJ2ZXJCdWlsZCA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3NoYXJlcG9pbnRFeHRlbnNpb24nIGFjdGlvbiAnaXNWZXJzaW9uU3VwcG9ydGVkJy5cbiAqXG4gKiBVc2FnZTogSXMgdGhpcyBLYWx0dXJhLVNoYXJlcG9pbnQtU2VydmVyLVBsdWdpbiBzdXBwb3J0cyBtaW5pbXVtIHZlcnNpb24gb2YgJG1ham9yLiRtaW5vci4kYnVpbGQgKHdoaWNoIGlzIHJlcXVpcmVkIGJ5IHRoZSBleHRlbnNpb24pXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgYm9vbGVhblxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2hhcmVwb2ludEV4dGVuc2lvbklzVmVyc2lvblN1cHBvcnRlZEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PGJvb2xlYW4+IHtcblxuICAgIHNlcnZlck1ham9yIDogbnVtYmVyO1xuXHRzZXJ2ZXJNaW5vciA6IG51bWJlcjtcblx0c2VydmVyQnVpbGQgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogU2hhcmVwb2ludEV4dGVuc2lvbklzVmVyc2lvblN1cHBvcnRlZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ2InLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAna2FsdHVyYXNoYXJlcG9pbnRleHRlbnNpb25fc2hhcmVwb2ludGV4dGVuc2lvbicgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2lzVmVyc2lvblN1cHBvcnRlZCcgfSxcblx0XHRcdFx0c2VydmVyTWFqb3IgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2VydmVyTWlub3IgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2VydmVyQnVpbGQgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
