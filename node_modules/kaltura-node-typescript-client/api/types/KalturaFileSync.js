"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaFileSync = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaFileSyncObjectType_1 = require("./KalturaFileSyncObjectType");
var KalturaFileSyncStatus_1 = require("./KalturaFileSyncStatus");
var KalturaFileSyncType_1 = require("./KalturaFileSyncType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaFileSync = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaFileSync, _super);
    function KalturaFileSync(data) {
        return _super.call(this, data) || this;
    }
    KalturaFileSync.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaFileSync' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            fileObjectType: { type: 'es', readOnly: true, subTypeConstructor: KalturaFileSyncObjectType_1.KalturaFileSyncObjectType, subType: 'KalturaFileSyncObjectType' },
            objectId: { type: 's', readOnly: true },
            version: { type: 's', readOnly: true },
            objectSubType: { type: 'n', readOnly: true },
            dc: { type: 's', readOnly: true },
            original: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            readyAt: { type: 'n', readOnly: true },
            syncTime: { type: 'n', readOnly: true },
            status: { type: 'en', subTypeConstructor: KalturaFileSyncStatus_1.KalturaFileSyncStatus, subType: 'KalturaFileSyncStatus' },
            fileType: { type: 'en', readOnly: true, subTypeConstructor: KalturaFileSyncType_1.KalturaFileSyncType, subType: 'KalturaFileSyncType' },
            linkedId: { type: 'n', readOnly: true },
            linkCount: { type: 'n', readOnly: true },
            fileRoot: { type: 's' },
            filePath: { type: 's' },
            fileSize: { type: 'n', readOnly: true },
            fileUrl: { type: 's', readOnly: true },
            fileContent: { type: 's', readOnly: true },
            fileDiscSize: { type: 'n', readOnly: true },
            isCurrentDc: { type: 'b', readOnly: true },
            isDir: { type: 'b', readOnly: true },
            originalId: { type: 'n', readOnly: true },
            srcPath: { type: 's' },
            srcEncKey: { type: 's' },
            storageClass: { type: 's' }
        });
        return result;
    };
    return KalturaFileSync;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaFileSync = KalturaFileSync;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaFileSync', KalturaFileSync);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
