"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResponseProfileRecalculateAction = void 0;
var tslib_1 = require("tslib");
var KalturaResponseProfileCacheRecalculateResults_1 = require("./KalturaResponseProfileCacheRecalculateResults");
var KalturaResponseProfileCacheRecalculateOptions_1 = require("./KalturaResponseProfileCacheRecalculateOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'responseProfile' action 'recalculate'.
 *
 * Usage: Recalculate response profile cached objects
 *
 * Server response type:         KalturaResponseProfileCacheRecalculateResults
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ResponseProfileRecalculateAction = /** @class */ (function (_super) {
    tslib_1.__extends(ResponseProfileRecalculateAction, _super);
    function ResponseProfileRecalculateAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaResponseProfileCacheRecalculateResults', responseConstructor: KalturaResponseProfileCacheRecalculateResults_1.KalturaResponseProfileCacheRecalculateResults }) || this;
    }
    ResponseProfileRecalculateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'responseprofile' },
            action: { type: 'c', default: 'recalculate' },
            options: { type: 'o', subTypeConstructor: KalturaResponseProfileCacheRecalculateOptions_1.KalturaResponseProfileCacheRecalculateOptions, subType: 'KalturaResponseProfileCacheRecalculateOptions' }
        });
        return result;
    };
    return ResponseProfileRecalculateAction;
}(kaltura_request_1.KalturaRequest));
exports.ResponseProfileRecalculateAction = ResponseProfileRecalculateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9SZXNwb25zZVByb2ZpbGVSZWNhbGN1bGF0ZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsaUhBQWdIO0FBRWhILGlIQUFnSDtBQUNoSCxzREFBd0U7QUFNeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBc0QsNERBQTZEO0lBSS9HLDBDQUFZLElBQTJDO2VBRW5ELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLCtDQUErQyxFQUFFLG1CQUFtQixFQUFHLDZGQUE2QyxFQUFHLENBQUM7SUFDL0ssQ0FBQztJQUVTLHVEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ2pFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUNoRCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZGQUE2QyxFQUFFLE9BQU8sRUFBRywrQ0FBK0MsRUFBRTtTQUM5SSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQXRCQSxBQXNCQyxDQXRCcUQsZ0NBQWMsR0FzQm5FO0FBdEJZLDRFQUFnQyIsImZpbGUiOiJhcGkvdHlwZXMvUmVzcG9uc2VQcm9maWxlUmVjYWxjdWxhdGVBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVJlc3BvbnNlUHJvZmlsZUNhY2hlUmVjYWxjdWxhdGVSZXN1bHRzIH0gZnJvbSAnLi9LYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZVJlc3VsdHMnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZU9wdGlvbnMgfSBmcm9tICcuL0thbHR1cmFSZXNwb25zZVByb2ZpbGVDYWNoZVJlY2FsY3VsYXRlT3B0aW9ucyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBSZXNwb25zZVByb2ZpbGVSZWNhbGN1bGF0ZUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBvcHRpb25zIDogS2FsdHVyYVJlc3BvbnNlUHJvZmlsZUNhY2hlUmVjYWxjdWxhdGVPcHRpb25zO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAncmVzcG9uc2VQcm9maWxlJyBhY3Rpb24gJ3JlY2FsY3VsYXRlJy5cbiAqXG4gKiBVc2FnZTogUmVjYWxjdWxhdGUgcmVzcG9uc2UgcHJvZmlsZSBjYWNoZWQgb2JqZWN0c1xuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFSZXNwb25zZVByb2ZpbGVDYWNoZVJlY2FsY3VsYXRlUmVzdWx0c1xuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUmVzcG9uc2VQcm9maWxlUmVjYWxjdWxhdGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZVJlc3VsdHM+IHtcblxuICAgIG9wdGlvbnMgOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZU9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogUmVzcG9uc2VQcm9maWxlUmVjYWxjdWxhdGVBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFSZXNwb25zZVByb2ZpbGVDYWNoZVJlY2FsY3VsYXRlUmVzdWx0cycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZVJlc3VsdHMgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3Jlc3BvbnNlcHJvZmlsZScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3JlY2FsY3VsYXRlJyB9LFxuXHRcdFx0XHRvcHRpb25zIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQ2FjaGVSZWNhbGN1bGF0ZU9wdGlvbnMsIHN1YlR5cGUgOiAnS2FsdHVyYVJlc3BvbnNlUHJvZmlsZUNhY2hlUmVjYWxjdWxhdGVPcHRpb25zJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
