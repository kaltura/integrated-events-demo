"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EmailIngestionProfileGetByEmailAddressAction = void 0;
var tslib_1 = require("tslib");
var KalturaEmailIngestionProfile_1 = require("./KalturaEmailIngestionProfile");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'EmailIngestionProfile' action 'getByEmailAddress'.
 *
 * Usage: Retrieve a EmailIngestionProfile by email address
 *
 * Server response type:         KalturaEmailIngestionProfile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EmailIngestionProfileGetByEmailAddressAction = /** @class */ (function (_super) {
    tslib_1.__extends(EmailIngestionProfileGetByEmailAddressAction, _super);
    function EmailIngestionProfileGetByEmailAddressAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEmailIngestionProfile', responseConstructor: KalturaEmailIngestionProfile_1.KalturaEmailIngestionProfile }) || this;
    }
    EmailIngestionProfileGetByEmailAddressAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'emailingestionprofile' },
            action: { type: 'c', default: 'getByEmailAddress' },
            emailAddress: { type: 's' }
        });
        return result;
    };
    return EmailIngestionProfileGetByEmailAddressAction;
}(kaltura_request_1.KalturaRequest));
exports.EmailIngestionProfileGetByEmailAddressAction = EmailIngestionProfileGetByEmailAddressAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbWFpbEluZ2VzdGlvblByb2ZpbGVHZXRCeUVtYWlsQWRkcmVzc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsK0VBQThFO0FBRTlFLHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFrRSx3RUFBNEM7SUFJMUcsc0RBQVksSUFBdUQ7ZUFFL0Qsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsOEJBQThCLEVBQUUsbUJBQW1CLEVBQUcsMkRBQTRCLEVBQUcsQ0FBQztJQUM3SSxDQUFDO0lBRVMsbUVBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDdkUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7WUFDdEQsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNwQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsbURBQUM7QUFBRCxDQXRCQSxBQXNCQyxDQXRCaUUsZ0NBQWMsR0FzQi9FO0FBdEJZLG9HQUE0QyIsImZpbGUiOiJhcGkvdHlwZXMvRW1haWxJbmdlc3Rpb25Qcm9maWxlR2V0QnlFbWFpbEFkZHJlc3NBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUVtYWlsSW5nZXN0aW9uUHJvZmlsZSB9IGZyb20gJy4vS2FsdHVyYUVtYWlsSW5nZXN0aW9uUHJvZmlsZSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVtYWlsSW5nZXN0aW9uUHJvZmlsZUdldEJ5RW1haWxBZGRyZXNzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGVtYWlsQWRkcmVzcyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ0VtYWlsSW5nZXN0aW9uUHJvZmlsZScgYWN0aW9uICdnZXRCeUVtYWlsQWRkcmVzcycuXG4gKlxuICogVXNhZ2U6IFJldHJpZXZlIGEgRW1haWxJbmdlc3Rpb25Qcm9maWxlIGJ5IGVtYWlsIGFkZHJlc3NcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhRW1haWxJbmdlc3Rpb25Qcm9maWxlXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBFbWFpbEluZ2VzdGlvblByb2ZpbGVHZXRCeUVtYWlsQWRkcmVzc0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFFbWFpbEluZ2VzdGlvblByb2ZpbGU+IHtcblxuICAgIGVtYWlsQWRkcmVzcyA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBFbWFpbEluZ2VzdGlvblByb2ZpbGVHZXRCeUVtYWlsQWRkcmVzc0FjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUVtYWlsSW5nZXN0aW9uUHJvZmlsZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW1haWxJbmdlc3Rpb25Qcm9maWxlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdlbWFpbGluZ2VzdGlvbnByb2ZpbGUnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRCeUVtYWlsQWRkcmVzcycgfSxcblx0XHRcdFx0ZW1haWxBZGRyZXNzIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
