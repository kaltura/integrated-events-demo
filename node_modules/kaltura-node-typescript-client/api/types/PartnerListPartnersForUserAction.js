"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartnerListPartnersForUserAction = void 0;
var tslib_1 = require("tslib");
var KalturaPartnerListResponse_1 = require("./KalturaPartnerListResponse");
var KalturaPartnerFilter_1 = require("./KalturaPartnerFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'partner' action 'listPartnersForUser'.
 *
 * Usage: Retrieve a list of partner objects which the current user is allowed to access
 *
 * Server response type:         KalturaPartnerListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PartnerListPartnersForUserAction = /** @class */ (function (_super) {
    tslib_1.__extends(PartnerListPartnersForUserAction, _super);
    function PartnerListPartnersForUserAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPartnerListResponse', responseConstructor: KalturaPartnerListResponse_1.KalturaPartnerListResponse }) || this;
    }
    PartnerListPartnersForUserAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'partner' },
            action: { type: 'c', default: 'listPartnersForUser' },
            partnerFilter: { type: 'o', subTypeConstructor: KalturaPartnerFilter_1.KalturaPartnerFilter, subType: 'KalturaPartnerFilter' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' }
        });
        return result;
    };
    return PartnerListPartnersForUserAction;
}(kaltura_request_1.KalturaRequest));
exports.PartnerListPartnersForUserAction = PartnerListPartnersForUserAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QYXJ0bmVyTGlzdFBhcnRuZXJzRm9yVXNlckFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkVBQTBFO0FBRTFFLCtEQUE4RDtBQUM5RCwyREFBMEQ7QUFDMUQsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXNELDREQUEwQztJQUs1RiwwQ0FBWSxJQUE0QztlQUVwRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyw0QkFBNEIsRUFBRSxtQkFBbUIsRUFBRyx1REFBMEIsRUFBRyxDQUFDO0lBQ3pJLENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxTQUFTLEVBQUU7WUFDekQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcscUJBQXFCLEVBQUU7WUFDeEQsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyQ0FBb0IsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7WUFDM0csS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx1Q0FBa0IsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7U0FDdEYsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHVDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QnFELGdDQUFjLEdBd0JuRTtBQXhCWSw0RUFBZ0MiLCJmaWxlIjoiYXBpL3R5cGVzL1BhcnRuZXJMaXN0UGFydG5lcnNGb3JVc2VyQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFQYXJ0bmVyTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi9LYWx0dXJhUGFydG5lckxpc3RSZXNwb25zZSc7XG5cbmltcG9ydCB7IEthbHR1cmFQYXJ0bmVyRmlsdGVyIH0gZnJvbSAnLi9LYWx0dXJhUGFydG5lckZpbHRlcic7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyUGFnZXIgfSBmcm9tICcuL0thbHR1cmFGaWx0ZXJQYWdlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBQYXJ0bmVyTGlzdFBhcnRuZXJzRm9yVXNlckFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBwYXJ0bmVyRmlsdGVyPyA6IEthbHR1cmFQYXJ0bmVyRmlsdGVyO1xuXHRwYWdlcj8gOiBLYWx0dXJhRmlsdGVyUGFnZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwYXJ0bmVyJyBhY3Rpb24gJ2xpc3RQYXJ0bmVyc0ZvclVzZXInLlxuICpcbiAqIFVzYWdlOiBSZXRyaWV2ZSBhIGxpc3Qgb2YgcGFydG5lciBvYmplY3RzIHdoaWNoIHRoZSBjdXJyZW50IHVzZXIgaXMgYWxsb3dlZCB0byBhY2Nlc3NcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhUGFydG5lckxpc3RSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUGFydG5lckxpc3RQYXJ0bmVyc0ZvclVzZXJBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUGFydG5lckxpc3RSZXNwb25zZT4ge1xuXG4gICAgcGFydG5lckZpbHRlciA6IEthbHR1cmFQYXJ0bmVyRmlsdGVyO1xuXHRwYWdlciA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogUGFydG5lckxpc3RQYXJ0bmVyc0ZvclVzZXJBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFQYXJ0bmVyTGlzdFJlc3BvbnNlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFQYXJ0bmVyTGlzdFJlc3BvbnNlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdwYXJ0bmVyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbGlzdFBhcnRuZXJzRm9yVXNlcicgfSxcblx0XHRcdFx0cGFydG5lckZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBhcnRuZXJGaWx0ZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVBhcnRuZXJGaWx0ZXInIH0sXG5cdFx0XHRcdHBhZ2VyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRmlsdGVyUGFnZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUZpbHRlclBhZ2VyJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
