"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrmLicenseAccessGetAccessAction = void 0;
var tslib_1 = require("tslib");
var KalturaDrmLicenseAccessDetails_1 = require("./KalturaDrmLicenseAccessDetails");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'drmLicenseAccess' action 'getAccess'.
 *
 * Usage: getAccessAction
 * input: flavor ids, drmProvider
 * Get Access Action
 *
 * Server response type:         KalturaDrmLicenseAccessDetails
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DrmLicenseAccessGetAccessAction = /** @class */ (function (_super) {
    tslib_1.__extends(DrmLicenseAccessGetAccessAction, _super);
    function DrmLicenseAccessGetAccessAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDrmLicenseAccessDetails', responseConstructor: KalturaDrmLicenseAccessDetails_1.KalturaDrmLicenseAccessDetails }) || this;
    }
    DrmLicenseAccessGetAccessAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'drm_drmlicenseaccess' },
            action: { type: 'c', default: 'getAccess' },
            entryId: { type: 's' },
            flavorIds: { type: 's' },
            referrer: { type: 's' }
        });
        return result;
    };
    return DrmLicenseAccessGetAccessAction;
}(kaltura_request_1.KalturaRequest));
exports.DrmLicenseAccessGetAccessAction = DrmLicenseAccessGetAccessAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Ecm1MaWNlbnNlQWNjZXNzR2V0QWNjZXNzQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxtRkFBa0Y7QUFFbEYsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7OztHQVdHO0FBQ0g7SUFBcUQsMkRBQThDO0lBTS9GLHlDQUFZLElBQTBDO2VBRWxELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGdDQUFnQyxFQUFFLG1CQUFtQixFQUFHLCtEQUE4QixFQUFHLENBQUM7SUFDakosQ0FBQztJQUVTLHNEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1lBQ3RFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUM5QyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNoQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsc0NBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCb0QsZ0NBQWMsR0EwQmxFO0FBMUJZLDBFQUErQiIsImZpbGUiOiJhcGkvdHlwZXMvRHJtTGljZW5zZUFjY2Vzc0dldEFjY2Vzc0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhRHJtTGljZW5zZUFjY2Vzc0RldGFpbHMgfSBmcm9tICcuL0thbHR1cmFEcm1MaWNlbnNlQWNjZXNzRGV0YWlscyc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERybUxpY2Vuc2VBY2Nlc3NHZXRBY2Nlc3NBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0Zmxhdm9ySWRzIDogc3RyaW5nO1xuXHRyZWZlcnJlciA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2RybUxpY2Vuc2VBY2Nlc3MnIGFjdGlvbiAnZ2V0QWNjZXNzJy5cbiAqXG4gKiBVc2FnZTogZ2V0QWNjZXNzQWN0aW9uXG4gKiBpbnB1dDogZmxhdm9yIGlkcywgZHJtUHJvdmlkZXJcbiAqIEdldCBBY2Nlc3MgQWN0aW9uXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYURybUxpY2Vuc2VBY2Nlc3NEZXRhaWxzXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBEcm1MaWNlbnNlQWNjZXNzR2V0QWNjZXNzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYURybUxpY2Vuc2VBY2Nlc3NEZXRhaWxzPiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRmbGF2b3JJZHMgOiBzdHJpbmc7XG5cdHJlZmVycmVyIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IERybUxpY2Vuc2VBY2Nlc3NHZXRBY2Nlc3NBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFEcm1MaWNlbnNlQWNjZXNzRGV0YWlscycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhRHJtTGljZW5zZUFjY2Vzc0RldGFpbHMgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2RybV9kcm1saWNlbnNlYWNjZXNzJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0QWNjZXNzJyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGZsYXZvcklkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZWZlcnJlciA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
