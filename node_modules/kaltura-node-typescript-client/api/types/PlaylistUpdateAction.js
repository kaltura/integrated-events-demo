"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaPlaylist_1 = require("./KalturaPlaylist");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playlist' action 'update'.
 *
 * Usage: Update existing playlist
 * Note - you cannot change playlist type. Updated playlist must be of the same type
 *
 * Server response type:         KalturaPlaylist
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlaylistUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlaylistUpdateAction, _super);
    function PlaylistUpdateAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPlaylist', responseConstructor: KalturaPlaylist_1.KalturaPlaylist }) || this;
        if (typeof _this.updateStats === 'undefined')
            _this.updateStats = false;
        return _this;
    }
    PlaylistUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playlist' },
            action: { type: 'c', default: 'update' },
            id: { type: 's' },
            playlist: { type: 'o', subTypeConstructor: KalturaPlaylist_1.KalturaPlaylist, subType: 'KalturaPlaylist' },
            updateStats: { type: 'b' }
        });
        return result;
    };
    return PlaylistUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.PlaylistUpdateAction = PlaylistUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5bGlzdFVwZGF0ZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEscURBQW9EO0FBRXBELHNEQUF3RTtBQVF4RTs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBMEMsZ0RBQStCO0lBTXJFLDhCQUFZLElBQStCO1FBQTNDLFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUcsaUNBQWUsRUFBRyxDQUFDLFNBRWxIO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxXQUFXLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOztJQUMxRSxDQUFDO0lBRVMsMkNBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsVUFBVSxFQUFFO1lBQzFELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUMzQyxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsaUNBQWUsRUFBRSxPQUFPLEVBQUcsaUJBQWlCLEVBQUU7WUFDNUYsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNuQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQTNCQSxBQTJCQyxDQTNCeUMsZ0NBQWMsR0EyQnZEO0FBM0JZLG9EQUFvQiIsImZpbGUiOiJhcGkvdHlwZXMvUGxheWxpc3RVcGRhdGVBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVBsYXlsaXN0IH0gZnJvbSAnLi9LYWx0dXJhUGxheWxpc3QnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5bGlzdFVwZGF0ZUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IHN0cmluZztcblx0cGxheWxpc3QgOiBLYWx0dXJhUGxheWxpc3Q7XG5cdHVwZGF0ZVN0YXRzPyA6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwbGF5bGlzdCcgYWN0aW9uICd1cGRhdGUnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgZXhpc3RpbmcgcGxheWxpc3RcbiAqIE5vdGUgLSB5b3UgY2Fubm90IGNoYW5nZSBwbGF5bGlzdCB0eXBlLiBVcGRhdGVkIHBsYXlsaXN0IG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFQbGF5bGlzdFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUGxheWxpc3RVcGRhdGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUGxheWxpc3Q+IHtcblxuICAgIGlkIDogc3RyaW5nO1xuXHRwbGF5bGlzdCA6IEthbHR1cmFQbGF5bGlzdDtcblx0dXBkYXRlU3RhdHMgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBsYXlsaXN0VXBkYXRlQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhUGxheWxpc3QnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBsYXlsaXN0ICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnVwZGF0ZVN0YXRzID09PSAndW5kZWZpbmVkJykgdGhpcy51cGRhdGVTdGF0cyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3BsYXlsaXN0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlJyB9LFxuXHRcdFx0XHRpZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwbGF5bGlzdCA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBsYXlsaXN0LCBzdWJUeXBlIDogJ0thbHR1cmFQbGF5bGlzdCcgfSxcblx0XHRcdFx0dXBkYXRlU3RhdHMgOiB7IHR5cGUgOiAnYicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
