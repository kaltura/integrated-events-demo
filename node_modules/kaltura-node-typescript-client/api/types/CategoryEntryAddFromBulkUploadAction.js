"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoryEntryAddFromBulkUploadAction = void 0;
var tslib_1 = require("tslib");
var KalturaBulkUpload_1 = require("./KalturaBulkUpload");
var KalturaBulkServiceData_1 = require("./KalturaBulkServiceData");
var KalturaBulkUploadCategoryEntryData_1 = require("./KalturaBulkUploadCategoryEntryData");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'categoryEntry' action 'addFromBulkUpload'.
 *
 *
 *
 * Server response type:         KalturaBulkUpload
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var CategoryEntryAddFromBulkUploadAction = /** @class */ (function (_super) {
    tslib_1.__extends(CategoryEntryAddFromBulkUploadAction, _super);
    function CategoryEntryAddFromBulkUploadAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBulkUpload', responseConstructor: KalturaBulkUpload_1.KalturaBulkUpload }) || this;
    }
    CategoryEntryAddFromBulkUploadAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'categoryentry' },
            action: { type: 'c', default: 'addFromBulkUpload' },
            bulkUploadData: { type: 'o', subTypeConstructor: KalturaBulkServiceData_1.KalturaBulkServiceData, subType: 'KalturaBulkServiceData' },
            bulkUploadCategoryEntryData: { type: 'o', subTypeConstructor: KalturaBulkUploadCategoryEntryData_1.KalturaBulkUploadCategoryEntryData, subType: 'KalturaBulkUploadCategoryEntryData' }
        });
        return result;
    };
    return CategoryEntryAddFromBulkUploadAction;
}(kaltura_request_1.KalturaRequest));
exports.CategoryEntryAddFromBulkUploadAction = CategoryEntryAddFromBulkUploadAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9DYXRlZ29yeUVudHJ5QWRkRnJvbUJ1bGtVcGxvYWRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHlEQUF3RDtBQUV4RCxtRUFBa0U7QUFDbEUsMkZBQTBGO0FBQzFGLHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUEwRCxnRUFBaUM7SUFLdkYsOENBQVksSUFBK0M7ZUFFdkQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUcscUNBQWlCLEVBQUcsQ0FBQztJQUN2SCxDQUFDO0lBRVMsMkRBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZUFBZSxFQUFFO1lBQy9ELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG1CQUFtQixFQUFFO1lBQ3RELGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsK0NBQXNCLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQ2hILDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx1RUFBa0MsRUFBRSxPQUFPLEVBQUcsb0NBQW9DLEVBQUU7U0FDNUksQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QnlELGdDQUFjLEdBd0J2RTtBQXhCWSxvRkFBb0MiLCJmaWxlIjoiYXBpL3R5cGVzL0NhdGVnb3J5RW50cnlBZGRGcm9tQnVsa1VwbG9hZEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQnVsa1VwbG9hZCB9IGZyb20gJy4vS2FsdHVyYUJ1bGtVcGxvYWQnO1xuXG5pbXBvcnQgeyBLYWx0dXJhQnVsa1NlcnZpY2VEYXRhIH0gZnJvbSAnLi9LYWx0dXJhQnVsa1NlcnZpY2VEYXRhJztcbmltcG9ydCB7IEthbHR1cmFCdWxrVXBsb2FkQ2F0ZWdvcnlFbnRyeURhdGEgfSBmcm9tICcuL0thbHR1cmFCdWxrVXBsb2FkQ2F0ZWdvcnlFbnRyeURhdGEnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcnlFbnRyeUFkZEZyb21CdWxrVXBsb2FkQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGJ1bGtVcGxvYWREYXRhIDogS2FsdHVyYUJ1bGtTZXJ2aWNlRGF0YTtcblx0YnVsa1VwbG9hZENhdGVnb3J5RW50cnlEYXRhPyA6IEthbHR1cmFCdWxrVXBsb2FkQ2F0ZWdvcnlFbnRyeURhdGE7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdjYXRlZ29yeUVudHJ5JyBhY3Rpb24gJ2FkZEZyb21CdWxrVXBsb2FkJy5cbiAqXG4gKiBcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQnVsa1VwbG9hZFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlFbnRyeUFkZEZyb21CdWxrVXBsb2FkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUJ1bGtVcGxvYWQ+IHtcblxuICAgIGJ1bGtVcGxvYWREYXRhIDogS2FsdHVyYUJ1bGtTZXJ2aWNlRGF0YTtcblx0YnVsa1VwbG9hZENhdGVnb3J5RW50cnlEYXRhIDogS2FsdHVyYUJ1bGtVcGxvYWRDYXRlZ29yeUVudHJ5RGF0YTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBDYXRlZ29yeUVudHJ5QWRkRnJvbUJ1bGtVcGxvYWRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFCdWxrVXBsb2FkJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFCdWxrVXBsb2FkICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdjYXRlZ29yeWVudHJ5JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYWRkRnJvbUJ1bGtVcGxvYWQnIH0sXG5cdFx0XHRcdGJ1bGtVcGxvYWREYXRhIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1NlcnZpY2VEYXRhLCBzdWJUeXBlIDogJ0thbHR1cmFCdWxrU2VydmljZURhdGEnIH0sXG5cdFx0XHRcdGJ1bGtVcGxvYWRDYXRlZ29yeUVudHJ5RGF0YSA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJ1bGtVcGxvYWRDYXRlZ29yeUVudHJ5RGF0YSwgc3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZENhdGVnb3J5RW50cnlEYXRhJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
