"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleEventResourceUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaScheduleEventResource_1 = require("./KalturaScheduleEventResource");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduleEventResource' action 'update'.
 *
 * Usage: Update an existing KalturaScheduleEventResource object
 *
 * Server response type:         KalturaScheduleEventResource
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduleEventResourceUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduleEventResourceUpdateAction, _super);
    function ScheduleEventResourceUpdateAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaScheduleEventResource', responseConstructor: KalturaScheduleEventResource_1.KalturaScheduleEventResource }) || this;
    }
    ScheduleEventResourceUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'schedule_scheduleeventresource' },
            action: { type: 'c', default: 'update' },
            scheduleEventId: { type: 'n' },
            scheduleResourceId: { type: 'n' },
            scheduleEventResource: { type: 'o', subTypeConstructor: KalturaScheduleEventResource_1.KalturaScheduleEventResource, subType: 'KalturaScheduleEventResource' }
        });
        return result;
    };
    return ScheduleEventResourceUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduleEventResourceUpdateAction = ScheduleEventResourceUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50UmVzb3VyY2VVcGRhdGVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLCtFQUE4RTtBQUU5RSxzREFBd0U7QUFReEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBdUQsNkRBQTRDO0lBTS9GLDJDQUFZLElBQTRDO2VBRXBELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLDhCQUE4QixFQUFFLG1CQUFtQixFQUFHLDJEQUE0QixFQUFHLENBQUM7SUFDN0ksQ0FBQztJQUVTLHdEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ2hGLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUMzQyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2hDLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQyxxQkFBcUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsMkRBQTRCLEVBQUUsT0FBTyxFQUFHLDhCQUE4QixFQUFFO1NBQzFILENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx3Q0FBQztBQUFELENBMUJBLEFBMEJDLENBMUJzRCxnQ0FBYyxHQTBCcEU7QUExQlksOEVBQWlDIiwiZmlsZSI6ImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50UmVzb3VyY2VVcGRhdGVBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVkdWxlRXZlbnRSZXNvdXJjZVVwZGF0ZUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBzY2hlZHVsZUV2ZW50SWQgOiBudW1iZXI7XG5cdHNjaGVkdWxlUmVzb3VyY2VJZCA6IG51bWJlcjtcblx0c2NoZWR1bGVFdmVudFJlc291cmNlIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZTtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3NjaGVkdWxlRXZlbnRSZXNvdXJjZScgYWN0aW9uICd1cGRhdGUnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgYW4gZXhpc3RpbmcgS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSBvYmplY3RcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhU2NoZWR1bGVFdmVudFJlc291cmNlXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZUV2ZW50UmVzb3VyY2VVcGRhdGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhU2NoZWR1bGVFdmVudFJlc291cmNlPiB7XG5cbiAgICBzY2hlZHVsZUV2ZW50SWQgOiBudW1iZXI7XG5cdHNjaGVkdWxlUmVzb3VyY2VJZCA6IG51bWJlcjtcblx0c2NoZWR1bGVFdmVudFJlc291cmNlIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTY2hlZHVsZUV2ZW50UmVzb3VyY2VVcGRhdGVBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZUV2ZW50UmVzb3VyY2UnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2NoZWR1bGVfc2NoZWR1bGVldmVudHJlc291cmNlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlJyB9LFxuXHRcdFx0XHRzY2hlZHVsZUV2ZW50SWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2NoZWR1bGVSZXNvdXJjZUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHNjaGVkdWxlRXZlbnRSZXNvdXJjZSA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSwgc3ViVHlwZSA6ICdLYWx0dXJhU2NoZWR1bGVFdmVudFJlc291cmNlJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
