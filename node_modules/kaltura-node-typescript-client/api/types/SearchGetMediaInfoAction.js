"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchGetMediaInfoAction = void 0;
var tslib_1 = require("tslib");
var KalturaSearchResult_1 = require("./KalturaSearchResult");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'search' action 'getMediaInfo'.
 *
 * Usage: Retrieve extra information about media found in search action
 * Some providers return only part of the fields needed to create entry from, use this action to get the rest of the fields
 *
 * Server response type:         KalturaSearchResult
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var SearchGetMediaInfoAction = /** @class */ (function (_super) {
    tslib_1.__extends(SearchGetMediaInfoAction, _super);
    function SearchGetMediaInfoAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaSearchResult', responseConstructor: KalturaSearchResult_1.KalturaSearchResult }) || this;
    }
    SearchGetMediaInfoAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'search' },
            action: { type: 'c', default: 'getMediaInfo' },
            searchResult: { type: 'o', subTypeConstructor: KalturaSearchResult_1.KalturaSearchResult, subType: 'KalturaSearchResult' }
        });
        return result;
    };
    return SearchGetMediaInfoAction;
}(kaltura_request_1.KalturaRequest));
exports.SearchGetMediaInfoAction = SearchGetMediaInfoAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TZWFyY2hHZXRNZWRpYUluZm9BY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCxzREFBd0U7QUFNeEU7Ozs7Ozs7Ozs7R0FVRztBQUNIO0lBQThDLG9EQUFtQztJQUk3RSxrQ0FBWSxJQUFtQztlQUUzQyxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxxQkFBcUIsRUFBRSxtQkFBbUIsRUFBRyx5Q0FBbUIsRUFBRyxDQUFDO0lBQzNILENBQUM7SUFFUywrQ0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDeEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsY0FBYyxFQUFFO1lBQ2pELFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1NBQy9GLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwrQkFBQztBQUFELENBdEJBLEFBc0JDLENBdEI2QyxnQ0FBYyxHQXNCM0Q7QUF0QlksNERBQXdCIiwiZmlsZSI6ImFwaS90eXBlcy9TZWFyY2hHZXRNZWRpYUluZm9BY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVNlYXJjaFJlc3VsdCB9IGZyb20gJy4vS2FsdHVyYVNlYXJjaFJlc3VsdCc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaEdldE1lZGlhSW5mb0FjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBzZWFyY2hSZXN1bHQgOiBLYWx0dXJhU2VhcmNoUmVzdWx0O1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2VhcmNoJyBhY3Rpb24gJ2dldE1lZGlhSW5mbycuXG4gKlxuICogVXNhZ2U6IFJldHJpZXZlIGV4dHJhIGluZm9ybWF0aW9uIGFib3V0IG1lZGlhIGZvdW5kIGluIHNlYXJjaCBhY3Rpb25cbiAqIFNvbWUgcHJvdmlkZXJzIHJldHVybiBvbmx5IHBhcnQgb2YgdGhlIGZpZWxkcyBuZWVkZWQgdG8gY3JlYXRlIGVudHJ5IGZyb20sIHVzZSB0aGlzIGFjdGlvbiB0byBnZXQgdGhlIHJlc3Qgb2YgdGhlIGZpZWxkc1xuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTZWFyY2hSZXN1bHRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFNlYXJjaEdldE1lZGlhSW5mb0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFTZWFyY2hSZXN1bHQ+IHtcblxuICAgIHNlYXJjaFJlc3VsdCA6IEthbHR1cmFTZWFyY2hSZXN1bHQ7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogU2VhcmNoR2V0TWVkaWFJbmZvQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhU2VhcmNoUmVzdWx0JywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFTZWFyY2hSZXN1bHQgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NlYXJjaCcgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2dldE1lZGlhSW5mbycgfSxcblx0XHRcdFx0c2VhcmNoUmVzdWx0IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU2VhcmNoUmVzdWx0LCBzdWJUeXBlIDogJ0thbHR1cmFTZWFyY2hSZXN1bHQnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
