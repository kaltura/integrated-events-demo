"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEventNotificationArrayParameter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaString_1 = require("./KalturaString");
var KalturaStringValue_1 = require("./KalturaStringValue");
var KalturaEventNotificationParameter_1 = require("./KalturaEventNotificationParameter");
var KalturaEventNotificationArrayParameter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEventNotificationArrayParameter, _super);
    function KalturaEventNotificationArrayParameter(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.values === 'undefined')
            _this.values = [];
        if (typeof _this.allowedValues === 'undefined')
            _this.allowedValues = [];
        return _this;
    }
    KalturaEventNotificationArrayParameter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEventNotificationArrayParameter' },
            values: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            allowedValues: { type: 'a', subTypeConstructor: KalturaStringValue_1.KalturaStringValue, subType: 'KalturaStringValue' }
        });
        return result;
    };
    return KalturaEventNotificationArrayParameter;
}(KalturaEventNotificationParameter_1.KalturaEventNotificationParameter));
exports.KalturaEventNotificationArrayParameter = KalturaEventNotificationArrayParameter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEventNotificationArrayParameter', KalturaEventNotificationArrayParameter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRXZlbnROb3RpZmljYXRpb25BcnJheVBhcmFtZXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELGlEQUFnRDtBQUNoRCwyREFBMEQ7QUFDMUQseUZBQStIO0FBUS9IO0lBQTRELGtFQUFpQztJQUt6RixnREFBWSxJQUFrRDtRQUE5RCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUdkO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxNQUFNLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQy9ELElBQUksT0FBTyxLQUFJLENBQUMsYUFBYSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQzs7SUFDckUsQ0FBQztJQUVTLDZEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdDQUF3QyxFQUFFO1lBQzNGLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkJBQWEsRUFBRSxPQUFPLEVBQUcsZUFBZSxFQUFFO1lBQ3RGLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsdUNBQWtCLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1NBQzlGLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2Q0FBQztBQUFELENBekJBLEFBeUJDLENBekIyRCxxRUFBaUMsR0F5QjVGO0FBekJZLHdGQUFzQztBQTJCbkQsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHdDQUF3QyxFQUFDLHNDQUFzQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFFdmVudE5vdGlmaWNhdGlvbkFycmF5UGFyYW1ldGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVN0cmluZyB9IGZyb20gJy4vS2FsdHVyYVN0cmluZyc7XG5pbXBvcnQgeyBLYWx0dXJhU3RyaW5nVmFsdWUgfSBmcm9tICcuL0thbHR1cmFTdHJpbmdWYWx1ZSc7XG5pbXBvcnQgeyBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25QYXJhbWV0ZXIsIEthbHR1cmFFdmVudE5vdGlmaWNhdGlvblBhcmFtZXRlckFyZ3MgfSBmcm9tICcuL0thbHR1cmFFdmVudE5vdGlmaWNhdGlvblBhcmFtZXRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uQXJyYXlQYXJhbWV0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFFdmVudE5vdGlmaWNhdGlvblBhcmFtZXRlckFyZ3Mge1xuICAgIHZhbHVlcz8gOiBLYWx0dXJhU3RyaW5nW107XG5cdGFsbG93ZWRWYWx1ZXM/IDogS2FsdHVyYVN0cmluZ1ZhbHVlW107XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFFdmVudE5vdGlmaWNhdGlvbkFycmF5UGFyYW1ldGVyIGV4dGVuZHMgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uUGFyYW1ldGVyIHtcblxuICAgIHZhbHVlcyA6IEthbHR1cmFTdHJpbmdbXTtcblx0YWxsb3dlZFZhbHVlcyA6IEthbHR1cmFTdHJpbmdWYWx1ZVtdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25BcnJheVBhcmFtZXRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMudmFsdWVzID0gW107XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmFsbG93ZWRWYWx1ZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmFsbG93ZWRWYWx1ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRXZlbnROb3RpZmljYXRpb25BcnJheVBhcmFtZXRlcicgfSxcblx0XHRcdFx0dmFsdWVzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RyaW5nLCBzdWJUeXBlIDogJ0thbHR1cmFTdHJpbmcnIH0sXG5cdFx0XHRcdGFsbG93ZWRWYWx1ZXMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTdHJpbmdWYWx1ZSwgc3ViVHlwZSA6ICdLYWx0dXJhU3RyaW5nVmFsdWUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhRXZlbnROb3RpZmljYXRpb25BcnJheVBhcmFtZXRlcicsS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uQXJyYXlQYXJhbWV0ZXIpO1xuIl19
