"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaHuluDistributionProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaString_1 = require("./KalturaString");
var KalturaDistributionProtocol_1 = require("./KalturaDistributionProtocol");
var KalturaConfigurableDistributionProfile_1 = require("./KalturaConfigurableDistributionProfile");
var KalturaHuluDistributionProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaHuluDistributionProfile, _super);
    function KalturaHuluDistributionProfile(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.seriesAdditionalCategories === 'undefined')
            _this.seriesAdditionalCategories = [];
        return _this;
    }
    KalturaHuluDistributionProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaHuluDistributionProfile' },
            sftpHost: { type: 's' },
            sftpLogin: { type: 's' },
            sftpPass: { type: 's' },
            seriesChannel: { type: 's' },
            seriesPrimaryCategory: { type: 's' },
            seriesAdditionalCategories: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            seasonNumber: { type: 's' },
            seasonSynopsis: { type: 's' },
            seasonTuneInInformation: { type: 's' },
            videoMediaType: { type: 's' },
            disableEpisodeNumberCustomValidation: { type: 'b' },
            protocol: { type: 'en', subTypeConstructor: KalturaDistributionProtocol_1.KalturaDistributionProtocol, subType: 'KalturaDistributionProtocol' },
            asperaHost: { type: 's' },
            asperaLogin: { type: 's' },
            asperaPass: { type: 's' },
            port: { type: 'n' },
            passphrase: { type: 's' },
            asperaPublicKey: { type: 's' },
            asperaPrivateKey: { type: 's' }
        });
        return result;
    };
    return KalturaHuluDistributionProfile;
}(KalturaConfigurableDistributionProfile_1.KalturaConfigurableDistributionProfile));
exports.KalturaHuluDistributionProfile = KalturaHuluDistributionProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaHuluDistributionProfile', KalturaHuluDistributionProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhSHVsdURpc3RyaWJ1dGlvblByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxpREFBZ0Q7QUFDaEQsNkVBQTRFO0FBQzVFLG1HQUE4STtBQXlCOUk7SUFBb0QsMERBQXNDO0lBc0J0Rix3Q0FBWSxJQUEwQztRQUF0RCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUVkO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQywwQkFBMEIsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLDBCQUEwQixHQUFHLEVBQUUsQ0FBQzs7SUFDckcsQ0FBQztJQUVTLHFEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ25GLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIscUJBQXFCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RDLDBCQUEwQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2QkFBYSxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDMUcsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLHVCQUF1QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QyxjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLG9DQUFvQyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyRCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlEQUEyQixFQUFFLE9BQU8sRUFBRyw2QkFBNkIsRUFBRTtZQUNySCxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDeEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHFDQUFDO0FBQUQsQ0ExREEsQUEwREMsQ0ExRG1ELCtFQUFzQyxHQTBEekY7QUExRFksd0VBQThCO0FBNEQzQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUMsOEJBQThCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUh1bHVEaXN0cmlidXRpb25Qcm9maWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVN0cmluZyB9IGZyb20gJy4vS2FsdHVyYVN0cmluZyc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wgfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25Qcm90b2NvbCc7XG5pbXBvcnQgeyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZSwgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvblByb2ZpbGVBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUh1bHVEaXN0cmlidXRpb25Qcm9maWxlQXJncyAgZXh0ZW5kcyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZUFyZ3Mge1xuICAgIHNmdHBIb3N0PyA6IHN0cmluZztcblx0c2Z0cExvZ2luPyA6IHN0cmluZztcblx0c2Z0cFBhc3M/IDogc3RyaW5nO1xuXHRzZXJpZXNDaGFubmVsPyA6IHN0cmluZztcblx0c2VyaWVzUHJpbWFyeUNhdGVnb3J5PyA6IHN0cmluZztcblx0c2VyaWVzQWRkaXRpb25hbENhdGVnb3JpZXM/IDogS2FsdHVyYVN0cmluZ1tdO1xuXHRzZWFzb25OdW1iZXI/IDogc3RyaW5nO1xuXHRzZWFzb25TeW5vcHNpcz8gOiBzdHJpbmc7XG5cdHNlYXNvblR1bmVJbkluZm9ybWF0aW9uPyA6IHN0cmluZztcblx0dmlkZW9NZWRpYVR5cGU/IDogc3RyaW5nO1xuXHRkaXNhYmxlRXBpc29kZU51bWJlckN1c3RvbVZhbGlkYXRpb24/IDogYm9vbGVhbjtcblx0cHJvdG9jb2w/IDogS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sO1xuXHRhc3BlcmFIb3N0PyA6IHN0cmluZztcblx0YXNwZXJhTG9naW4/IDogc3RyaW5nO1xuXHRhc3BlcmFQYXNzPyA6IHN0cmluZztcblx0cG9ydD8gOiBudW1iZXI7XG5cdHBhc3NwaHJhc2U/IDogc3RyaW5nO1xuXHRhc3BlcmFQdWJsaWNLZXk/IDogc3RyaW5nO1xuXHRhc3BlcmFQcml2YXRlS2V5PyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUh1bHVEaXN0cmlidXRpb25Qcm9maWxlIGV4dGVuZHMgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvblByb2ZpbGUge1xuXG4gICAgc2Z0cEhvc3QgOiBzdHJpbmc7XG5cdHNmdHBMb2dpbiA6IHN0cmluZztcblx0c2Z0cFBhc3MgOiBzdHJpbmc7XG5cdHNlcmllc0NoYW5uZWwgOiBzdHJpbmc7XG5cdHNlcmllc1ByaW1hcnlDYXRlZ29yeSA6IHN0cmluZztcblx0c2VyaWVzQWRkaXRpb25hbENhdGVnb3JpZXMgOiBLYWx0dXJhU3RyaW5nW107XG5cdHNlYXNvbk51bWJlciA6IHN0cmluZztcblx0c2Vhc29uU3lub3BzaXMgOiBzdHJpbmc7XG5cdHNlYXNvblR1bmVJbkluZm9ybWF0aW9uIDogc3RyaW5nO1xuXHR2aWRlb01lZGlhVHlwZSA6IHN0cmluZztcblx0ZGlzYWJsZUVwaXNvZGVOdW1iZXJDdXN0b21WYWxpZGF0aW9uIDogYm9vbGVhbjtcblx0cHJvdG9jb2wgOiBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2w7XG5cdGFzcGVyYUhvc3QgOiBzdHJpbmc7XG5cdGFzcGVyYUxvZ2luIDogc3RyaW5nO1xuXHRhc3BlcmFQYXNzIDogc3RyaW5nO1xuXHRwb3J0IDogbnVtYmVyO1xuXHRwYXNzcGhyYXNlIDogc3RyaW5nO1xuXHRhc3BlcmFQdWJsaWNLZXkgOiBzdHJpbmc7XG5cdGFzcGVyYVByaXZhdGVLZXkgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFIdWx1RGlzdHJpYnV0aW9uUHJvZmlsZUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlcmllc0FkZGl0aW9uYWxDYXRlZ29yaWVzID09PSAndW5kZWZpbmVkJykgdGhpcy5zZXJpZXNBZGRpdGlvbmFsQ2F0ZWdvcmllcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFIdWx1RGlzdHJpYnV0aW9uUHJvZmlsZScgfSxcblx0XHRcdFx0c2Z0cEhvc3QgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c2Z0cExvZ2luIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNmdHBQYXNzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNlcmllc0NoYW5uZWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c2VyaWVzUHJpbWFyeUNhdGVnb3J5IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNlcmllc0FkZGl0aW9uYWxDYXRlZ29yaWVzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RyaW5nLCBzdWJUeXBlIDogJ0thbHR1cmFTdHJpbmcnIH0sXG5cdFx0XHRcdHNlYXNvbk51bWJlciA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzZWFzb25TeW5vcHNpcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzZWFzb25UdW5lSW5JbmZvcm1hdGlvbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR2aWRlb01lZGlhVHlwZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkaXNhYmxlRXBpc29kZU51bWJlckN1c3RvbVZhbGlkYXRpb24gOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cHJvdG9jb2wgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wsIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sJyB9LFxuXHRcdFx0XHRhc3BlcmFIb3N0IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGFzcGVyYUxvZ2luIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGFzcGVyYVBhc3MgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cG9ydCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRwYXNzcGhyYXNlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGFzcGVyYVB1YmxpY0tleSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRhc3BlcmFQcml2YXRlS2V5IDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhSHVsdURpc3RyaWJ1dGlvblByb2ZpbGUnLEthbHR1cmFIdWx1RGlzdHJpYnV0aW9uUHJvZmlsZSk7XG4iXX0=
