"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsAddFromUploadedFileAction = void 0;
var tslib_1 = require("tslib");
var KalturaDocumentEntry_1 = require("./KalturaDocumentEntry");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'documents' action 'addFromUploadedFile'.
 *
 * Usage: Add new document entry after the specific document file was uploaded and the upload token id exists
 *
 * Server response type:         KalturaDocumentEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DocumentsAddFromUploadedFileAction = /** @class */ (function (_super) {
    tslib_1.__extends(DocumentsAddFromUploadedFileAction, _super);
    function DocumentsAddFromUploadedFileAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDocumentEntry', responseConstructor: KalturaDocumentEntry_1.KalturaDocumentEntry }) || this;
    }
    DocumentsAddFromUploadedFileAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'document_documents' },
            action: { type: 'c', default: 'addFromUploadedFile' },
            documentEntry: { type: 'o', subTypeConstructor: KalturaDocumentEntry_1.KalturaDocumentEntry, subType: 'KalturaDocumentEntry' },
            uploadTokenId: { type: 's' }
        });
        return result;
    };
    return DocumentsAddFromUploadedFileAction;
}(kaltura_request_1.KalturaRequest));
exports.DocumentsAddFromUploadedFileAction = DocumentsAddFromUploadedFileAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Eb2N1bWVudHNBZGRGcm9tVXBsb2FkZWRGaWxlQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwrREFBOEQ7QUFFOUQsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXdELDhEQUFvQztJQUt4Riw0Q0FBWSxJQUE2QztlQUVyRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxzQkFBc0IsRUFBRSxtQkFBbUIsRUFBRywyQ0FBb0IsRUFBRyxDQUFDO0lBQzdILENBQUM7SUFFUyx5REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtZQUNwRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUN4RCxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDJDQUFvQixFQUFFLE9BQU8sRUFBRyxzQkFBc0IsRUFBRTtZQUMzRyxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3JCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx5Q0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJ1RCxnQ0FBYyxHQXdCckU7QUF4QlksZ0ZBQWtDIiwiZmlsZSI6ImFwaS90eXBlcy9Eb2N1bWVudHNBZGRGcm9tVXBsb2FkZWRGaWxlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFEb2N1bWVudEVudHJ5IH0gZnJvbSAnLi9LYWx0dXJhRG9jdW1lbnRFbnRyeSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50c0FkZEZyb21VcGxvYWRlZEZpbGVBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZG9jdW1lbnRFbnRyeSA6IEthbHR1cmFEb2N1bWVudEVudHJ5O1xuXHR1cGxvYWRUb2tlbklkIDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnZG9jdW1lbnRzJyBhY3Rpb24gJ2FkZEZyb21VcGxvYWRlZEZpbGUnLlxuICpcbiAqIFVzYWdlOiBBZGQgbmV3IGRvY3VtZW50IGVudHJ5IGFmdGVyIHRoZSBzcGVjaWZpYyBkb2N1bWVudCBmaWxlIHdhcyB1cGxvYWRlZCBhbmQgdGhlIHVwbG9hZCB0b2tlbiBpZCBleGlzdHNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhRG9jdW1lbnRFbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRG9jdW1lbnRzQWRkRnJvbVVwbG9hZGVkRmlsZUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFEb2N1bWVudEVudHJ5PiB7XG5cbiAgICBkb2N1bWVudEVudHJ5IDogS2FsdHVyYURvY3VtZW50RW50cnk7XG5cdHVwbG9hZFRva2VuSWQgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogRG9jdW1lbnRzQWRkRnJvbVVwbG9hZGVkRmlsZUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYURvY3VtZW50RW50cnknLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYURvY3VtZW50RW50cnkgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2RvY3VtZW50X2RvY3VtZW50cycgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2FkZEZyb21VcGxvYWRlZEZpbGUnIH0sXG5cdFx0XHRcdGRvY3VtZW50RW50cnkgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEb2N1bWVudEVudHJ5LCBzdWJUeXBlIDogJ0thbHR1cmFEb2N1bWVudEVudHJ5JyB9LFxuXHRcdFx0XHR1cGxvYWRUb2tlbklkIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
