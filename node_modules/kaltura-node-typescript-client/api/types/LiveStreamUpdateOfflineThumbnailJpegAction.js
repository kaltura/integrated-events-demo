"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveStreamUpdateOfflineThumbnailJpegAction = void 0;
var tslib_1 = require("tslib");
var KalturaLiveStreamEntry_1 = require("./KalturaLiveStreamEntry");
var kaltura_upload_request_1 = require("../kaltura-upload-request");
/**
 * Build request payload for service 'liveStream' action 'updateOfflineThumbnailJpeg'.
 *
 * Usage: Update live stream entry thumbnail using a raw jpeg file
 *
 * Server response type:         KalturaLiveStreamEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaUploadRequest
 */
var LiveStreamUpdateOfflineThumbnailJpegAction = /** @class */ (function (_super) {
    tslib_1.__extends(LiveStreamUpdateOfflineThumbnailJpegAction, _super);
    function LiveStreamUpdateOfflineThumbnailJpegAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaLiveStreamEntry', responseConstructor: KalturaLiveStreamEntry_1.KalturaLiveStreamEntry }) || this;
    }
    LiveStreamUpdateOfflineThumbnailJpegAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'livestream' },
            action: { type: 'c', default: 'updateOfflineThumbnailJpeg' },
            entryId: { type: 's' },
            fileData: { type: 'f' }
        });
        return result;
    };
    return LiveStreamUpdateOfflineThumbnailJpegAction;
}(kaltura_upload_request_1.KalturaUploadRequest));
exports.LiveStreamUpdateOfflineThumbnailJpegAction = LiveStreamUpdateOfflineThumbnailJpegAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9MaXZlU3RyZWFtVXBkYXRlT2ZmbGluZVRodW1ibmFpbEpwZWdBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1FQUFrRTtBQUVsRSxvRUFBMkY7QUFPM0Y7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBZ0Usc0VBQTRDO0lBS3hHLG9EQUFZLElBQXFEO2VBRTdELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHdCQUF3QixFQUFFLG1CQUFtQixFQUFHLCtDQUFzQixFQUFHLENBQUM7SUFDakksQ0FBQztJQUVTLGlFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFlBQVksRUFBRTtZQUM1RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw0QkFBNEIsRUFBRTtZQUMvRCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDaEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGlEQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QitELDZDQUFvQixHQXdCbkY7QUF4QlksZ0dBQTBDIiwiZmlsZSI6ImFwaS90eXBlcy9MaXZlU3RyZWFtVXBkYXRlT2ZmbGluZVRodW1ibmFpbEpwZWdBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVTdHJlYW1FbnRyeSB9IGZyb20gJy4vS2FsdHVyYUxpdmVTdHJlYW1FbnRyeSc7XG5cbmltcG9ydCB7IEthbHR1cmFVcGxvYWRSZXF1ZXN0LCBLYWx0dXJhVXBsb2FkUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXVwbG9hZC1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBMaXZlU3RyZWFtVXBkYXRlT2ZmbGluZVRodW1ibmFpbEpwZWdBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFVcGxvYWRSZXF1ZXN0QXJncyB7XG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0ZmlsZURhdGEgOiBGaWxlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnbGl2ZVN0cmVhbScgYWN0aW9uICd1cGRhdGVPZmZsaW5lVGh1bWJuYWlsSnBlZycuXG4gKlxuICogVXNhZ2U6IFVwZGF0ZSBsaXZlIHN0cmVhbSBlbnRyeSB0aHVtYm5haWwgdXNpbmcgYSByYXcganBlZyBmaWxlXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUxpdmVTdHJlYW1FbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhVXBsb2FkUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgTGl2ZVN0cmVhbVVwZGF0ZU9mZmxpbmVUaHVtYm5haWxKcGVnQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVVwbG9hZFJlcXVlc3Q8S2FsdHVyYUxpdmVTdHJlYW1FbnRyeT4ge1xuXG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0ZmlsZURhdGEgOiBGaWxlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IExpdmVTdHJlYW1VcGRhdGVPZmZsaW5lVGh1bWJuYWlsSnBlZ0FjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUxpdmVTdHJlYW1FbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdsaXZlc3RyZWFtJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlT2ZmbGluZVRodW1ibmFpbEpwZWcnIH0sXG5cdFx0XHRcdGVudHJ5SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZmlsZURhdGEgOiB7IHR5cGUgOiAnZicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
