"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserLoginByLoginIdAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'user' action 'loginByLoginId'.
 *
 * Usage: Logs a user into a partner account with a user login ID and a user password
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var UserLoginByLoginIdAction = /** @class */ (function (_super) {
    tslib_1.__extends(UserLoginByLoginIdAction, _super);
    function UserLoginByLoginIdAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.expiry === 'undefined')
            _this.expiry = 86400;
        if (typeof _this.privileges === 'undefined')
            _this.privileges = "*";
        return _this;
    }
    UserLoginByLoginIdAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'user' },
            action: { type: 'c', default: 'loginByLoginId' },
            loginId: { type: 's' },
            password: { type: 's' },
            partnerId: { type: 'n' },
            expiry: { type: 'n' },
            privileges: { type: 's' },
            otp: { type: 's' }
        });
        return result;
    };
    return UserLoginByLoginIdAction;
}(kaltura_request_1.KalturaRequest));
exports.UserLoginByLoginIdAction = UserLoginByLoginIdAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Vc2VyTG9naW5CeUxvZ2luSWRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHNEQUF3RTtBQVd4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUE4QyxvREFBc0I7SUFTaEUsa0NBQVksSUFBbUM7UUFBL0MsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUMsU0FHdkY7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLE1BQU0sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbEUsSUFBSSxPQUFPLEtBQUksQ0FBQyxVQUFVLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDOztJQUNoRSxDQUFDO0lBRVMsK0NBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsTUFBTSxFQUFFO1lBQ3RELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdCQUFnQixFQUFFO1lBQ25ELE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixHQUFHLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ1gsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLCtCQUFDO0FBQUQsQ0FsQ0EsQUFrQ0MsQ0FsQzZDLGdDQUFjLEdBa0MzRDtBQWxDWSw0REFBd0IiLCJmaWxlIjoiYXBpL3R5cGVzL1VzZXJMb2dpbkJ5TG9naW5JZEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlckxvZ2luQnlMb2dpbklkQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGxvZ2luSWQgOiBzdHJpbmc7XG5cdHBhc3N3b3JkIDogc3RyaW5nO1xuXHRwYXJ0bmVySWQ/IDogbnVtYmVyO1xuXHRleHBpcnk/IDogbnVtYmVyO1xuXHRwcml2aWxlZ2VzPyA6IHN0cmluZztcblx0b3RwPyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3VzZXInIGFjdGlvbiAnbG9naW5CeUxvZ2luSWQnLlxuICpcbiAqIFVzYWdlOiBMb2dzIGEgdXNlciBpbnRvIGEgcGFydG5lciBhY2NvdW50IHdpdGggYSB1c2VyIGxvZ2luIElEIGFuZCBhIHVzZXIgcGFzc3dvcmRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJMb2dpbkJ5TG9naW5JZEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PHN0cmluZz4ge1xuXG4gICAgbG9naW5JZCA6IHN0cmluZztcblx0cGFzc3dvcmQgOiBzdHJpbmc7XG5cdHBhcnRuZXJJZCA6IG51bWJlcjtcblx0ZXhwaXJ5IDogbnVtYmVyO1xuXHRwcml2aWxlZ2VzIDogc3RyaW5nO1xuXHRvdHAgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogVXNlckxvZ2luQnlMb2dpbklkQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAncycsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmV4cGlyeSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuZXhwaXJ5ID0gODY0MDA7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLnByaXZpbGVnZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnByaXZpbGVnZXMgPSBcIipcIjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1c2VyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbG9naW5CeUxvZ2luSWQnIH0sXG5cdFx0XHRcdGxvZ2luSWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGV4cGlyeSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRwcml2aWxlZ2VzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG90cCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
