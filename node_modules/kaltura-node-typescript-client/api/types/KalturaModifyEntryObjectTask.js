"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaModifyEntryObjectTask = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaObjectTask_1 = require("./KalturaObjectTask");
var KalturaModifyEntryObjectTask = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaModifyEntryObjectTask, _super);
    function KalturaModifyEntryObjectTask(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.inputMetadata === 'undefined')
            _this.inputMetadata = [];
        if (typeof _this.outputMetadata === 'undefined')
            _this.outputMetadata = [];
        return _this;
    }
    KalturaModifyEntryObjectTask.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaModifyEntryObjectTask' },
            inputMetadataProfileId: { type: 'n' },
            inputMetadata: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            outputMetadataProfileId: { type: 'n' },
            outputMetadata: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            inputUserId: { type: 's' },
            inputEntitledUsersEdit: { type: 's' },
            inputEntitledUsersPublish: { type: 's' },
            inputEntitledUsersView: { type: 's' },
            resetMediaRepurposingProcess: { type: 'b' }
        });
        return result;
    };
    return KalturaModifyEntryObjectTask;
}(KalturaObjectTask_1.KalturaObjectTask));
exports.KalturaModifyEntryObjectTask = KalturaModifyEntryObjectTask;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaModifyEntryObjectTask', KalturaModifyEntryObjectTask);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QscURBQW9EO0FBQ3BELHlEQUErRTtBQWUvRTtJQUFrRCx3REFBaUI7SUFZL0Qsc0NBQVksSUFBd0M7UUFBcEQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FHZDtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsYUFBYSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUM3RSxJQUFJLE9BQU8sS0FBSSxDQUFDLGNBQWMsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7O0lBQ3ZFLENBQUM7SUFFUyxtREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUNqRixzQkFBc0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkMsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpQ0FBZSxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtZQUNqRyx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEMsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpQ0FBZSxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtZQUNsRyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLHNCQUFzQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2Qyx5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsc0JBQXNCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3ZDLDRCQUE0QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNwQyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsbUNBQUM7QUFBRCxDQXZDQSxBQXVDQyxDQXZDaUQscUNBQWlCLEdBdUNsRTtBQXZDWSxvRUFBNEI7QUF5Q3pDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyw4QkFBOEIsRUFBQyw0QkFBNEIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUtleVZhbHVlIH0gZnJvbSAnLi9LYWx0dXJhS2V5VmFsdWUnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdFRhc2ssIEthbHR1cmFPYmplY3RUYXNrQXJncyB9IGZyb20gJy4vS2FsdHVyYU9iamVjdFRhc2snO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFNb2RpZnlFbnRyeU9iamVjdFRhc2tBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RUYXNrQXJncyB7XG4gICAgaW5wdXRNZXRhZGF0YVByb2ZpbGVJZD8gOiBudW1iZXI7XG5cdGlucHV0TWV0YWRhdGE/IDogS2FsdHVyYUtleVZhbHVlW107XG5cdG91dHB1dE1ldGFkYXRhUHJvZmlsZUlkPyA6IG51bWJlcjtcblx0b3V0cHV0TWV0YWRhdGE/IDogS2FsdHVyYUtleVZhbHVlW107XG5cdGlucHV0VXNlcklkPyA6IHN0cmluZztcblx0aW5wdXRFbnRpdGxlZFVzZXJzRWRpdD8gOiBzdHJpbmc7XG5cdGlucHV0RW50aXRsZWRVc2Vyc1B1Ymxpc2g/IDogc3RyaW5nO1xuXHRpbnB1dEVudGl0bGVkVXNlcnNWaWV3PyA6IHN0cmluZztcblx0cmVzZXRNZWRpYVJlcHVycG9zaW5nUHJvY2Vzcz8gOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrIGV4dGVuZHMgS2FsdHVyYU9iamVjdFRhc2sge1xuXG4gICAgaW5wdXRNZXRhZGF0YVByb2ZpbGVJZCA6IG51bWJlcjtcblx0aW5wdXRNZXRhZGF0YSA6IEthbHR1cmFLZXlWYWx1ZVtdO1xuXHRvdXRwdXRNZXRhZGF0YVByb2ZpbGVJZCA6IG51bWJlcjtcblx0b3V0cHV0TWV0YWRhdGEgOiBLYWx0dXJhS2V5VmFsdWVbXTtcblx0aW5wdXRVc2VySWQgOiBzdHJpbmc7XG5cdGlucHV0RW50aXRsZWRVc2Vyc0VkaXQgOiBzdHJpbmc7XG5cdGlucHV0RW50aXRsZWRVc2Vyc1B1Ymxpc2ggOiBzdHJpbmc7XG5cdGlucHV0RW50aXRsZWRVc2Vyc1ZpZXcgOiBzdHJpbmc7XG5cdHJlc2V0TWVkaWFSZXB1cnBvc2luZ1Byb2Nlc3MgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuaW5wdXRNZXRhZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuaW5wdXRNZXRhZGF0YSA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5vdXRwdXRNZXRhZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMub3V0cHV0TWV0YWRhdGEgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrJyB9LFxuXHRcdFx0XHRpbnB1dE1ldGFkYXRhUHJvZmlsZUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGlucHV0TWV0YWRhdGEgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFLZXlWYWx1ZSwgc3ViVHlwZSA6ICdLYWx0dXJhS2V5VmFsdWUnIH0sXG5cdFx0XHRcdG91dHB1dE1ldGFkYXRhUHJvZmlsZUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdG91dHB1dE1ldGFkYXRhIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhS2V5VmFsdWUsIHN1YlR5cGUgOiAnS2FsdHVyYUtleVZhbHVlJyB9LFxuXHRcdFx0XHRpbnB1dFVzZXJJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRpbnB1dEVudGl0bGVkVXNlcnNFZGl0IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlucHV0RW50aXRsZWRVc2Vyc1B1Ymxpc2ggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aW5wdXRFbnRpdGxlZFVzZXJzVmlldyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXNldE1lZGlhUmVwdXJwb3NpbmdQcm9jZXNzIDogeyB0eXBlIDogJ2InIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrJyxLYWx0dXJhTW9kaWZ5RW50cnlPYmplY3RUYXNrKTtcbiJdfQ==
