"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaUserBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaUserType_1 = require("./KalturaUserType");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaBaseUserFilter_1 = require("./KalturaBaseUserFilter");
var KalturaUserBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaUserBaseFilter, _super);
    function KalturaUserBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaUserBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaUserBaseFilter' },
            idEqual: { type: 's' },
            idIn: { type: 's' },
            typeEqual: { type: 'en', subTypeConstructor: KalturaUserType_1.KalturaUserType, subType: 'KalturaUserType' },
            typeIn: { type: 's' },
            isAdminEqual: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            firstNameStartsWith: { type: 's' },
            lastNameStartsWith: { type: 's' }
        });
        return result;
    };
    return KalturaUserBaseFilter;
}(KalturaBaseUserFilter_1.KalturaBaseUserFilter));
exports.KalturaUserBaseFilter = KalturaUserBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaUserBaseFilter', KalturaUserBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVXNlckJhc2VGaWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxxREFBb0Q7QUFDcEQsbUVBQWtFO0FBQ2xFLGlFQUEyRjtBQWEzRjtJQUEyQyxpREFBcUI7SUFVNUQsK0JBQVksSUFBaUM7ZUFFekMsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLDRDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQzFFLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQzlGLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkIsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDL0csbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3BDLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUMxQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQWpDQSxBQWlDQyxDQWpDMEMsNkNBQXFCLEdBaUMvRDtBQWpDWSxzREFBcUI7QUFtQ2xDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBQyxxQkFBcUIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhVXNlckJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhVXNlclR5cGUgfSBmcm9tICcuL0thbHR1cmFVc2VyVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhTnVsbGFibGVCb29sZWFuIH0gZnJvbSAnLi9LYWx0dXJhTnVsbGFibGVCb29sZWFuJztcbmltcG9ydCB7IEthbHR1cmFCYXNlVXNlckZpbHRlciwgS2FsdHVyYUJhc2VVc2VyRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYUJhc2VVc2VyRmlsdGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhVXNlckJhc2VGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFCYXNlVXNlckZpbHRlckFyZ3Mge1xuICAgIGlkRXF1YWw/IDogc3RyaW5nO1xuXHRpZEluPyA6IHN0cmluZztcblx0dHlwZUVxdWFsPyA6IEthbHR1cmFVc2VyVHlwZTtcblx0dHlwZUluPyA6IHN0cmluZztcblx0aXNBZG1pbkVxdWFsPyA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW47XG5cdGZpcnN0TmFtZVN0YXJ0c1dpdGg/IDogc3RyaW5nO1xuXHRsYXN0TmFtZVN0YXJ0c1dpdGg/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhVXNlckJhc2VGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhQmFzZVVzZXJGaWx0ZXIge1xuXG4gICAgaWRFcXVhbCA6IHN0cmluZztcblx0aWRJbiA6IHN0cmluZztcblx0dHlwZUVxdWFsIDogS2FsdHVyYVVzZXJUeXBlO1xuXHR0eXBlSW4gOiBzdHJpbmc7XG5cdGlzQWRtaW5FcXVhbCA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW47XG5cdGZpcnN0TmFtZVN0YXJ0c1dpdGggOiBzdHJpbmc7XG5cdGxhc3ROYW1lU3RhcnRzV2l0aCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYVVzZXJCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFVc2VyQmFzZUZpbHRlcicgfSxcblx0XHRcdFx0aWRFcXVhbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRpZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHR5cGVFcXVhbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVc2VyVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhVXNlclR5cGUnIH0sXG5cdFx0XHRcdHR5cGVJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRpc0FkbWluRXF1YWwgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuLCBzdWJUeXBlIDogJ0thbHR1cmFOdWxsYWJsZUJvb2xlYW4nIH0sXG5cdFx0XHRcdGZpcnN0TmFtZVN0YXJ0c1dpdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bGFzdE5hbWVTdGFydHNXaXRoIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhVXNlckJhc2VGaWx0ZXInLEthbHR1cmFVc2VyQmFzZUZpbHRlcik7XG4iXX0=
