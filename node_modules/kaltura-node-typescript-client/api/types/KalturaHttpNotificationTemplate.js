"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaHttpNotificationTemplate = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaHttpNotificationMethod_1 = require("./KalturaHttpNotificationMethod");
var KalturaHttpNotificationData_1 = require("./KalturaHttpNotificationData");
var KalturaHttpNotificationAuthenticationMethod_1 = require("./KalturaHttpNotificationAuthenticationMethod");
var KalturaHttpNotificationSslVersion_1 = require("./KalturaHttpNotificationSslVersion");
var KalturaHttpNotificationCertificateType_1 = require("./KalturaHttpNotificationCertificateType");
var KalturaHttpNotificationSslKeyType_1 = require("./KalturaHttpNotificationSslKeyType");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaSecureHashingAlgo_1 = require("./KalturaSecureHashingAlgo");
var KalturaEventNotificationTemplate_1 = require("./KalturaEventNotificationTemplate");
var KalturaHttpNotificationTemplate = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaHttpNotificationTemplate, _super);
    function KalturaHttpNotificationTemplate(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.customHeaders === 'undefined')
            _this.customHeaders = [];
        return _this;
    }
    KalturaHttpNotificationTemplate.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaHttpNotificationTemplate' },
            url: { type: 's' },
            method: { type: 'en', subTypeConstructor: KalturaHttpNotificationMethod_1.KalturaHttpNotificationMethod, subType: 'KalturaHttpNotificationMethod' },
            data: { type: 'o', subTypeConstructor: KalturaHttpNotificationData_1.KalturaHttpNotificationData, subType: 'KalturaHttpNotificationData' },
            timeout: { type: 'n' },
            connectTimeout: { type: 'n' },
            username: { type: 's' },
            password: { type: 's' },
            authenticationMethod: { type: 'en', subTypeConstructor: KalturaHttpNotificationAuthenticationMethod_1.KalturaHttpNotificationAuthenticationMethod, subType: 'KalturaHttpNotificationAuthenticationMethod' },
            sslVersion: { type: 'en', subTypeConstructor: KalturaHttpNotificationSslVersion_1.KalturaHttpNotificationSslVersion, subType: 'KalturaHttpNotificationSslVersion' },
            sslCertificate: { type: 's' },
            sslCertificateType: { type: 'es', subTypeConstructor: KalturaHttpNotificationCertificateType_1.KalturaHttpNotificationCertificateType, subType: 'KalturaHttpNotificationCertificateType' },
            sslCertificatePassword: { type: 's' },
            sslEngine: { type: 's' },
            sslEngineDefault: { type: 's' },
            sslKeyType: { type: 'es', subTypeConstructor: KalturaHttpNotificationSslKeyType_1.KalturaHttpNotificationSslKeyType, subType: 'KalturaHttpNotificationSslKeyType' },
            sslKey: { type: 's' },
            sslKeyPassword: { type: 's' },
            customHeaders: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            secureHashingAlgo: { type: 'en', subTypeConstructor: KalturaSecureHashingAlgo_1.KalturaSecureHashingAlgo, subType: 'KalturaSecureHashingAlgo' }
        });
        return result;
    };
    return KalturaHttpNotificationTemplate;
}(KalturaEventNotificationTemplate_1.KalturaEventNotificationTemplate));
exports.KalturaHttpNotificationTemplate = KalturaHttpNotificationTemplate;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaHttpNotificationTemplate', KalturaHttpNotificationTemplate);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
