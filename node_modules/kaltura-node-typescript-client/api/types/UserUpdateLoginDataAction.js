"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserUpdateLoginDataAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'user' action 'updateLoginData'.
 *
 * Usage: Updates a user's login data: email, password, name
 *
 * Server response type:         void
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var UserUpdateLoginDataAction = /** @class */ (function (_super) {
    tslib_1.__extends(UserUpdateLoginDataAction, _super);
    function UserUpdateLoginDataAction(data) {
        return _super.call(this, data, { responseType: 'v', responseSubType: '', responseConstructor: null }) || this;
    }
    UserUpdateLoginDataAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'user' },
            action: { type: 'c', default: 'updateLoginData' },
            oldLoginId: { type: 's' },
            password: { type: 's' },
            newLoginId: { type: 's' },
            newPassword: { type: 's' },
            newFirstName: { type: 's' },
            newLastName: { type: 's' },
            otp: { type: 's' }
        });
        return result;
    };
    return UserUpdateLoginDataAction;
}(kaltura_request_1.KalturaRequest));
exports.UserUpdateLoginDataAction = UserUpdateLoginDataAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Vc2VyVXBkYXRlTG9naW5EYXRhQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxzREFBd0U7QUFZeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBK0MscURBQW9CO0lBVS9ELG1DQUFZLElBQW9DO2VBRTVDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQztJQUN4RixDQUFDO0lBRVMsZ0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsTUFBTSxFQUFFO1lBQ3RELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ3BELFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLEdBQUcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDWCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQWxDQSxBQWtDQyxDQWxDOEMsZ0NBQWMsR0FrQzVEO0FBbENZLDhEQUF5QiIsImZpbGUiOiJhcGkvdHlwZXMvVXNlclVwZGF0ZUxvZ2luRGF0YUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclVwZGF0ZUxvZ2luRGF0YUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBvbGRMb2dpbklkIDogc3RyaW5nO1xuXHRwYXNzd29yZCA6IHN0cmluZztcblx0bmV3TG9naW5JZD8gOiBzdHJpbmc7XG5cdG5ld1Bhc3N3b3JkPyA6IHN0cmluZztcblx0bmV3Rmlyc3ROYW1lPyA6IHN0cmluZztcblx0bmV3TGFzdE5hbWU/IDogc3RyaW5nO1xuXHRvdHA/IDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAndXNlcicgYWN0aW9uICd1cGRhdGVMb2dpbkRhdGEnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGVzIGEgdXNlcidzIGxvZ2luIGRhdGE6IGVtYWlsLCBwYXNzd29yZCwgbmFtZVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIHZvaWRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJVcGRhdGVMb2dpbkRhdGFBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDx2b2lkPiB7XG5cbiAgICBvbGRMb2dpbklkIDogc3RyaW5nO1xuXHRwYXNzd29yZCA6IHN0cmluZztcblx0bmV3TG9naW5JZCA6IHN0cmluZztcblx0bmV3UGFzc3dvcmQgOiBzdHJpbmc7XG5cdG5ld0ZpcnN0TmFtZSA6IHN0cmluZztcblx0bmV3TGFzdE5hbWUgOiBzdHJpbmc7XG5cdG90cCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBVc2VyVXBkYXRlTG9naW5EYXRhQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAndicsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1c2VyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlTG9naW5EYXRhJyB9LFxuXHRcdFx0XHRvbGRMb2dpbklkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhc3N3b3JkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG5ld0xvZ2luSWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bmV3UGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bmV3Rmlyc3ROYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG5ld0xhc3ROYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG90cCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
