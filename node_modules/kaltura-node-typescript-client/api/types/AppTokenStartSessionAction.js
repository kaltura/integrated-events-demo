"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppTokenStartSessionAction = void 0;
var tslib_1 = require("tslib");
var KalturaSessionInfo_1 = require("./KalturaSessionInfo");
var KalturaSessionType_1 = require("./KalturaSessionType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'appToken' action 'startSession'.
 *
 * Usage: Starts a new KS (kaltura Session) based on an application authentication token ID
 *
 * Server response type:         KalturaSessionInfo
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var AppTokenStartSessionAction = /** @class */ (function (_super) {
    tslib_1.__extends(AppTokenStartSessionAction, _super);
    function AppTokenStartSessionAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaSessionInfo', responseConstructor: KalturaSessionInfo_1.KalturaSessionInfo }) || this;
    }
    AppTokenStartSessionAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'apptoken' },
            action: { type: 'c', default: 'startSession' },
            id: { type: 's' },
            tokenHash: { type: 's' },
            userId: { type: 's' },
            type: { type: 'en', subTypeConstructor: KalturaSessionType_1.KalturaSessionType, subType: 'KalturaSessionType' },
            expiry: { type: 'n' },
            sessionPrivileges: { type: 's' }
        });
        return result;
    };
    return AppTokenStartSessionAction;
}(kaltura_request_1.KalturaRequest));
exports.AppTokenStartSessionAction = AppTokenStartSessionAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9BcHBUb2tlblN0YXJ0U2Vzc2lvbkFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELDJEQUEwRDtBQUMxRCxzREFBd0U7QUFXeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBZ0Qsc0RBQWtDO0lBUzlFLG9DQUFZLElBQXFDO2VBRTdDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG9CQUFvQixFQUFFLG1CQUFtQixFQUFHLHVDQUFrQixFQUFHLENBQUM7SUFDekgsQ0FBQztJQUVTLGlEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFVBQVUsRUFBRTtZQUMxRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7WUFDakQsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1Q0FBa0IsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDL0YsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDekIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGlDQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsQ0FoQytDLGdDQUFjLEdBZ0M3RDtBQWhDWSxnRUFBMEIiLCJmaWxlIjoiYXBpL3R5cGVzL0FwcFRva2VuU3RhcnRTZXNzaW9uQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFTZXNzaW9uSW5mbyB9IGZyb20gJy4vS2FsdHVyYVNlc3Npb25JbmZvJztcblxuaW1wb3J0IHsgS2FsdHVyYVNlc3Npb25UeXBlIH0gZnJvbSAnLi9LYWx0dXJhU2Vzc2lvblR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwVG9rZW5TdGFydFNlc3Npb25BY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgaWQgOiBzdHJpbmc7XG5cdHRva2VuSGFzaCA6IHN0cmluZztcblx0dXNlcklkPyA6IHN0cmluZztcblx0dHlwZT8gOiBLYWx0dXJhU2Vzc2lvblR5cGU7XG5cdGV4cGlyeT8gOiBudW1iZXI7XG5cdHNlc3Npb25Qcml2aWxlZ2VzPyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2FwcFRva2VuJyBhY3Rpb24gJ3N0YXJ0U2Vzc2lvbicuXG4gKlxuICogVXNhZ2U6IFN0YXJ0cyBhIG5ldyBLUyAoa2FsdHVyYSBTZXNzaW9uKSBiYXNlZCBvbiBhbiBhcHBsaWNhdGlvbiBhdXRoZW50aWNhdGlvbiB0b2tlbiBJRFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTZXNzaW9uSW5mb1xuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQXBwVG9rZW5TdGFydFNlc3Npb25BY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhU2Vzc2lvbkluZm8+IHtcblxuICAgIGlkIDogc3RyaW5nO1xuXHR0b2tlbkhhc2ggOiBzdHJpbmc7XG5cdHVzZXJJZCA6IHN0cmluZztcblx0dHlwZSA6IEthbHR1cmFTZXNzaW9uVHlwZTtcblx0ZXhwaXJ5IDogbnVtYmVyO1xuXHRzZXNzaW9uUHJpdmlsZWdlcyA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBBcHBUb2tlblN0YXJ0U2Vzc2lvbkFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVNlc3Npb25JbmZvJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFTZXNzaW9uSW5mbyAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYXBwdG9rZW4nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzdGFydFNlc3Npb24nIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHRva2VuSGFzaCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1c2VySWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dHlwZSA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTZXNzaW9uVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhU2Vzc2lvblR5cGUnIH0sXG5cdFx0XHRcdGV4cGlyeSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzZXNzaW9uUHJpdmlsZWdlcyA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
