"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryVendorTaskGetJobsAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryVendorTaskListResponse_1 = require("./KalturaEntryVendorTaskListResponse");
var KalturaEntryVendorTaskFilter_1 = require("./KalturaEntryVendorTaskFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'entryVendorTask' action 'getJobs'.
 *
 * Usage: get KalturaEntryVendorTask objects for specific vendor partner
 *
 * Server response type:         KalturaEntryVendorTaskListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EntryVendorTaskGetJobsAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryVendorTaskGetJobsAction, _super);
    function EntryVendorTaskGetJobsAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEntryVendorTaskListResponse', responseConstructor: KalturaEntryVendorTaskListResponse_1.KalturaEntryVendorTaskListResponse }) || this;
    }
    EntryVendorTaskGetJobsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'reach_entryvendortask' },
            action: { type: 'c', default: 'getJobs' },
            filter: { type: 'o', subTypeConstructor: KalturaEntryVendorTaskFilter_1.KalturaEntryVendorTaskFilter, subType: 'KalturaEntryVendorTaskFilter' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' }
        });
        return result;
    };
    return EntryVendorTaskGetJobsAction;
}(kaltura_request_1.KalturaRequest));
exports.EntryVendorTaskGetJobsAction = EntryVendorTaskGetJobsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeVZlbmRvclRhc2tHZXRKb2JzQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwyRkFBMEY7QUFFMUYsK0VBQThFO0FBQzlFLDJEQUEwRDtBQUMxRCxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBa0Qsd0RBQWtEO0lBS2hHLHNDQUFZLElBQXdDO2VBRWhELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG9DQUFvQyxFQUFFLG1CQUFtQixFQUFHLHVFQUFrQyxFQUFHLENBQUM7SUFDekosQ0FBQztJQUVTLG1EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3ZFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFNBQVMsRUFBRTtZQUM1QyxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDJEQUE0QixFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUNwSCxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtTQUN0RixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsbUNBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCaUQsZ0NBQWMsR0F3Qi9EO0FBeEJZLG9FQUE0QiIsImZpbGUiOiJhcGkvdHlwZXMvRW50cnlWZW5kb3JUYXNrR2V0Sm9ic0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhRW50cnlWZW5kb3JUYXNrTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi9LYWx0dXJhRW50cnlWZW5kb3JUYXNrTGlzdFJlc3BvbnNlJztcblxuaW1wb3J0IHsgS2FsdHVyYUVudHJ5VmVuZG9yVGFza0ZpbHRlciB9IGZyb20gJy4vS2FsdHVyYUVudHJ5VmVuZG9yVGFza0ZpbHRlcic7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyUGFnZXIgfSBmcm9tICcuL0thbHR1cmFGaWx0ZXJQYWdlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFbnRyeVZlbmRvclRhc2tHZXRKb2JzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGZpbHRlcj8gOiBLYWx0dXJhRW50cnlWZW5kb3JUYXNrRmlsdGVyO1xuXHRwYWdlcj8gOiBLYWx0dXJhRmlsdGVyUGFnZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdlbnRyeVZlbmRvclRhc2snIGFjdGlvbiAnZ2V0Sm9icycuXG4gKlxuICogVXNhZ2U6IGdldCBLYWx0dXJhRW50cnlWZW5kb3JUYXNrIG9iamVjdHMgZm9yIHNwZWNpZmljIHZlbmRvciBwYXJ0bmVyXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUVudHJ5VmVuZG9yVGFza0xpc3RSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRW50cnlWZW5kb3JUYXNrR2V0Sm9ic0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFFbnRyeVZlbmRvclRhc2tMaXN0UmVzcG9uc2U+IHtcblxuICAgIGZpbHRlciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2tGaWx0ZXI7XG5cdHBhZ2VyIDogS2FsdHVyYUZpbHRlclBhZ2VyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBFbnRyeVZlbmRvclRhc2tHZXRKb2JzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhRW50cnlWZW5kb3JUYXNrTGlzdFJlc3BvbnNlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2tMaXN0UmVzcG9uc2UgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3JlYWNoX2VudHJ5dmVuZG9ydGFzaycgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2dldEpvYnMnIH0sXG5cdFx0XHRcdGZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFza0ZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhRW50cnlWZW5kb3JUYXNrRmlsdGVyJyB9LFxuXHRcdFx0XHRwYWdlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUZpbHRlclBhZ2VyLCBzdWJUeXBlIDogJ0thbHR1cmFGaWx0ZXJQYWdlcicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
