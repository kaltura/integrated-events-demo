"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaClipAttributes = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEffect_1 = require("./KalturaEffect");
var KalturaCaptionAttributes_1 = require("./KalturaCaptionAttributes");
var KalturaOperationAttributes_1 = require("./KalturaOperationAttributes");
var KalturaClipAttributes = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaClipAttributes, _super);
    function KalturaClipAttributes(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.effectArray === 'undefined')
            _this.effectArray = [];
        if (typeof _this.captionAttributes === 'undefined')
            _this.captionAttributes = [];
        return _this;
    }
    KalturaClipAttributes.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaClipAttributes' },
            offset: { type: 'n' },
            duration: { type: 'n' },
            globalOffsetInDestination: { type: 'n' },
            effectArray: { type: 'a', subTypeConstructor: KalturaEffect_1.KalturaEffect, subType: 'KalturaEffect' },
            cropAlignment: { type: 'n' },
            captionAttributes: { type: 'a', subTypeConstructor: KalturaCaptionAttributes_1.KalturaCaptionAttributes, subType: 'KalturaCaptionAttributes' }
        });
        return result;
    };
    return KalturaClipAttributes;
}(KalturaOperationAttributes_1.KalturaOperationAttributes));
exports.KalturaClipAttributes = KalturaClipAttributes;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaClipAttributes', KalturaClipAttributes);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ2xpcEF0dHJpYnV0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxpREFBZ0Q7QUFDaEQsdUVBQXNFO0FBQ3RFLDJFQUEwRztBQVkxRztJQUEyQyxpREFBMEI7SUFTakUsK0JBQVksSUFBaUM7UUFBN0MsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FHZDtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsV0FBVyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN6RSxJQUFJLE9BQU8sS0FBSSxDQUFDLGlCQUFpQixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDOztJQUM3RSxDQUFDO0lBRVMsNENBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDMUUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLHlCQUF5QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZCQUFhLEVBQUUsT0FBTyxFQUFHLGVBQWUsRUFBRTtZQUMzRixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlCLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxtREFBd0IsRUFBRSxPQUFPLEVBQUcsMEJBQTBCLEVBQUU7U0FDOUcsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FqQ0EsQUFpQ0MsQ0FqQzBDLHVEQUEwQixHQWlDcEU7QUFqQ1ksc0RBQXFCO0FBbUNsQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsdUJBQXVCLEVBQUMscUJBQXFCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUNsaXBBdHRyaWJ1dGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUVmZmVjdCB9IGZyb20gJy4vS2FsdHVyYUVmZmVjdCc7XG5pbXBvcnQgeyBLYWx0dXJhQ2FwdGlvbkF0dHJpYnV0ZXMgfSBmcm9tICcuL0thbHR1cmFDYXB0aW9uQXR0cmlidXRlcyc7XG5pbXBvcnQgeyBLYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlcywgS2FsdHVyYU9wZXJhdGlvbkF0dHJpYnV0ZXNBcmdzIH0gZnJvbSAnLi9LYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUNsaXBBdHRyaWJ1dGVzQXJncyAgZXh0ZW5kcyBLYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlc0FyZ3Mge1xuICAgIG9mZnNldD8gOiBudW1iZXI7XG5cdGR1cmF0aW9uPyA6IG51bWJlcjtcblx0Z2xvYmFsT2Zmc2V0SW5EZXN0aW5hdGlvbj8gOiBudW1iZXI7XG5cdGVmZmVjdEFycmF5PyA6IEthbHR1cmFFZmZlY3RbXTtcblx0Y3JvcEFsaWdubWVudD8gOiBudW1iZXI7XG5cdGNhcHRpb25BdHRyaWJ1dGVzPyA6IEthbHR1cmFDYXB0aW9uQXR0cmlidXRlc1tdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ2xpcEF0dHJpYnV0ZXMgZXh0ZW5kcyBLYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlcyB7XG5cbiAgICBvZmZzZXQgOiBudW1iZXI7XG5cdGR1cmF0aW9uIDogbnVtYmVyO1xuXHRnbG9iYWxPZmZzZXRJbkRlc3RpbmF0aW9uIDogbnVtYmVyO1xuXHRlZmZlY3RBcnJheSA6IEthbHR1cmFFZmZlY3RbXTtcblx0Y3JvcEFsaWdubWVudCA6IG51bWJlcjtcblx0Y2FwdGlvbkF0dHJpYnV0ZXMgOiBLYWx0dXJhQ2FwdGlvbkF0dHJpYnV0ZXNbXTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUNsaXBBdHRyaWJ1dGVzQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZWZmZWN0QXJyYXkgPT09ICd1bmRlZmluZWQnKSB0aGlzLmVmZmVjdEFycmF5ID0gW107XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmNhcHRpb25BdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJykgdGhpcy5jYXB0aW9uQXR0cmlidXRlcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFDbGlwQXR0cmlidXRlcycgfSxcblx0XHRcdFx0b2Zmc2V0IDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGR1cmF0aW9uIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGdsb2JhbE9mZnNldEluRGVzdGluYXRpb24gOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZWZmZWN0QXJyYXkgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFZmZlY3QsIHN1YlR5cGUgOiAnS2FsdHVyYUVmZmVjdCcgfSxcblx0XHRcdFx0Y3JvcEFsaWdubWVudCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjYXB0aW9uQXR0cmlidXRlcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNhcHRpb25BdHRyaWJ1dGVzLCBzdWJUeXBlIDogJ0thbHR1cmFDYXB0aW9uQXR0cmlidXRlcycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFDbGlwQXR0cmlidXRlcycsS2FsdHVyYUNsaXBBdHRyaWJ1dGVzKTtcbiJdfQ==
