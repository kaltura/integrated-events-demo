"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayReadyDrmGetLicenseDetailsAction = void 0;
var tslib_1 = require("tslib");
var KalturaPlayReadyLicenseDetails_1 = require("./KalturaPlayReadyLicenseDetails");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playReadyDrm' action 'getLicenseDetails'.
 *
 * Usage: Get Play Ready policy and dates for license creation
 *
 * Server response type:         KalturaPlayReadyLicenseDetails
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlayReadyDrmGetLicenseDetailsAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlayReadyDrmGetLicenseDetailsAction, _super);
    function PlayReadyDrmGetLicenseDetailsAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPlayReadyLicenseDetails', responseConstructor: KalturaPlayReadyLicenseDetails_1.KalturaPlayReadyLicenseDetails }) || this;
    }
    PlayReadyDrmGetLicenseDetailsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playready_playreadydrm' },
            action: { type: 'c', default: 'getLicenseDetails' },
            keyId: { type: 's' },
            deviceId: { type: 's' },
            deviceType: { type: 'n' },
            entryId: { type: 's' },
            referrer: { type: 's' }
        });
        return result;
    };
    return PlayReadyDrmGetLicenseDetailsAction;
}(kaltura_request_1.KalturaRequest));
exports.PlayReadyDrmGetLicenseDetailsAction = PlayReadyDrmGetLicenseDetailsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5UmVhZHlEcm1HZXRMaWNlbnNlRGV0YWlsc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsbUZBQWtGO0FBRWxGLHNEQUF3RTtBQVV4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUF5RCwrREFBOEM7SUFRbkcsNkNBQVksSUFBOEM7ZUFFdEQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsZ0NBQWdDLEVBQUUsbUJBQW1CLEVBQUcsK0RBQThCLEVBQUcsQ0FBQztJQUNqSixDQUFDO0lBRVMsMERBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDeEUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7WUFDdEQsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2hCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQ0FBQztBQUFELENBOUJBLEFBOEJDLENBOUJ3RCxnQ0FBYyxHQThCdEU7QUE5Qlksa0ZBQW1DIiwiZmlsZSI6ImFwaS90eXBlcy9QbGF5UmVhZHlEcm1HZXRMaWNlbnNlRGV0YWlsc0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUGxheVJlYWR5TGljZW5zZURldGFpbHMgfSBmcm9tICcuL0thbHR1cmFQbGF5UmVhZHlMaWNlbnNlRGV0YWlscyc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXlSZWFkeURybUdldExpY2Vuc2VEZXRhaWxzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGtleUlkIDogc3RyaW5nO1xuXHRkZXZpY2VJZCA6IHN0cmluZztcblx0ZGV2aWNlVHlwZSA6IG51bWJlcjtcblx0ZW50cnlJZD8gOiBzdHJpbmc7XG5cdHJlZmVycmVyPyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3BsYXlSZWFkeURybScgYWN0aW9uICdnZXRMaWNlbnNlRGV0YWlscycuXG4gKlxuICogVXNhZ2U6IEdldCBQbGF5IFJlYWR5IHBvbGljeSBhbmQgZGF0ZXMgZm9yIGxpY2Vuc2UgY3JlYXRpb25cbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhUGxheVJlYWR5TGljZW5zZURldGFpbHNcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXlSZWFkeURybUdldExpY2Vuc2VEZXRhaWxzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVBsYXlSZWFkeUxpY2Vuc2VEZXRhaWxzPiB7XG5cbiAgICBrZXlJZCA6IHN0cmluZztcblx0ZGV2aWNlSWQgOiBzdHJpbmc7XG5cdGRldmljZVR5cGUgOiBudW1iZXI7XG5cdGVudHJ5SWQgOiBzdHJpbmc7XG5cdHJlZmVycmVyIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBsYXlSZWFkeURybUdldExpY2Vuc2VEZXRhaWxzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhUGxheVJlYWR5TGljZW5zZURldGFpbHMnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBsYXlSZWFkeUxpY2Vuc2VEZXRhaWxzICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdwbGF5cmVhZHlfcGxheXJlYWR5ZHJtJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0TGljZW5zZURldGFpbHMnIH0sXG5cdFx0XHRcdGtleUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGRldmljZUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGRldmljZVR5cGUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZWZlcnJlciA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
