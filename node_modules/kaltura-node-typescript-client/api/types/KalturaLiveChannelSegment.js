"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaLiveChannelSegment = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaLiveChannelSegmentType_1 = require("./KalturaLiveChannelSegmentType");
var KalturaLiveChannelSegmentStatus_1 = require("./KalturaLiveChannelSegmentStatus");
var KalturaLiveChannelSegmentTriggerType_1 = require("./KalturaLiveChannelSegmentTriggerType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaLiveChannelSegment = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaLiveChannelSegment, _super);
    function KalturaLiveChannelSegment(data) {
        return _super.call(this, data) || this;
    }
    KalturaLiveChannelSegment.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaLiveChannelSegment' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            name: { type: 's' },
            description: { type: 's' },
            tags: { type: 's' },
            type: { type: 'es', subTypeConstructor: KalturaLiveChannelSegmentType_1.KalturaLiveChannelSegmentType, subType: 'KalturaLiveChannelSegmentType' },
            status: { type: 'es', readOnly: true, subTypeConstructor: KalturaLiveChannelSegmentStatus_1.KalturaLiveChannelSegmentStatus, subType: 'KalturaLiveChannelSegmentStatus' },
            channelId: { type: 's' },
            entryId: { type: 's' },
            triggerType: { type: 'es', subTypeConstructor: KalturaLiveChannelSegmentTriggerType_1.KalturaLiveChannelSegmentTriggerType, subType: 'KalturaLiveChannelSegmentTriggerType' },
            triggerSegmentId: { type: 'n' },
            startTime: { type: 'n' },
            duration: { type: 'n' }
        });
        return result;
    };
    return KalturaLiveChannelSegment;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaLiveChannelSegment = KalturaLiveChannelSegment;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaLiveChannelSegment', KalturaLiveChannelSegment);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsaUZBQWdGO0FBQ2hGLHFGQUFvRjtBQUNwRiwrRkFBOEY7QUFDOUYsOERBQWtGO0FBZ0JsRjtJQUErQyxxREFBaUI7SUFrQjVELG1DQUFZLElBQXFDO2VBRTdDLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyxnREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUM5RSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2REFBNkIsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7WUFDckgsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlFQUErQixFQUFFLE9BQU8sRUFBRyxpQ0FBaUMsRUFBRTtZQUM1SSxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyRUFBb0MsRUFBRSxPQUFPLEVBQUcsc0NBQXNDLEVBQUU7WUFDMUksZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNoQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsZ0NBQUM7QUFBRCxDQWpEQSxBQWlEQyxDQWpEOEMsdUNBQWlCLEdBaUQvRDtBQWpEWSw4REFBeUI7QUFtRHRDLDJDQUFtQixDQUFDLFlBQVksQ0FBQywyQkFBMkIsRUFBQyx5QkFBeUIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVDaGFubmVsU2VnbWVudFR5cGUgfSBmcm9tICcuL0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVDaGFubmVsU2VnbWVudFRyaWdnZXJUeXBlIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50VHJpZ2dlclR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgbmFtZT8gOiBzdHJpbmc7XG5cdGRlc2NyaXB0aW9uPyA6IHN0cmluZztcblx0dGFncz8gOiBzdHJpbmc7XG5cdHR5cGU/IDogS2FsdHVyYUxpdmVDaGFubmVsU2VnbWVudFR5cGU7XG5cdGNoYW5uZWxJZD8gOiBzdHJpbmc7XG5cdGVudHJ5SWQ/IDogc3RyaW5nO1xuXHR0cmlnZ2VyVHlwZT8gOiBLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50VHJpZ2dlclR5cGU7XG5cdHRyaWdnZXJTZWdtZW50SWQ/IDogbnVtYmVyO1xuXHRzdGFydFRpbWU/IDogbnVtYmVyO1xuXHRkdXJhdGlvbj8gOiBudW1iZXI7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnQgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICByZWFkb25seSBpZCA6IG51bWJlcjtcblx0cmVhZG9ubHkgcGFydG5lcklkIDogbnVtYmVyO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSB1cGRhdGVkQXQgOiBEYXRlO1xuXHRuYW1lIDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbiA6IHN0cmluZztcblx0dGFncyA6IHN0cmluZztcblx0dHlwZSA6IEthbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRUeXBlO1xuXHRyZWFkb25seSBzdGF0dXMgOiBLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50U3RhdHVzO1xuXHRjaGFubmVsSWQgOiBzdHJpbmc7XG5cdGVudHJ5SWQgOiBzdHJpbmc7XG5cdHRyaWdnZXJUeXBlIDogS2FsdHVyYUxpdmVDaGFubmVsU2VnbWVudFRyaWdnZXJUeXBlO1xuXHR0cmlnZ2VyU2VnbWVudElkIDogbnVtYmVyO1xuXHRzdGFydFRpbWUgOiBudW1iZXI7XG5cdGR1cmF0aW9uIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50QXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnQnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkZXNjcmlwdGlvbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0YWdzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50VHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50VHlwZScgfSxcblx0XHRcdFx0c3RhdHVzIDogeyB0eXBlIDogJ2VzJywgcmVhZE9ubHkgOiB0cnVlLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZUNoYW5uZWxTZWdtZW50U3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRTdGF0dXMnIH0sXG5cdFx0XHRcdGNoYW5uZWxJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHRyaWdnZXJUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUxpdmVDaGFubmVsU2VnbWVudFRyaWdnZXJUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnRUcmlnZ2VyVHlwZScgfSxcblx0XHRcdFx0dHJpZ2dlclNlZ21lbnRJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzdGFydFRpbWUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZHVyYXRpb24gOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnQnLEthbHR1cmFMaXZlQ2hhbm5lbFNlZ21lbnQpO1xuIl19
