"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerNodeGetFullPathAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'serverNode' action 'getFullPath'.
 *
 * Usage: Get the edge server node full path
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ServerNodeGetFullPathAction = /** @class */ (function (_super) {
    tslib_1.__extends(ServerNodeGetFullPathAction, _super);
    function ServerNodeGetFullPathAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.protocol === 'undefined')
            _this.protocol = "http";
        return _this;
    }
    ServerNodeGetFullPathAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'servernode' },
            action: { type: 'c', default: 'getFullPath' },
            hostName: { type: 's' },
            protocol: { type: 's' },
            deliveryFormat: { type: 's' },
            deliveryType: { type: 's' }
        });
        return result;
    };
    return ServerNodeGetFullPathAction;
}(kaltura_request_1.KalturaRequest));
exports.ServerNodeGetFullPathAction = ServerNodeGetFullPathAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TZXJ2ZXJOb2RlR2V0RnVsbFBhdGhBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHNEQUF3RTtBQVN4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFpRCx1REFBc0I7SUFPbkUscUNBQVksSUFBc0M7UUFBbEQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUMsU0FFdkY7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLFFBQVEsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7O0lBQ3JFLENBQUM7SUFFUyxrREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxZQUFZLEVBQUU7WUFDNUQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFO1lBQ2hELFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDcEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0E3QkEsQUE2QkMsQ0E3QmdELGdDQUFjLEdBNkI5RDtBQTdCWSxrRUFBMkIiLCJmaWxlIjoiYXBpL3R5cGVzL1NlcnZlck5vZGVHZXRGdWxsUGF0aEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VydmVyTm9kZUdldEZ1bGxQYXRoQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGhvc3ROYW1lIDogc3RyaW5nO1xuXHRwcm90b2NvbD8gOiBzdHJpbmc7XG5cdGRlbGl2ZXJ5Rm9ybWF0PyA6IHN0cmluZztcblx0ZGVsaXZlcnlUeXBlPyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3NlcnZlck5vZGUnIGFjdGlvbiAnZ2V0RnVsbFBhdGgnLlxuICpcbiAqIFVzYWdlOiBHZXQgdGhlIGVkZ2Ugc2VydmVyIG5vZGUgZnVsbCBwYXRoXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgc3RyaW5nXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2ZXJOb2RlR2V0RnVsbFBhdGhBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxzdHJpbmc+IHtcblxuICAgIGhvc3ROYW1lIDogc3RyaW5nO1xuXHRwcm90b2NvbCA6IHN0cmluZztcblx0ZGVsaXZlcnlGb3JtYXQgOiBzdHJpbmc7XG5cdGRlbGl2ZXJ5VHlwZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTZXJ2ZXJOb2RlR2V0RnVsbFBhdGhBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdzJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucHJvdG9jb2wgPT09ICd1bmRlZmluZWQnKSB0aGlzLnByb3RvY29sID0gXCJodHRwXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VydmVybm9kZScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2dldEZ1bGxQYXRoJyB9LFxuXHRcdFx0XHRob3N0TmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwcm90b2NvbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkZWxpdmVyeUZvcm1hdCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkZWxpdmVyeVR5cGUgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
