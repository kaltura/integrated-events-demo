"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAmazonS3StorageExportJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAmazonS3StorageProfileFilesPermissionLevel_1 = require("./KalturaAmazonS3StorageProfileFilesPermissionLevel");
var KalturaStorageExportJobData_1 = require("./KalturaStorageExportJobData");
var KalturaAmazonS3StorageExportJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAmazonS3StorageExportJobData, _super);
    function KalturaAmazonS3StorageExportJobData(data) {
        return _super.call(this, data) || this;
    }
    KalturaAmazonS3StorageExportJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAmazonS3StorageExportJobData' },
            filesPermissionInS3: { type: 'es', subTypeConstructor: KalturaAmazonS3StorageProfileFilesPermissionLevel_1.KalturaAmazonS3StorageProfileFilesPermissionLevel, subType: 'KalturaAmazonS3StorageProfileFilesPermissionLevel' },
            s3Region: { type: 's' },
            sseType: { type: 's' },
            sseKmsKeyId: { type: 's' },
            signatureType: { type: 's' },
            endPoint: { type: 's' },
            storageClass: { type: 's' }
        });
        return result;
    };
    return KalturaAmazonS3StorageExportJobData;
}(KalturaStorageExportJobData_1.KalturaStorageExportJobData));
exports.KalturaAmazonS3StorageExportJobData = KalturaAmazonS3StorageExportJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAmazonS3StorageExportJobData', KalturaAmazonS3StorageExportJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQW1hem9uUzNTdG9yYWdlRXhwb3J0Sm9iRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHlIQUF3SDtBQUN4SCw2RUFBNkc7QUFhN0c7SUFBeUQsK0RBQTJCO0lBVWhGLDZDQUFZLElBQStDO2VBRXZELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUywwREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxxQ0FBcUMsRUFBRTtZQUN4RixtQkFBbUIsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscUdBQWlELEVBQUUsT0FBTyxFQUFHLG1EQUFtRCxFQUFFO1lBQzVLLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3BCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQ0FBQztBQUFELENBakNBLEFBaUNDLENBakN3RCx5REFBMkIsR0FpQ25GO0FBakNZLGtGQUFtQztBQW1DaEQsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHFDQUFxQyxFQUFDLG1DQUFtQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFBbWF6b25TM1N0b3JhZ2VFeHBvcnRKb2JEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUFtYXpvblMzU3RvcmFnZVByb2ZpbGVGaWxlc1Blcm1pc3Npb25MZXZlbCB9IGZyb20gJy4vS2FsdHVyYUFtYXpvblMzU3RvcmFnZVByb2ZpbGVGaWxlc1Blcm1pc3Npb25MZXZlbCc7XG5pbXBvcnQgeyBLYWx0dXJhU3RvcmFnZUV4cG9ydEpvYkRhdGEsIEthbHR1cmFTdG9yYWdlRXhwb3J0Sm9iRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFTdG9yYWdlRXhwb3J0Sm9iRGF0YSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUFtYXpvblMzU3RvcmFnZUV4cG9ydEpvYkRhdGFBcmdzICBleHRlbmRzIEthbHR1cmFTdG9yYWdlRXhwb3J0Sm9iRGF0YUFyZ3Mge1xuICAgIGZpbGVzUGVybWlzc2lvbkluUzM/IDogS2FsdHVyYUFtYXpvblMzU3RvcmFnZVByb2ZpbGVGaWxlc1Blcm1pc3Npb25MZXZlbDtcblx0czNSZWdpb24/IDogc3RyaW5nO1xuXHRzc2VUeXBlPyA6IHN0cmluZztcblx0c3NlS21zS2V5SWQ/IDogc3RyaW5nO1xuXHRzaWduYXR1cmVUeXBlPyA6IHN0cmluZztcblx0ZW5kUG9pbnQ/IDogc3RyaW5nO1xuXHRzdG9yYWdlQ2xhc3M/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQW1hem9uUzNTdG9yYWdlRXhwb3J0Sm9iRGF0YSBleHRlbmRzIEthbHR1cmFTdG9yYWdlRXhwb3J0Sm9iRGF0YSB7XG5cbiAgICBmaWxlc1Blcm1pc3Npb25JblMzIDogS2FsdHVyYUFtYXpvblMzU3RvcmFnZVByb2ZpbGVGaWxlc1Blcm1pc3Npb25MZXZlbDtcblx0czNSZWdpb24gOiBzdHJpbmc7XG5cdHNzZVR5cGUgOiBzdHJpbmc7XG5cdHNzZUttc0tleUlkIDogc3RyaW5nO1xuXHRzaWduYXR1cmVUeXBlIDogc3RyaW5nO1xuXHRlbmRQb2ludCA6IHN0cmluZztcblx0c3RvcmFnZUNsYXNzIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQW1hem9uUzNTdG9yYWdlRXhwb3J0Sm9iRGF0YUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQW1hem9uUzNTdG9yYWdlRXhwb3J0Sm9iRGF0YScgfSxcblx0XHRcdFx0ZmlsZXNQZXJtaXNzaW9uSW5TMyA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFBbWF6b25TM1N0b3JhZ2VQcm9maWxlRmlsZXNQZXJtaXNzaW9uTGV2ZWwsIHN1YlR5cGUgOiAnS2FsdHVyYUFtYXpvblMzU3RvcmFnZVByb2ZpbGVGaWxlc1Blcm1pc3Npb25MZXZlbCcgfSxcblx0XHRcdFx0czNSZWdpb24gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3NlVHlwZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzc2VLbXNLZXlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzaWduYXR1cmVUeXBlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGVuZFBvaW50IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN0b3JhZ2VDbGFzcyA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUFtYXpvblMzU3RvcmFnZUV4cG9ydEpvYkRhdGEnLEthbHR1cmFBbWF6b25TM1N0b3JhZ2VFeHBvcnRKb2JEYXRhKTtcbiJdfQ==
