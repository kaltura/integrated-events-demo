"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartnerRegisterAction = void 0;
var tslib_1 = require("tslib");
var KalturaPartner_1 = require("./KalturaPartner");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'partner' action 'register'.
 *
 * Usage: Create a new Partner object
 *
 * Server response type:         KalturaPartner
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PartnerRegisterAction = /** @class */ (function (_super) {
    tslib_1.__extends(PartnerRegisterAction, _super);
    function PartnerRegisterAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPartner', responseConstructor: KalturaPartner_1.KalturaPartner }) || this;
        if (typeof _this.silent === 'undefined')
            _this.silent = false;
        return _this;
    }
    PartnerRegisterAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'partner' },
            action: { type: 'c', default: 'register' },
            partner: { type: 'o', subTypeConstructor: KalturaPartner_1.KalturaPartner, subType: 'KalturaPartner' },
            cmsPassword: { type: 's' },
            templatePartnerId: { type: 'n' },
            silent: { type: 'b' }
        });
        return result;
    };
    return PartnerRegisterAction;
}(kaltura_request_1.KalturaRequest));
exports.PartnerRegisterAction = PartnerRegisterAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QYXJ0bmVyUmVnaXN0ZXJBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1EQUFrRDtBQUVsRCxzREFBd0U7QUFTeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMkMsaURBQThCO0lBT3JFLCtCQUFZLElBQWdDO1FBQTVDLFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsZ0JBQWdCLEVBQUUsbUJBQW1CLEVBQUcsK0JBQWMsRUFBRyxDQUFDLFNBRWhIO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxNQUFNLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDOztJQUNoRSxDQUFDO0lBRVMsNENBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsU0FBUyxFQUFFO1lBQ3pELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFVBQVUsRUFBRTtZQUM3QyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLCtCQUFjLEVBQUUsT0FBTyxFQUFHLGdCQUFnQixFQUFFO1lBQ3pGLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2xDLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDZCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQTdCQSxBQTZCQyxDQTdCMEMsZ0NBQWMsR0E2QnhEO0FBN0JZLHNEQUFxQiIsImZpbGUiOiJhcGkvdHlwZXMvUGFydG5lclJlZ2lzdGVyQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFQYXJ0bmVyIH0gZnJvbSAnLi9LYWx0dXJhUGFydG5lcic7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRuZXJSZWdpc3RlckFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBwYXJ0bmVyIDogS2FsdHVyYVBhcnRuZXI7XG5cdGNtc1Bhc3N3b3JkPyA6IHN0cmluZztcblx0dGVtcGxhdGVQYXJ0bmVySWQ/IDogbnVtYmVyO1xuXHRzaWxlbnQ/IDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3BhcnRuZXInIGFjdGlvbiAncmVnaXN0ZXInLlxuICpcbiAqIFVzYWdlOiBDcmVhdGUgYSBuZXcgUGFydG5lciBvYmplY3RcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhUGFydG5lclxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUGFydG5lclJlZ2lzdGVyQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVBhcnRuZXI+IHtcblxuICAgIHBhcnRuZXIgOiBLYWx0dXJhUGFydG5lcjtcblx0Y21zUGFzc3dvcmQgOiBzdHJpbmc7XG5cdHRlbXBsYXRlUGFydG5lcklkIDogbnVtYmVyO1xuXHRzaWxlbnQgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBhcnRuZXJSZWdpc3RlckFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVBhcnRuZXInLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBhcnRuZXIgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2lsZW50ID09PSAndW5kZWZpbmVkJykgdGhpcy5zaWxlbnQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdwYXJ0bmVyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVnaXN0ZXInIH0sXG5cdFx0XHRcdHBhcnRuZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFQYXJ0bmVyLCBzdWJUeXBlIDogJ0thbHR1cmFQYXJ0bmVyJyB9LFxuXHRcdFx0XHRjbXNQYXNzd29yZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0ZW1wbGF0ZVBhcnRuZXJJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzaWxlbnQgOiB7IHR5cGUgOiAnYicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
