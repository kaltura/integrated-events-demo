"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaProvisionJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaJobData_1 = require("./KalturaJobData");
var KalturaProvisionJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaProvisionJobData, _super);
    function KalturaProvisionJobData(data) {
        return _super.call(this, data) || this;
    }
    KalturaProvisionJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaProvisionJobData' },
            streamID: { type: 's' },
            backupStreamID: { type: 's' },
            rtmp: { type: 's' },
            encoderIP: { type: 's' },
            backupEncoderIP: { type: 's' },
            encoderPassword: { type: 's' },
            encoderUsername: { type: 's' },
            endDate: { type: 'n' },
            returnVal: { type: 's' },
            mediaType: { type: 'n' },
            primaryBroadcastingUrl: { type: 's' },
            secondaryBroadcastingUrl: { type: 's' },
            streamName: { type: 's' }
        });
        return result;
    };
    return KalturaProvisionJobData;
}(KalturaJobData_1.KalturaJobData));
exports.KalturaProvisionJobData = KalturaProvisionJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaProvisionJobData', KalturaProvisionJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUHJvdmlzaW9uSm9iRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1EQUFzRTtBQW1CdEU7SUFBNkMsbURBQWM7SUFnQnZELGlDQUFZLElBQW1DO2VBRTNDLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyw4Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx5QkFBeUIsRUFBRTtZQUM1RSxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2hDLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLHNCQUFzQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNsQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsOEJBQUM7QUFBRCxDQTdDQSxBQTZDQyxDQTdDNEMsK0JBQWMsR0E2QzFEO0FBN0NZLDBEQUF1QjtBQStDcEMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHlCQUF5QixFQUFDLHVCQUF1QixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFQcm92aXNpb25Kb2JEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUpvYkRhdGEsIEthbHR1cmFKb2JEYXRhQXJncyB9IGZyb20gJy4vS2FsdHVyYUpvYkRhdGEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFQcm92aXNpb25Kb2JEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhSm9iRGF0YUFyZ3Mge1xuICAgIHN0cmVhbUlEPyA6IHN0cmluZztcblx0YmFja3VwU3RyZWFtSUQ/IDogc3RyaW5nO1xuXHRydG1wPyA6IHN0cmluZztcblx0ZW5jb2RlcklQPyA6IHN0cmluZztcblx0YmFja3VwRW5jb2RlcklQPyA6IHN0cmluZztcblx0ZW5jb2RlclBhc3N3b3JkPyA6IHN0cmluZztcblx0ZW5jb2RlclVzZXJuYW1lPyA6IHN0cmluZztcblx0ZW5kRGF0ZT8gOiBudW1iZXI7XG5cdHJldHVyblZhbD8gOiBzdHJpbmc7XG5cdG1lZGlhVHlwZT8gOiBudW1iZXI7XG5cdHByaW1hcnlCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRzZWNvbmRhcnlCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRzdHJlYW1OYW1lPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVByb3Zpc2lvbkpvYkRhdGEgZXh0ZW5kcyBLYWx0dXJhSm9iRGF0YSB7XG5cbiAgICBzdHJlYW1JRCA6IHN0cmluZztcblx0YmFja3VwU3RyZWFtSUQgOiBzdHJpbmc7XG5cdHJ0bXAgOiBzdHJpbmc7XG5cdGVuY29kZXJJUCA6IHN0cmluZztcblx0YmFja3VwRW5jb2RlcklQIDogc3RyaW5nO1xuXHRlbmNvZGVyUGFzc3dvcmQgOiBzdHJpbmc7XG5cdGVuY29kZXJVc2VybmFtZSA6IHN0cmluZztcblx0ZW5kRGF0ZSA6IG51bWJlcjtcblx0cmV0dXJuVmFsIDogc3RyaW5nO1xuXHRtZWRpYVR5cGUgOiBudW1iZXI7XG5cdHByaW1hcnlCcm9hZGNhc3RpbmdVcmwgOiBzdHJpbmc7XG5cdHNlY29uZGFyeUJyb2FkY2FzdGluZ1VybCA6IHN0cmluZztcblx0c3RyZWFtTmFtZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYVByb3Zpc2lvbkpvYkRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVByb3Zpc2lvbkpvYkRhdGEnIH0sXG5cdFx0XHRcdHN0cmVhbUlEIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGJhY2t1cFN0cmVhbUlEIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJ0bXAgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZW5jb2RlcklQIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGJhY2t1cEVuY29kZXJJUCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbmNvZGVyUGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZW5jb2RlclVzZXJuYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGVuZERhdGUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cmV0dXJuVmFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG1lZGlhVHlwZSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRwcmltYXJ5QnJvYWRjYXN0aW5nVXJsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNlY29uZGFyeUJyb2FkY2FzdGluZ1VybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdHJlYW1OYW1lIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhUHJvdmlzaW9uSm9iRGF0YScsS2FsdHVyYVByb3Zpc2lvbkpvYkRhdGEpO1xuIl19
