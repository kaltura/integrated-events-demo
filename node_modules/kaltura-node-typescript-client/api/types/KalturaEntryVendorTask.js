"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEntryVendorTask = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEntryVendorTaskStatus_1 = require("./KalturaEntryVendorTaskStatus");
var KalturaEntryVendorTaskCreationMode_1 = require("./KalturaEntryVendorTaskCreationMode");
var KalturaVendorTaskData_1 = require("./KalturaVendorTaskData");
var KalturaVendorServiceType_1 = require("./KalturaVendorServiceType");
var KalturaVendorServiceFeature_1 = require("./KalturaVendorServiceFeature");
var KalturaVendorServiceTurnAroundTime_1 = require("./KalturaVendorServiceTurnAroundTime");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaEntryVendorTask = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEntryVendorTask, _super);
    function KalturaEntryVendorTask(data) {
        return _super.call(this, data) || this;
    }
    KalturaEntryVendorTask.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEntryVendorTask' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            vendorPartnerId: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            queueTime: { type: 'd', readOnly: true },
            finishTime: { type: 'd', readOnly: true },
            entryId: { type: 's' },
            status: { type: 'en', subTypeConstructor: KalturaEntryVendorTaskStatus_1.KalturaEntryVendorTaskStatus, subType: 'KalturaEntryVendorTaskStatus' },
            reachProfileId: { type: 'n' },
            catalogItemId: { type: 'n' },
            price: { type: 'n', readOnly: true },
            userId: { type: 's', readOnly: true },
            moderatingUser: { type: 's', readOnly: true },
            errDescription: { type: 's' },
            accessKey: { type: 's', readOnly: true },
            version: { type: 's', readOnly: true },
            notes: { type: 's' },
            dictionary: { type: 's', readOnly: true },
            context: { type: 's' },
            accuracy: { type: 'n' },
            outputObjectId: { type: 's' },
            partnerData: { type: 's' },
            creationMode: { type: 'en', readOnly: true, subTypeConstructor: KalturaEntryVendorTaskCreationMode_1.KalturaEntryVendorTaskCreationMode, subType: 'KalturaEntryVendorTaskCreationMode' },
            taskJobData: { type: 'o', subTypeConstructor: KalturaVendorTaskData_1.KalturaVendorTaskData, subType: 'KalturaVendorTaskData' },
            expectedFinishTime: { type: 'd', readOnly: true },
            serviceType: { type: 'en', readOnly: true, subTypeConstructor: KalturaVendorServiceType_1.KalturaVendorServiceType, subType: 'KalturaVendorServiceType' },
            serviceFeature: { type: 'en', readOnly: true, subTypeConstructor: KalturaVendorServiceFeature_1.KalturaVendorServiceFeature, subType: 'KalturaVendorServiceFeature' },
            turnAroundTime: { type: 'en', readOnly: true, subTypeConstructor: KalturaVendorServiceTurnAroundTime_1.KalturaVendorServiceTurnAroundTime, subType: 'KalturaVendorServiceTurnAroundTime' },
            externalTaskId: { type: 's' }
        });
        return result;
    };
    return KalturaEntryVendorTask;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaEntryVendorTask = KalturaEntryVendorTask;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEntryVendorTask', KalturaEntryVendorTask);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
