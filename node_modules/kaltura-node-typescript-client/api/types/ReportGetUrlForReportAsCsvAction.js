"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGetUrlForReportAsCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaReportType_1 = require("./KalturaReportType");
var KalturaReportInputFilter_1 = require("./KalturaReportInputFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var KalturaReportResponseOptions_1 = require("./KalturaReportResponseOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'report' action 'getUrlForReportAsCsv'.
 *
 * Usage: will create a CSV file for the given report and return the URL to access it
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ReportGetUrlForReportAsCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(ReportGetUrlForReportAsCsvAction, _super);
    function ReportGetUrlForReportAsCsvAction(data) {
        return _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
    }
    ReportGetUrlForReportAsCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'report' },
            action: { type: 'c', default: 'getUrlForReportAsCsv' },
            reportTitle: { type: 's' },
            reportText: { type: 's' },
            headers: { type: 's' },
            reportType: { type: 'es', subTypeConstructor: KalturaReportType_1.KalturaReportType, subType: 'KalturaReportType' },
            reportInputFilter: { type: 'o', subTypeConstructor: KalturaReportInputFilter_1.KalturaReportInputFilter, subType: 'KalturaReportInputFilter' },
            dimension: { type: 's' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' },
            order: { type: 's' },
            objectIds: { type: 's' },
            responseOptions: { type: 'o', subTypeConstructor: KalturaReportResponseOptions_1.KalturaReportResponseOptions, subType: 'KalturaReportResponseOptions' }
        });
        return result;
    };
    return ReportGetUrlForReportAsCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.ReportGetUrlForReportAsCsvAction = ReportGetUrlForReportAsCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9SZXBvcnRHZXRVcmxGb3JSZXBvcnRBc0NzdkFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEseURBQXdEO0FBQ3hELHVFQUFzRTtBQUN0RSwyREFBMEQ7QUFDMUQsK0VBQThFO0FBQzlFLHNEQUF3RTtBQWV4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFzRCw0REFBc0I7SUFheEUsMENBQVksSUFBMkM7ZUFFbkQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsRUFBRSxFQUFFLG1CQUFtQixFQUFHLElBQUksRUFBRSxDQUFDO0lBQ3hGLENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDeEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7WUFDekQsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxxQ0FBaUIsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7WUFDbkcsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUN2SCxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsdUNBQWtCLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1lBQy9GLEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdEIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDJEQUE0QixFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtTQUNwSCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQXhDQSxBQXdDQyxDQXhDcUQsZ0NBQWMsR0F3Q25FO0FBeENZLDRFQUFnQyIsImZpbGUiOiJhcGkvdHlwZXMvUmVwb3J0R2V0VXJsRm9yUmVwb3J0QXNDc3ZBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFSZXBvcnRUeXBlIH0gZnJvbSAnLi9LYWx0dXJhUmVwb3J0VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRJbnB1dEZpbHRlcic7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyUGFnZXIgfSBmcm9tICcuL0thbHR1cmFGaWx0ZXJQYWdlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zIH0gZnJvbSAnLi9LYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9ydEdldFVybEZvclJlcG9ydEFzQ3N2QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHJlcG9ydFRpdGxlIDogc3RyaW5nO1xuXHRyZXBvcnRUZXh0IDogc3RyaW5nO1xuXHRoZWFkZXJzIDogc3RyaW5nO1xuXHRyZXBvcnRUeXBlIDogS2FsdHVyYVJlcG9ydFR5cGU7XG5cdHJlcG9ydElucHV0RmlsdGVyIDogS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyO1xuXHRkaW1lbnNpb24/IDogc3RyaW5nO1xuXHRwYWdlcj8gOiBLYWx0dXJhRmlsdGVyUGFnZXI7XG5cdG9yZGVyPyA6IHN0cmluZztcblx0b2JqZWN0SWRzPyA6IHN0cmluZztcblx0cmVzcG9uc2VPcHRpb25zPyA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdyZXBvcnQnIGFjdGlvbiAnZ2V0VXJsRm9yUmVwb3J0QXNDc3YnLlxuICpcbiAqIFVzYWdlOiB3aWxsIGNyZWF0ZSBhIENTViBmaWxlIGZvciB0aGUgZ2l2ZW4gcmVwb3J0IGFuZCByZXR1cm4gdGhlIFVSTCB0byBhY2Nlc3MgaXRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlcG9ydEdldFVybEZvclJlcG9ydEFzQ3N2QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8c3RyaW5nPiB7XG5cbiAgICByZXBvcnRUaXRsZSA6IHN0cmluZztcblx0cmVwb3J0VGV4dCA6IHN0cmluZztcblx0aGVhZGVycyA6IHN0cmluZztcblx0cmVwb3J0VHlwZSA6IEthbHR1cmFSZXBvcnRUeXBlO1xuXHRyZXBvcnRJbnB1dEZpbHRlciA6IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlcjtcblx0ZGltZW5zaW9uIDogc3RyaW5nO1xuXHRwYWdlciA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcblx0b3JkZXIgOiBzdHJpbmc7XG5cdG9iamVjdElkcyA6IHN0cmluZztcblx0cmVzcG9uc2VPcHRpb25zIDogS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBSZXBvcnRHZXRVcmxGb3JSZXBvcnRBc0NzdkFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ3MnLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVwb3J0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0VXJsRm9yUmVwb3J0QXNDc3YnIH0sXG5cdFx0XHRcdHJlcG9ydFRpdGxlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlcG9ydFRleHQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aGVhZGVycyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXBvcnRUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFR5cGUnIH0sXG5cdFx0XHRcdHJlcG9ydElucHV0RmlsdGVyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyJyB9LFxuXHRcdFx0XHRkaW1lbnNpb24gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFnZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFGaWx0ZXJQYWdlciwgc3ViVHlwZSA6ICdLYWx0dXJhRmlsdGVyUGFnZXInIH0sXG5cdFx0XHRcdG9yZGVyIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG9iamVjdElkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXNwb25zZU9wdGlvbnMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
