"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaESearchHistoryListResponse = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaESearchHistory_1 = require("./KalturaESearchHistory");
var KalturaESearchAggregationResponseItem_1 = require("./KalturaESearchAggregationResponseItem");
var KalturaListResponse_1 = require("./KalturaListResponse");
var KalturaESearchHistoryListResponse = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaESearchHistoryListResponse, _super);
    function KalturaESearchHistoryListResponse(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.objects === 'undefined')
            _this.objects = [];
        if (typeof _this.aggregations === 'undefined')
            _this.aggregations = [];
        return _this;
    }
    KalturaESearchHistoryListResponse.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaESearchHistoryListResponse' },
            objects: { type: 'a', readOnly: true, subTypeConstructor: KalturaESearchHistory_1.KalturaESearchHistory, subType: 'KalturaESearchHistory' },
            aggregations: { type: 'a', readOnly: true, subTypeConstructor: KalturaESearchAggregationResponseItem_1.KalturaESearchAggregationResponseItem, subType: 'KalturaESearchAggregationResponseItem' }
        });
        return result;
    };
    return KalturaESearchHistoryListResponse;
}(KalturaListResponse_1.KalturaListResponse));
exports.KalturaESearchHistoryListResponse = KalturaESearchHistoryListResponse;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaESearchHistoryListResponse', KalturaESearchHistoryListResponse);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRVNlYXJjaEhpc3RvcnlMaXN0UmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxpRUFBZ0U7QUFDaEUsaUdBQWdHO0FBQ2hHLDZEQUFxRjtBQU9yRjtJQUF1RCw2REFBbUI7SUFLdEUsMkNBQVksSUFBNkM7UUFBekQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FHZDtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqRSxJQUFJLE9BQU8sS0FBSSxDQUFDLFlBQVksS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7O0lBQ25FLENBQUM7SUFFUyx3REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQ0FBbUMsRUFBRTtZQUN0RixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsNkNBQXFCLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3hILFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2RUFBcUMsRUFBRSxPQUFPLEVBQUcsdUNBQXVDLEVBQUU7U0FDcEosQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHdDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QnNELHlDQUFtQixHQXlCekU7QUF6QlksOEVBQWlDO0FBMkI5QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsbUNBQW1DLEVBQUMsaUNBQWlDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUVTZWFyY2hIaXN0b3J5TGlzdFJlc3BvbnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUVTZWFyY2hIaXN0b3J5IH0gZnJvbSAnLi9LYWx0dXJhRVNlYXJjaEhpc3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUVTZWFyY2hBZ2dyZWdhdGlvblJlc3BvbnNlSXRlbSB9IGZyb20gJy4vS2FsdHVyYUVTZWFyY2hBZ2dyZWdhdGlvblJlc3BvbnNlSXRlbSc7XG5pbXBvcnQgeyBLYWx0dXJhTGlzdFJlc3BvbnNlLCBLYWx0dXJhTGlzdFJlc3BvbnNlQXJncyB9IGZyb20gJy4vS2FsdHVyYUxpc3RSZXNwb25zZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUVTZWFyY2hIaXN0b3J5TGlzdFJlc3BvbnNlQXJncyAgZXh0ZW5kcyBLYWx0dXJhTGlzdFJlc3BvbnNlQXJncyB7XG4gICAgXG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFFU2VhcmNoSGlzdG9yeUxpc3RSZXNwb25zZSBleHRlbmRzIEthbHR1cmFMaXN0UmVzcG9uc2Uge1xuXG4gICAgcmVhZG9ubHkgb2JqZWN0cyA6IEthbHR1cmFFU2VhcmNoSGlzdG9yeVtdO1xuXHRyZWFkb25seSBhZ2dyZWdhdGlvbnMgOiBLYWx0dXJhRVNlYXJjaEFnZ3JlZ2F0aW9uUmVzcG9uc2VJdGVtW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFFU2VhcmNoSGlzdG9yeUxpc3RSZXNwb25zZUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLm9iamVjdHMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMuYWdncmVnYXRpb25zID09PSAndW5kZWZpbmVkJykgdGhpcy5hZ2dyZWdhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRVNlYXJjaEhpc3RvcnlMaXN0UmVzcG9uc2UnIH0sXG5cdFx0XHRcdG9iamVjdHMgOiB7IHR5cGUgOiAnYScsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVTZWFyY2hIaXN0b3J5LCBzdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoSGlzdG9yeScgfSxcblx0XHRcdFx0YWdncmVnYXRpb25zIDogeyB0eXBlIDogJ2EnLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFU2VhcmNoQWdncmVnYXRpb25SZXNwb25zZUl0ZW0sIHN1YlR5cGUgOiAnS2FsdHVyYUVTZWFyY2hBZ2dyZWdhdGlvblJlc3BvbnNlSXRlbScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFFU2VhcmNoSGlzdG9yeUxpc3RSZXNwb25zZScsS2FsdHVyYUVTZWFyY2hIaXN0b3J5TGlzdFJlc3BvbnNlKTtcbiJdfQ==
