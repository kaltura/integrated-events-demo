"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveStreamAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaLiveStreamEntry_1 = require("./KalturaLiveStreamEntry");
var KalturaSourceType_1 = require("./KalturaSourceType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'liveStream' action 'add'.
 *
 * Usage: Adds new live stream entry.
 * The entry will be queued for provision
 *
 * Server response type:         KalturaLiveStreamEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var LiveStreamAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(LiveStreamAddAction, _super);
    function LiveStreamAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaLiveStreamEntry', responseConstructor: KalturaLiveStreamEntry_1.KalturaLiveStreamEntry }) || this;
    }
    LiveStreamAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'livestream' },
            action: { type: 'c', default: 'add' },
            liveStreamEntry: { type: 'o', subTypeConstructor: KalturaLiveStreamEntry_1.KalturaLiveStreamEntry, subType: 'KalturaLiveStreamEntry' },
            sourceType: { type: 'es', subTypeConstructor: KalturaSourceType_1.KalturaSourceType, subType: 'KalturaSourceType' }
        });
        return result;
    };
    return LiveStreamAddAction;
}(kaltura_request_1.KalturaRequest));
exports.LiveStreamAddAction = LiveStreamAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9MaXZlU3RyZWFtQWRkQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxtRUFBa0U7QUFFbEUseURBQXdEO0FBQ3hELHNEQUF3RTtBQU94RTs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBeUMsK0NBQXNDO0lBSzNFLDZCQUFZLElBQThCO2VBRXRDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHdCQUF3QixFQUFFLG1CQUFtQixFQUFHLCtDQUFzQixFQUFHLENBQUM7SUFDakksQ0FBQztJQUVTLDBDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFlBQVksRUFBRTtZQUM1RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxLQUFLLEVBQUU7WUFDeEMsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDakgsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxxQ0FBaUIsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7U0FDMUYsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDBCQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QndDLGdDQUFjLEdBd0J0RDtBQXhCWSxrREFBbUIiLCJmaWxlIjoiYXBpL3R5cGVzL0xpdmVTdHJlYW1BZGRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVTdHJlYW1FbnRyeSB9IGZyb20gJy4vS2FsdHVyYUxpdmVTdHJlYW1FbnRyeSc7XG5cbmltcG9ydCB7IEthbHR1cmFTb3VyY2VUeXBlIH0gZnJvbSAnLi9LYWx0dXJhU291cmNlVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBMaXZlU3RyZWFtQWRkQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGxpdmVTdHJlYW1FbnRyeSA6IEthbHR1cmFMaXZlU3RyZWFtRW50cnk7XG5cdHNvdXJjZVR5cGU/IDogS2FsdHVyYVNvdXJjZVR5cGU7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdsaXZlU3RyZWFtJyBhY3Rpb24gJ2FkZCcuXG4gKlxuICogVXNhZ2U6IEFkZHMgbmV3IGxpdmUgc3RyZWFtIGVudHJ5LlxuICogVGhlIGVudHJ5IHdpbGwgYmUgcXVldWVkIGZvciBwcm92aXNpb25cbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXZlU3RyZWFtQWRkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUxpdmVTdHJlYW1FbnRyeT4ge1xuXG4gICAgbGl2ZVN0cmVhbUVudHJ5IDogS2FsdHVyYUxpdmVTdHJlYW1FbnRyeTtcblx0c291cmNlVHlwZSA6IEthbHR1cmFTb3VyY2VUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IExpdmVTdHJlYW1BZGRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFMaXZlU3RyZWFtRW50cnknLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUxpdmVTdHJlYW1FbnRyeSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbGl2ZXN0cmVhbScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2FkZCcgfSxcblx0XHRcdFx0bGl2ZVN0cmVhbUVudHJ5IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5LCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlU3RyZWFtRW50cnknIH0sXG5cdFx0XHRcdHNvdXJjZVR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU291cmNlVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhU291cmNlVHlwZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
