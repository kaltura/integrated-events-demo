"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBatchJobBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBatchJobType_1 = require("./KalturaBatchJobType");
var KalturaBatchJobStatus_1 = require("./KalturaBatchJobStatus");
var KalturaBatchJobErrorTypes_1 = require("./KalturaBatchJobErrorTypes");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaBatchJobBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBatchJobBaseFilter, _super);
    function KalturaBatchJobBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaBatchJobBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBatchJobBaseFilter' },
            idEqual: { type: 'n' },
            idGreaterThanOrEqual: { type: 'n' },
            partnerIdEqual: { type: 'n' },
            partnerIdIn: { type: 's' },
            partnerIdNotIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            executionAttemptsGreaterThanOrEqual: { type: 'n' },
            executionAttemptsLessThanOrEqual: { type: 'n' },
            lockVersionGreaterThanOrEqual: { type: 'n' },
            lockVersionLessThanOrEqual: { type: 'n' },
            entryIdEqual: { type: 's' },
            jobTypeEqual: { type: 'es', subTypeConstructor: KalturaBatchJobType_1.KalturaBatchJobType, subType: 'KalturaBatchJobType' },
            jobTypeIn: { type: 's' },
            jobTypeNotIn: { type: 's' },
            jobSubTypeEqual: { type: 'n' },
            jobSubTypeIn: { type: 's' },
            jobSubTypeNotIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaBatchJobStatus_1.KalturaBatchJobStatus, subType: 'KalturaBatchJobStatus' },
            statusIn: { type: 's' },
            statusNotIn: { type: 's' },
            priorityGreaterThanOrEqual: { type: 'n' },
            priorityLessThanOrEqual: { type: 'n' },
            priorityEqual: { type: 'n' },
            priorityIn: { type: 's' },
            priorityNotIn: { type: 's' },
            batchVersionGreaterThanOrEqual: { type: 'n' },
            batchVersionLessThanOrEqual: { type: 'n' },
            batchVersionEqual: { type: 'n' },
            queueTimeGreaterThanOrEqual: { type: 'n' },
            queueTimeLessThanOrEqual: { type: 'n' },
            finishTimeGreaterThanOrEqual: { type: 'n' },
            finishTimeLessThanOrEqual: { type: 'n' },
            errTypeEqual: { type: 'en', subTypeConstructor: KalturaBatchJobErrorTypes_1.KalturaBatchJobErrorTypes, subType: 'KalturaBatchJobErrorTypes' },
            errTypeIn: { type: 's' },
            errTypeNotIn: { type: 's' },
            errNumberEqual: { type: 'n' },
            errNumberIn: { type: 's' },
            errNumberNotIn: { type: 's' },
            estimatedEffortLessThan: { type: 'n' },
            estimatedEffortGreaterThan: { type: 'n' },
            urgencyLessThanOrEqual: { type: 'n' },
            urgencyGreaterThanOrEqual: { type: 'n' }
        });
        return result;
    };
    return KalturaBatchJobBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaBatchJobBaseFilter = KalturaBatchJobBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBatchJobBaseFilter', KalturaBatchJobBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
