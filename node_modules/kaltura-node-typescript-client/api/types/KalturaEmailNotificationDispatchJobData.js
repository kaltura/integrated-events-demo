"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEmailNotificationDispatchJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEmailNotificationRecipientJobData_1 = require("./KalturaEmailNotificationRecipientJobData");
var KalturaEmailNotificationTemplatePriority_1 = require("./KalturaEmailNotificationTemplatePriority");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaEventNotificationDispatchJobData_1 = require("./KalturaEventNotificationDispatchJobData");
var KalturaEmailNotificationDispatchJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEmailNotificationDispatchJobData, _super);
    function KalturaEmailNotificationDispatchJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.customHeaders === 'undefined')
            _this.customHeaders = [];
        return _this;
    }
    KalturaEmailNotificationDispatchJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEmailNotificationDispatchJobData' },
            fromEmail: { type: 's' },
            fromName: { type: 's' },
            to: { type: 'o', subTypeConstructor: KalturaEmailNotificationRecipientJobData_1.KalturaEmailNotificationRecipientJobData, subType: 'KalturaEmailNotificationRecipientJobData' },
            cc: { type: 'o', subTypeConstructor: KalturaEmailNotificationRecipientJobData_1.KalturaEmailNotificationRecipientJobData, subType: 'KalturaEmailNotificationRecipientJobData' },
            bcc: { type: 'o', subTypeConstructor: KalturaEmailNotificationRecipientJobData_1.KalturaEmailNotificationRecipientJobData, subType: 'KalturaEmailNotificationRecipientJobData' },
            replyTo: { type: 'o', subTypeConstructor: KalturaEmailNotificationRecipientJobData_1.KalturaEmailNotificationRecipientJobData, subType: 'KalturaEmailNotificationRecipientJobData' },
            priority: { type: 'en', subTypeConstructor: KalturaEmailNotificationTemplatePriority_1.KalturaEmailNotificationTemplatePriority, subType: 'KalturaEmailNotificationTemplatePriority' },
            confirmReadingTo: { type: 's' },
            hostname: { type: 's' },
            messageID: { type: 's' },
            customHeaders: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaEmailNotificationDispatchJobData;
}(KalturaEventNotificationDispatchJobData_1.KalturaEventNotificationDispatchJobData));
exports.KalturaEmailNotificationDispatchJobData = KalturaEmailNotificationDispatchJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEmailNotificationDispatchJobData', KalturaEmailNotificationDispatchJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRW1haWxOb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCx1R0FBc0c7QUFDdEcsdUdBQXNHO0FBQ3RHLHFEQUFvRDtBQUNwRCxxR0FBaUo7QUFpQmpKO0lBQTZELG1FQUF1QztJQWNoRyxpREFBWSxJQUFtRDtRQUEvRCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUVkO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxhQUFhLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDOztJQUMzRSxDQUFDO0lBRVMsOERBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcseUNBQXlDLEVBQUU7WUFDNUYsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQ3hJLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQ3hJLEdBQUcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQ3pJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQzdJLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQy9JLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNqQyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpQ0FBZSxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtTQUN4RixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsOENBQUM7QUFBRCxDQTFDQSxBQTBDQyxDQTFDNEQsaUZBQXVDLEdBMENuRztBQTFDWSwwRkFBdUM7QUE0Q3BELDJDQUFtQixDQUFDLFlBQVksQ0FBQyx5Q0FBeUMsRUFBQyx1Q0FBdUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRW1haWxOb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhIH0gZnJvbSAnLi9LYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhJztcbmltcG9ydCB7IEthbHR1cmFFbWFpbE5vdGlmaWNhdGlvblRlbXBsYXRlUHJpb3JpdHkgfSBmcm9tICcuL0thbHR1cmFFbWFpbE5vdGlmaWNhdGlvblRlbXBsYXRlUHJpb3JpdHknO1xuaW1wb3J0IHsgS2FsdHVyYUtleVZhbHVlIH0gZnJvbSAnLi9LYWx0dXJhS2V5VmFsdWUnO1xuaW1wb3J0IHsgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uRGlzcGF0Y2hKb2JEYXRhLCBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGFBcmdzIH0gZnJvbSAnLi9LYWx0dXJhRXZlbnROb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFFbWFpbE5vdGlmaWNhdGlvbkRpc3BhdGNoSm9iRGF0YUFyZ3MgIGV4dGVuZHMgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uRGlzcGF0Y2hKb2JEYXRhQXJncyB7XG4gICAgZnJvbUVtYWlsPyA6IHN0cmluZztcblx0ZnJvbU5hbWU/IDogc3RyaW5nO1xuXHR0bz8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhO1xuXHRjYz8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhO1xuXHRiY2M/IDogS2FsdHVyYUVtYWlsTm90aWZpY2F0aW9uUmVjaXBpZW50Sm9iRGF0YTtcblx0cmVwbHlUbz8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhO1xuXHRwcmlvcml0eT8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25UZW1wbGF0ZVByaW9yaXR5O1xuXHRjb25maXJtUmVhZGluZ1RvPyA6IHN0cmluZztcblx0aG9zdG5hbWU/IDogc3RyaW5nO1xuXHRtZXNzYWdlSUQ/IDogc3RyaW5nO1xuXHRjdXN0b21IZWFkZXJzPyA6IEthbHR1cmFLZXlWYWx1ZVtdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEgZXh0ZW5kcyBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEge1xuXG4gICAgZnJvbUVtYWlsIDogc3RyaW5nO1xuXHRmcm9tTmFtZSA6IHN0cmluZztcblx0dG8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhO1xuXHRjYyA6IEthbHR1cmFFbWFpbE5vdGlmaWNhdGlvblJlY2lwaWVudEpvYkRhdGE7XG5cdGJjYyA6IEthbHR1cmFFbWFpbE5vdGlmaWNhdGlvblJlY2lwaWVudEpvYkRhdGE7XG5cdHJlcGx5VG8gOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhO1xuXHRwcmlvcml0eSA6IEthbHR1cmFFbWFpbE5vdGlmaWNhdGlvblRlbXBsYXRlUHJpb3JpdHk7XG5cdGNvbmZpcm1SZWFkaW5nVG8gOiBzdHJpbmc7XG5cdGhvc3RuYW1lIDogc3RyaW5nO1xuXHRtZXNzYWdlSUQgOiBzdHJpbmc7XG5cdGN1c3RvbUhlYWRlcnMgOiBLYWx0dXJhS2V5VmFsdWVbXTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUVtYWlsTm90aWZpY2F0aW9uRGlzcGF0Y2hKb2JEYXRhQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY3VzdG9tSGVhZGVycyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuY3VzdG9tSGVhZGVycyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFFbWFpbE5vdGlmaWNhdGlvbkRpc3BhdGNoSm9iRGF0YScgfSxcblx0XHRcdFx0ZnJvbUVtYWlsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGZyb21OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHRvIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhLCBzdWJUeXBlIDogJ0thbHR1cmFFbWFpbE5vdGlmaWNhdGlvblJlY2lwaWVudEpvYkRhdGEnIH0sXG5cdFx0XHRcdGNjIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhLCBzdWJUeXBlIDogJ0thbHR1cmFFbWFpbE5vdGlmaWNhdGlvblJlY2lwaWVudEpvYkRhdGEnIH0sXG5cdFx0XHRcdGJjYyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVtYWlsTm90aWZpY2F0aW9uUmVjaXBpZW50Sm9iRGF0YSwgc3ViVHlwZSA6ICdLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhJyB9LFxuXHRcdFx0XHRyZXBseVRvIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW1haWxOb3RpZmljYXRpb25SZWNpcGllbnRKb2JEYXRhLCBzdWJUeXBlIDogJ0thbHR1cmFFbWFpbE5vdGlmaWNhdGlvblJlY2lwaWVudEpvYkRhdGEnIH0sXG5cdFx0XHRcdHByaW9yaXR5IDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVtYWlsTm90aWZpY2F0aW9uVGVtcGxhdGVQcmlvcml0eSwgc3ViVHlwZSA6ICdLYWx0dXJhRW1haWxOb3RpZmljYXRpb25UZW1wbGF0ZVByaW9yaXR5JyB9LFxuXHRcdFx0XHRjb25maXJtUmVhZGluZ1RvIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGhvc3RuYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG1lc3NhZ2VJRCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjdXN0b21IZWFkZXJzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhS2V5VmFsdWUsIHN1YlR5cGUgOiAnS2FsdHVyYUtleVZhbHVlJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUVtYWlsTm90aWZpY2F0aW9uRGlzcGF0Y2hKb2JEYXRhJyxLYWx0dXJhRW1haWxOb3RpZmljYXRpb25EaXNwYXRjaEpvYkRhdGEpO1xuIl19
