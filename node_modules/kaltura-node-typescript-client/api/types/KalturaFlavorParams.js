"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaFlavorParams = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaVideoCodec_1 = require("./KalturaVideoCodec");
var KalturaAudioCodec_1 = require("./KalturaAudioCodec");
var KalturaContainerFormat_1 = require("./KalturaContainerFormat");
var KalturaAssetParams_1 = require("./KalturaAssetParams");
var KalturaFlavorParams = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaFlavorParams, _super);
    function KalturaFlavorParams(data) {
        return _super.call(this, data) || this;
    }
    KalturaFlavorParams.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaFlavorParams' },
            videoCodec: { type: 'es', subTypeConstructor: KalturaVideoCodec_1.KalturaVideoCodec, subType: 'KalturaVideoCodec' },
            videoBitrate: { type: 'n' },
            audioCodec: { type: 'es', subTypeConstructor: KalturaAudioCodec_1.KalturaAudioCodec, subType: 'KalturaAudioCodec' },
            audioBitrate: { type: 'n' },
            audioChannels: { type: 'n' },
            audioSampleRate: { type: 'n' },
            width: { type: 'n' },
            height: { type: 'n' },
            frameRate: { type: 'n' },
            gopSize: { type: 'n' },
            conversionEngines: { type: 's' },
            conversionEnginesExtraParams: { type: 's' },
            twoPass: { type: 'b' },
            deinterlice: { type: 'n' },
            rotate: { type: 'n' },
            operators: { type: 's' },
            engineVersion: { type: 'n' },
            format: { type: 'es', subTypeConstructor: KalturaContainerFormat_1.KalturaContainerFormat, subType: 'KalturaContainerFormat' },
            aspectRatioProcessingMode: { type: 'n' },
            forceFrameToMultiplication16: { type: 'n' },
            isGopInSec: { type: 'n' },
            isAvoidVideoShrinkFramesizeToSource: { type: 'n' },
            isAvoidVideoShrinkBitrateToSource: { type: 'n' },
            isVideoFrameRateForLowBrAppleHls: { type: 'n' },
            multiStream: { type: 's' },
            anamorphicPixels: { type: 'n' },
            isAvoidForcedKeyFrames: { type: 'n' },
            forcedKeyFramesMode: { type: 'n' },
            isCropIMX: { type: 'n' },
            optimizationPolicy: { type: 'n' },
            maxFrameRate: { type: 'n' },
            videoConstantBitrate: { type: 'n' },
            videoBitrateTolerance: { type: 'n' },
            watermarkData: { type: 's' },
            subtitlesData: { type: 's' },
            cropData: { type: 's' },
            isEncrypted: { type: 'n' },
            contentAwareness: { type: 'n' },
            chunkedEncodeMode: { type: 'n' },
            clipOffset: { type: 'n' },
            clipDuration: { type: 'n' }
        });
        return result;
    };
    return KalturaFlavorParams;
}(KalturaAssetParams_1.KalturaAssetParams));
exports.KalturaFlavorParams = KalturaFlavorParams;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaFlavorParams', KalturaFlavorParams);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
