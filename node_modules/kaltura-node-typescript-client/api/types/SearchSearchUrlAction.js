"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchSearchUrlAction = void 0;
var tslib_1 = require("tslib");
var KalturaSearchResult_1 = require("./KalturaSearchResult");
var KalturaMediaType_1 = require("./KalturaMediaType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'search' action 'searchUrl'.
 *
 * Usage: Search for media given a specific URL
 * Kaltura supports a searchURL action on some of the media providers.
 * This action will return a KalturaSearchResult object based on a given URL (assuming the media provider is supported)
 *
 * Server response type:         KalturaSearchResult
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var SearchSearchUrlAction = /** @class */ (function (_super) {
    tslib_1.__extends(SearchSearchUrlAction, _super);
    function SearchSearchUrlAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaSearchResult', responseConstructor: KalturaSearchResult_1.KalturaSearchResult }) || this;
    }
    SearchSearchUrlAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'search' },
            action: { type: 'c', default: 'searchUrl' },
            mediaType: { type: 'en', subTypeConstructor: KalturaMediaType_1.KalturaMediaType, subType: 'KalturaMediaType' },
            url: { type: 's' }
        });
        return result;
    };
    return SearchSearchUrlAction;
}(kaltura_request_1.KalturaRequest));
exports.SearchSearchUrlAction = SearchSearchUrlAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TZWFyY2hTZWFyY2hVcmxBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCx1REFBc0Q7QUFDdEQsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7OztHQVdHO0FBQ0g7SUFBMkMsaURBQW1DO0lBSzFFLCtCQUFZLElBQWdDO2VBRXhDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHFCQUFxQixFQUFFLG1CQUFtQixFQUFHLHlDQUFtQixFQUFHLENBQUM7SUFDM0gsQ0FBQztJQUVTLDRDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUN4RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxXQUFXLEVBQUU7WUFDOUMsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxtQ0FBZ0IsRUFBRSxPQUFPLEVBQUcsa0JBQWtCLEVBQUU7WUFDaEcsR0FBRyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNYLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw0QkFBQztBQUFELENBeEJBLEFBd0JDLENBeEIwQyxnQ0FBYyxHQXdCeEQ7QUF4Qlksc0RBQXFCIiwiZmlsZSI6ImFwaS90eXBlcy9TZWFyY2hTZWFyY2hVcmxBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVNlYXJjaFJlc3VsdCB9IGZyb20gJy4vS2FsdHVyYVNlYXJjaFJlc3VsdCc7XG5cbmltcG9ydCB7IEthbHR1cmFNZWRpYVR5cGUgfSBmcm9tICcuL0thbHR1cmFNZWRpYVR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VhcmNoU2VhcmNoVXJsQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIG1lZGlhVHlwZSA6IEthbHR1cmFNZWRpYVR5cGU7XG5cdHVybCA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3NlYXJjaCcgYWN0aW9uICdzZWFyY2hVcmwnLlxuICpcbiAqIFVzYWdlOiBTZWFyY2ggZm9yIG1lZGlhIGdpdmVuIGEgc3BlY2lmaWMgVVJMXG4gKiBLYWx0dXJhIHN1cHBvcnRzIGEgc2VhcmNoVVJMIGFjdGlvbiBvbiBzb21lIG9mIHRoZSBtZWRpYSBwcm92aWRlcnMuXG4gKiBUaGlzIGFjdGlvbiB3aWxsIHJldHVybiBhIEthbHR1cmFTZWFyY2hSZXN1bHQgb2JqZWN0IGJhc2VkIG9uIGEgZ2l2ZW4gVVJMIChhc3N1bWluZyB0aGUgbWVkaWEgcHJvdmlkZXIgaXMgc3VwcG9ydGVkKVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTZWFyY2hSZXN1bHRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFNlYXJjaFNlYXJjaFVybEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFTZWFyY2hSZXN1bHQ+IHtcblxuICAgIG1lZGlhVHlwZSA6IEthbHR1cmFNZWRpYVR5cGU7XG5cdHVybCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTZWFyY2hTZWFyY2hVcmxBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTZWFyY2hSZXN1bHQnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNlYXJjaFJlc3VsdCAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VhcmNoJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VhcmNoVXJsJyB9LFxuXHRcdFx0XHRtZWRpYVR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWVkaWFUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFNZWRpYVR5cGUnIH0sXG5cdFx0XHRcdHVybCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
