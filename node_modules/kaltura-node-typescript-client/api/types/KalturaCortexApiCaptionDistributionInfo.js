"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCortexApiCaptionDistributionInfo = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaCortexApiDistributionCaptionAction_1 = require("./KalturaCortexApiDistributionCaptionAction");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaCortexApiCaptionDistributionInfo = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCortexApiCaptionDistributionInfo, _super);
    function KalturaCortexApiCaptionDistributionInfo(data) {
        return _super.call(this, data) || this;
    }
    KalturaCortexApiCaptionDistributionInfo.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCortexApiCaptionDistributionInfo' },
            language: { type: 's' },
            label: { type: 's' },
            filePath: { type: 's' },
            remoteId: { type: 's' },
            action: { type: 'en', subTypeConstructor: KalturaCortexApiDistributionCaptionAction_1.KalturaCortexApiDistributionCaptionAction, subType: 'KalturaCortexApiDistributionCaptionAction' },
            version: { type: 's' },
            assetId: { type: 's' },
            fileExt: { type: 's' }
        });
        return result;
    };
    return KalturaCortexApiCaptionDistributionInfo;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaCortexApiCaptionDistributionInfo = KalturaCortexApiCaptionDistributionInfo;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCortexApiCaptionDistributionInfo', KalturaCortexApiCaptionDistributionInfo);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ29ydGV4QXBpQ2FwdGlvbkRpc3RyaWJ1dGlvbkluZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCx5R0FBd0c7QUFDeEcsOERBQWtGO0FBY2xGO0lBQTZELG1FQUFpQjtJQVcxRSxpREFBWSxJQUFtRDtlQUUzRCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsOERBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcseUNBQXlDLEVBQUU7WUFDNUYsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFGQUF5QyxFQUFFLE9BQU8sRUFBRywyQ0FBMkMsRUFBRTtZQUMvSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNmLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw4Q0FBQztBQUFELENBbkNBLEFBbUNDLENBbkM0RCx1Q0FBaUIsR0FtQzdFO0FBbkNZLDBGQUF1QztBQXFDcEQsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHlDQUF5QyxFQUFDLHVDQUF1QyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFDb3J0ZXhBcGlDYXB0aW9uRGlzdHJpYnV0aW9uSW5mby5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25DYXB0aW9uQWN0aW9uIH0gZnJvbSAnLi9LYWx0dXJhQ29ydGV4QXBpRGlzdHJpYnV0aW9uQ2FwdGlvbkFjdGlvbic7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUNvcnRleEFwaUNhcHRpb25EaXN0cmlidXRpb25JbmZvQXJncyAgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZUFyZ3Mge1xuICAgIGxhbmd1YWdlPyA6IHN0cmluZztcblx0bGFiZWw/IDogc3RyaW5nO1xuXHRmaWxlUGF0aD8gOiBzdHJpbmc7XG5cdHJlbW90ZUlkPyA6IHN0cmluZztcblx0YWN0aW9uPyA6IEthbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25DYXB0aW9uQWN0aW9uO1xuXHR2ZXJzaW9uPyA6IHN0cmluZztcblx0YXNzZXRJZD8gOiBzdHJpbmc7XG5cdGZpbGVFeHQ/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ29ydGV4QXBpQ2FwdGlvbkRpc3RyaWJ1dGlvbkluZm8gZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICBsYW5ndWFnZSA6IHN0cmluZztcblx0bGFiZWwgOiBzdHJpbmc7XG5cdGZpbGVQYXRoIDogc3RyaW5nO1xuXHRyZW1vdGVJZCA6IHN0cmluZztcblx0YWN0aW9uIDogS2FsdHVyYUNvcnRleEFwaURpc3RyaWJ1dGlvbkNhcHRpb25BY3Rpb247XG5cdHZlcnNpb24gOiBzdHJpbmc7XG5cdGFzc2V0SWQgOiBzdHJpbmc7XG5cdGZpbGVFeHQgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFDb3J0ZXhBcGlDYXB0aW9uRGlzdHJpYnV0aW9uSW5mb0FyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQ29ydGV4QXBpQ2FwdGlvbkRpc3RyaWJ1dGlvbkluZm8nIH0sXG5cdFx0XHRcdGxhbmd1YWdlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGxhYmVsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGZpbGVQYXRoIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlbW90ZUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25DYXB0aW9uQWN0aW9uLCBzdWJUeXBlIDogJ0thbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25DYXB0aW9uQWN0aW9uJyB9LFxuXHRcdFx0XHR2ZXJzaW9uIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGFzc2V0SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZmlsZUV4dCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUNvcnRleEFwaUNhcHRpb25EaXN0cmlidXRpb25JbmZvJyxLYWx0dXJhQ29ydGV4QXBpQ2FwdGlvbkRpc3RyaWJ1dGlvbkluZm8pO1xuIl19
