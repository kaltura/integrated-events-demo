"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaImportJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaString_1 = require("./KalturaString");
var KalturaJobData_1 = require("./KalturaJobData");
var KalturaImportJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaImportJobData, _super);
    function KalturaImportJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.urlHeaders === 'undefined')
            _this.urlHeaders = [];
        return _this;
    }
    KalturaImportJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaImportJobData' },
            srcFileUrl: { type: 's' },
            destFileLocalPath: { type: 's' },
            flavorAssetId: { type: 's' },
            fileSize: { type: 'n' },
            destFileSharedPath: { type: 's' },
            urlHeaders: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            shouldRedirect: { type: 'b' }
        });
        return result;
    };
    return KalturaImportJobData;
}(KalturaJobData_1.KalturaJobData));
exports.KalturaImportJobData = KalturaImportJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaImportJobData', KalturaImportJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhSW1wb3J0Sm9iRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELGlEQUFnRDtBQUNoRCxtREFBc0U7QUFhdEU7SUFBMEMsZ0RBQWM7SUFVcEQsOEJBQVksSUFBZ0M7UUFBNUMsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsVUFBVSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7SUFDckUsQ0FBQztJQUVTLDJDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1lBQ3pFLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2xDLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbkMsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2QkFBYSxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDMUYsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN0QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkJBQUM7QUFBRCxDQWxDQSxBQWtDQyxDQWxDeUMsK0JBQWMsR0FrQ3ZEO0FBbENZLG9EQUFvQjtBQW9DakMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHNCQUFzQixFQUFDLG9CQUFvQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFJbXBvcnRKb2JEYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVN0cmluZyB9IGZyb20gJy4vS2FsdHVyYVN0cmluZyc7XG5pbXBvcnQgeyBLYWx0dXJhSm9iRGF0YSwgS2FsdHVyYUpvYkRhdGFBcmdzIH0gZnJvbSAnLi9LYWx0dXJhSm9iRGF0YSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUltcG9ydEpvYkRhdGFBcmdzICBleHRlbmRzIEthbHR1cmFKb2JEYXRhQXJncyB7XG4gICAgc3JjRmlsZVVybD8gOiBzdHJpbmc7XG5cdGRlc3RGaWxlTG9jYWxQYXRoPyA6IHN0cmluZztcblx0Zmxhdm9yQXNzZXRJZD8gOiBzdHJpbmc7XG5cdGZpbGVTaXplPyA6IG51bWJlcjtcblx0ZGVzdEZpbGVTaGFyZWRQYXRoPyA6IHN0cmluZztcblx0dXJsSGVhZGVycz8gOiBLYWx0dXJhU3RyaW5nW107XG5cdHNob3VsZFJlZGlyZWN0PyA6IGJvb2xlYW47XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFJbXBvcnRKb2JEYXRhIGV4dGVuZHMgS2FsdHVyYUpvYkRhdGEge1xuXG4gICAgc3JjRmlsZVVybCA6IHN0cmluZztcblx0ZGVzdEZpbGVMb2NhbFBhdGggOiBzdHJpbmc7XG5cdGZsYXZvckFzc2V0SWQgOiBzdHJpbmc7XG5cdGZpbGVTaXplIDogbnVtYmVyO1xuXHRkZXN0RmlsZVNoYXJlZFBhdGggOiBzdHJpbmc7XG5cdHVybEhlYWRlcnMgOiBLYWx0dXJhU3RyaW5nW107XG5cdHNob3VsZFJlZGlyZWN0IDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUltcG9ydEpvYkRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy51cmxIZWFkZXJzID09PSAndW5kZWZpbmVkJykgdGhpcy51cmxIZWFkZXJzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUltcG9ydEpvYkRhdGEnIH0sXG5cdFx0XHRcdHNyY0ZpbGVVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZGVzdEZpbGVMb2NhbFBhdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Zmxhdm9yQXNzZXRJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmaWxlU2l6ZSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRkZXN0RmlsZVNoYXJlZFBhdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXJsSGVhZGVycyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVN0cmluZywgc3ViVHlwZSA6ICdLYWx0dXJhU3RyaW5nJyB9LFxuXHRcdFx0XHRzaG91bGRSZWRpcmVjdCA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUltcG9ydEpvYkRhdGEnLEthbHR1cmFJbXBvcnRKb2JEYXRhKTtcbiJdfQ==
