"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaTranscriptAsset = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaLanguage_1 = require("./KalturaLanguage");
var KalturaTranscriptProviderType_1 = require("./KalturaTranscriptProviderType");
var KalturaAttachmentAsset_1 = require("./KalturaAttachmentAsset");
var KalturaTranscriptAsset = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaTranscriptAsset, _super);
    function KalturaTranscriptAsset(data) {
        return _super.call(this, data) || this;
    }
    KalturaTranscriptAsset.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaTranscriptAsset' },
            accuracy: { type: 'n' },
            humanVerified: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            language: { type: 'es', subTypeConstructor: KalturaLanguage_1.KalturaLanguage, subType: 'KalturaLanguage' },
            providerType: { type: 'es', subTypeConstructor: KalturaTranscriptProviderType_1.KalturaTranscriptProviderType, subType: 'KalturaTranscriptProviderType' }
        });
        return result;
    };
    return KalturaTranscriptAsset;
}(KalturaAttachmentAsset_1.KalturaAttachmentAsset));
exports.KalturaTranscriptAsset = KalturaTranscriptAsset;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaTranscriptAsset', KalturaTranscriptAsset);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVHJhbnNjcmlwdEFzc2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUVBQWtFO0FBQ2xFLHFEQUFvRDtBQUNwRCxpRkFBZ0Y7QUFDaEYsbUVBQThGO0FBVTlGO0lBQTRDLGtEQUFzQjtJQU85RCxnQ0FBWSxJQUFrQztlQUUxQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsNkNBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDM0UsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUNoSCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQzdGLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsNkRBQTZCLEVBQUUsT0FBTyxFQUFHLCtCQUErQixFQUFFO1NBQ3BILENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2QkFBQztBQUFELENBM0JBLEFBMkJDLENBM0IyQywrQ0FBc0IsR0EyQmpFO0FBM0JZLHdEQUFzQjtBQTZCbkMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFDLHNCQUFzQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFUcmFuc2NyaXB0QXNzZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhTnVsbGFibGVCb29sZWFuIH0gZnJvbSAnLi9LYWx0dXJhTnVsbGFibGVCb29sZWFuJztcbmltcG9ydCB7IEthbHR1cmFMYW5ndWFnZSB9IGZyb20gJy4vS2FsdHVyYUxhbmd1YWdlJztcbmltcG9ydCB7IEthbHR1cmFUcmFuc2NyaXB0UHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9LYWx0dXJhVHJhbnNjcmlwdFByb3ZpZGVyVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhQXR0YWNobWVudEFzc2V0LCBLYWx0dXJhQXR0YWNobWVudEFzc2V0QXJncyB9IGZyb20gJy4vS2FsdHVyYUF0dGFjaG1lbnRBc3NldCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVRyYW5zY3JpcHRBc3NldEFyZ3MgIGV4dGVuZHMgS2FsdHVyYUF0dGFjaG1lbnRBc3NldEFyZ3Mge1xuICAgIGFjY3VyYWN5PyA6IG51bWJlcjtcblx0aHVtYW5WZXJpZmllZD8gOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuO1xuXHRsYW5ndWFnZT8gOiBLYWx0dXJhTGFuZ3VhZ2U7XG5cdHByb3ZpZGVyVHlwZT8gOiBLYWx0dXJhVHJhbnNjcmlwdFByb3ZpZGVyVHlwZTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVRyYW5zY3JpcHRBc3NldCBleHRlbmRzIEthbHR1cmFBdHRhY2htZW50QXNzZXQge1xuXG4gICAgYWNjdXJhY3kgOiBudW1iZXI7XG5cdGh1bWFuVmVyaWZpZWQgOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuO1xuXHRsYW5ndWFnZSA6IEthbHR1cmFMYW5ndWFnZTtcblx0cHJvdmlkZXJUeXBlIDogS2FsdHVyYVRyYW5zY3JpcHRQcm92aWRlclR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFUcmFuc2NyaXB0QXNzZXRBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVRyYW5zY3JpcHRBc3NldCcgfSxcblx0XHRcdFx0YWNjdXJhY3kgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0aHVtYW5WZXJpZmllZCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW4sIHN1YlR5cGUgOiAnS2FsdHVyYU51bGxhYmxlQm9vbGVhbicgfSxcblx0XHRcdFx0bGFuZ3VhZ2UgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGFuZ3VhZ2UsIHN1YlR5cGUgOiAnS2FsdHVyYUxhbmd1YWdlJyB9LFxuXHRcdFx0XHRwcm92aWRlclR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhVHJhbnNjcmlwdFByb3ZpZGVyVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhVHJhbnNjcmlwdFByb3ZpZGVyVHlwZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFUcmFuc2NyaXB0QXNzZXQnLEthbHR1cmFUcmFuc2NyaXB0QXNzZXQpO1xuIl19
