"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaReachProfileBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaReachProfileStatus_1 = require("./KalturaReachProfileStatus");
var KalturaReachProfileType_1 = require("./KalturaReachProfileType");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaReachProfileBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaReachProfileBaseFilter, _super);
    function KalturaReachProfileBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaReachProfileBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaReachProfileBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaReachProfileStatus_1.KalturaReachProfileStatus, subType: 'KalturaReachProfileStatus' },
            statusIn: { type: 's' },
            profileTypeEqual: { type: 'en', subTypeConstructor: KalturaReachProfileType_1.KalturaReachProfileType, subType: 'KalturaReachProfileType' },
            profileTypeIn: { type: 's' }
        });
        return result;
    };
    return KalturaReachProfileBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaReachProfileBaseFilter = KalturaReachProfileBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaReachProfileBaseFilter', KalturaReachProfileBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUmVhY2hQcm9maWxlQmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHlFQUF3RTtBQUN4RSxxRUFBb0U7QUFDcEUsK0RBQXdGO0FBZ0J4RjtJQUFtRCx5REFBb0I7SUFhbkUsdUNBQVksSUFBeUM7ZUFFakQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLG9EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLCtCQUErQixFQUFFO1lBQ2xGLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQiwyQkFBMkIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUMsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxxREFBeUIsRUFBRSxPQUFPLEVBQUcsMkJBQTJCLEVBQUU7WUFDcEgsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsaURBQXVCLEVBQUUsT0FBTyxFQUFHLHlCQUF5QixFQUFFO1lBQ3JILGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDckIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLG9DQUFDO0FBQUQsQ0F2Q0EsQUF1Q0MsQ0F2Q2tELDJDQUFvQixHQXVDdEU7QUF2Q1ksc0VBQTZCO0FBeUMxQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsK0JBQStCLEVBQUMsNkJBQTZCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVJlYWNoUHJvZmlsZUJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVhY2hQcm9maWxlU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhUmVhY2hQcm9maWxlU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFSZWFjaFByb2ZpbGVUeXBlIH0gZnJvbSAnLi9LYWx0dXJhUmVhY2hQcm9maWxlVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVsYXRlZEZpbHRlciwgS2FsdHVyYVJlbGF0ZWRGaWx0ZXJBcmdzIH0gZnJvbSAnLi9LYWx0dXJhUmVsYXRlZEZpbHRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVJlYWNoUHJvZmlsZUJhc2VGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFSZWxhdGVkRmlsdGVyQXJncyB7XG4gICAgaWRFcXVhbD8gOiBudW1iZXI7XG5cdGlkSW4/IDogc3RyaW5nO1xuXHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0c3RhdHVzRXF1YWw/IDogS2FsdHVyYVJlYWNoUHJvZmlsZVN0YXR1cztcblx0c3RhdHVzSW4/IDogc3RyaW5nO1xuXHRwcm9maWxlVHlwZUVxdWFsPyA6IEthbHR1cmFSZWFjaFByb2ZpbGVUeXBlO1xuXHRwcm9maWxlVHlwZUluPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVJlYWNoUHJvZmlsZUJhc2VGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhUmVsYXRlZEZpbHRlciB7XG5cbiAgICBpZEVxdWFsIDogbnVtYmVyO1xuXHRpZEluIDogc3RyaW5nO1xuXHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRjcmVhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRzdGF0dXNFcXVhbCA6IEthbHR1cmFSZWFjaFByb2ZpbGVTdGF0dXM7XG5cdHN0YXR1c0luIDogc3RyaW5nO1xuXHRwcm9maWxlVHlwZUVxdWFsIDogS2FsdHVyYVJlYWNoUHJvZmlsZVR5cGU7XG5cdHByb2ZpbGVUeXBlSW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFSZWFjaFByb2ZpbGVCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFSZWFjaFByb2ZpbGVCYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHRpZEVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlYWNoUHJvZmlsZVN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhUmVhY2hQcm9maWxlU3RhdHVzJyB9LFxuXHRcdFx0XHRzdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwcm9maWxlVHlwZUVxdWFsIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlYWNoUHJvZmlsZVR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVJlYWNoUHJvZmlsZVR5cGUnIH0sXG5cdFx0XHRcdHByb2ZpbGVUeXBlSW4gOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFSZWFjaFByb2ZpbGVCYXNlRmlsdGVyJyxLYWx0dXJhUmVhY2hQcm9maWxlQmFzZUZpbHRlcik7XG4iXX0=
