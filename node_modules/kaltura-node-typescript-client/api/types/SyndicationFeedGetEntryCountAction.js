"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyndicationFeedGetEntryCountAction = void 0;
var tslib_1 = require("tslib");
var KalturaSyndicationFeedEntryCount_1 = require("./KalturaSyndicationFeedEntryCount");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'syndicationFeed' action 'getEntryCount'.
 *
 * Usage: get entry count for a syndication feed
 *
 * Server response type:         KalturaSyndicationFeedEntryCount
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var SyndicationFeedGetEntryCountAction = /** @class */ (function (_super) {
    tslib_1.__extends(SyndicationFeedGetEntryCountAction, _super);
    function SyndicationFeedGetEntryCountAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaSyndicationFeedEntryCount', responseConstructor: KalturaSyndicationFeedEntryCount_1.KalturaSyndicationFeedEntryCount }) || this;
    }
    SyndicationFeedGetEntryCountAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'syndicationfeed' },
            action: { type: 'c', default: 'getEntryCount' },
            feedId: { type: 's' }
        });
        return result;
    };
    return SyndicationFeedGetEntryCountAction;
}(kaltura_request_1.KalturaRequest));
exports.SyndicationFeedGetEntryCountAction = SyndicationFeedGetEntryCountAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TeW5kaWNhdGlvbkZlZWRHZXRFbnRyeUNvdW50QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx1RkFBc0Y7QUFFdEYsc0RBQXdFO0FBTXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXdELDhEQUFnRDtJQUlwRyw0Q0FBWSxJQUE2QztlQUVyRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxrQ0FBa0MsRUFBRSxtQkFBbUIsRUFBRyxtRUFBZ0MsRUFBRyxDQUFDO0lBQ3JKLENBQUM7SUFFUyx5REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtZQUNqRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDbEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNkLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx5Q0FBQztBQUFELENBdEJBLEFBc0JDLENBdEJ1RCxnQ0FBYyxHQXNCckU7QUF0QlksZ0ZBQWtDIiwiZmlsZSI6ImFwaS90eXBlcy9TeW5kaWNhdGlvbkZlZWRHZXRFbnRyeUNvdW50QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFTeW5kaWNhdGlvbkZlZWRFbnRyeUNvdW50IH0gZnJvbSAnLi9LYWx0dXJhU3luZGljYXRpb25GZWVkRW50cnlDb3VudCc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN5bmRpY2F0aW9uRmVlZEdldEVudHJ5Q291bnRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZmVlZElkIDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc3luZGljYXRpb25GZWVkJyBhY3Rpb24gJ2dldEVudHJ5Q291bnQnLlxuICpcbiAqIFVzYWdlOiBnZXQgZW50cnkgY291bnQgZm9yIGEgc3luZGljYXRpb24gZmVlZFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTeW5kaWNhdGlvbkZlZWRFbnRyeUNvdW50XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTeW5kaWNhdGlvbkZlZWRHZXRFbnRyeUNvdW50QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVN5bmRpY2F0aW9uRmVlZEVudHJ5Q291bnQ+IHtcblxuICAgIGZlZWRJZCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTeW5kaWNhdGlvbkZlZWRHZXRFbnRyeUNvdW50QWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhU3luZGljYXRpb25GZWVkRW50cnlDb3VudCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3luZGljYXRpb25GZWVkRW50cnlDb3VudCAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc3luZGljYXRpb25mZWVkJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0RW50cnlDb3VudCcgfSxcblx0XHRcdFx0ZmVlZElkIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
