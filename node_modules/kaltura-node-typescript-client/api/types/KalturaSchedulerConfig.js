"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaSchedulerConfig = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaSchedulerConfig = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaSchedulerConfig, _super);
    function KalturaSchedulerConfig(data) {
        return _super.call(this, data) || this;
    }
    KalturaSchedulerConfig.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaSchedulerConfig' },
            id: { type: 'n', readOnly: true },
            createdBy: { type: 's' },
            updatedBy: { type: 's' },
            commandId: { type: 's' },
            commandStatus: { type: 's' },
            schedulerId: { type: 'n' },
            schedulerConfiguredId: { type: 'n' },
            schedulerName: { type: 's' },
            workerId: { type: 'n' },
            workerConfiguredId: { type: 'n' },
            workerName: { type: 's' },
            variable: { type: 's' },
            variablePart: { type: 's' },
            value: { type: 's' }
        });
        return result;
    };
    return KalturaSchedulerConfig;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaSchedulerConfig = KalturaSchedulerConfig;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaSchedulerConfig', KalturaSchedulerConfig);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhU2NoZWR1bGVyQ29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsOERBQWtGO0FBbUJsRjtJQUE0QyxrREFBaUI7SUFpQnpELGdDQUFZLElBQWtDO2VBRTFDLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyw2Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMzRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLHFCQUFxQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QyxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsa0JBQWtCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25DLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdCLEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDYixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNkJBQUM7QUFBRCxDQS9DQSxBQStDQyxDQS9DMkMsdUNBQWlCLEdBK0M1RDtBQS9DWSx3REFBc0I7QUFpRG5DLDJDQUFtQixDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBQyxzQkFBc0IsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhU2NoZWR1bGVyQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFTY2hlZHVsZXJDb25maWdBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgY3JlYXRlZEJ5PyA6IHN0cmluZztcblx0dXBkYXRlZEJ5PyA6IHN0cmluZztcblx0Y29tbWFuZElkPyA6IHN0cmluZztcblx0Y29tbWFuZFN0YXR1cz8gOiBzdHJpbmc7XG5cdHNjaGVkdWxlcklkPyA6IG51bWJlcjtcblx0c2NoZWR1bGVyQ29uZmlndXJlZElkPyA6IG51bWJlcjtcblx0c2NoZWR1bGVyTmFtZT8gOiBzdHJpbmc7XG5cdHdvcmtlcklkPyA6IG51bWJlcjtcblx0d29ya2VyQ29uZmlndXJlZElkPyA6IG51bWJlcjtcblx0d29ya2VyTmFtZT8gOiBzdHJpbmc7XG5cdHZhcmlhYmxlPyA6IHN0cmluZztcblx0dmFyaWFibGVQYXJ0PyA6IHN0cmluZztcblx0dmFsdWU/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhU2NoZWR1bGVyQ29uZmlnIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2Uge1xuXG4gICAgcmVhZG9ubHkgaWQgOiBudW1iZXI7XG5cdGNyZWF0ZWRCeSA6IHN0cmluZztcblx0dXBkYXRlZEJ5IDogc3RyaW5nO1xuXHRjb21tYW5kSWQgOiBzdHJpbmc7XG5cdGNvbW1hbmRTdGF0dXMgOiBzdHJpbmc7XG5cdHNjaGVkdWxlcklkIDogbnVtYmVyO1xuXHRzY2hlZHVsZXJDb25maWd1cmVkSWQgOiBudW1iZXI7XG5cdHNjaGVkdWxlck5hbWUgOiBzdHJpbmc7XG5cdHdvcmtlcklkIDogbnVtYmVyO1xuXHR3b3JrZXJDb25maWd1cmVkSWQgOiBudW1iZXI7XG5cdHdvcmtlck5hbWUgOiBzdHJpbmc7XG5cdHZhcmlhYmxlIDogc3RyaW5nO1xuXHR2YXJpYWJsZVBhcnQgOiBzdHJpbmc7XG5cdHZhbHVlIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhU2NoZWR1bGVyQ29uZmlnQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFTY2hlZHVsZXJDb25maWcnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y3JlYXRlZEJ5IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVwZGF0ZWRCeSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjb21tYW5kSWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y29tbWFuZFN0YXR1cyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzY2hlZHVsZXJJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzY2hlZHVsZXJDb25maWd1cmVkSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2NoZWR1bGVyTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR3b3JrZXJJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR3b3JrZXJDb25maWd1cmVkSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0d29ya2VyTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR2YXJpYWJsZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR2YXJpYWJsZVBhcnQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dmFsdWUgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFTY2hlZHVsZXJDb25maWcnLEthbHR1cmFTY2hlZHVsZXJDb25maWcpO1xuIl19
