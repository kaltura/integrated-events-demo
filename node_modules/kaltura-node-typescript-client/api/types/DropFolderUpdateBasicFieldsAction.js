"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropFolderUpdateBasicFieldsAction = void 0;
var tslib_1 = require("tslib");
var KalturaDropFolder_1 = require("./KalturaDropFolder");
var KalturaBasicFieldsDropFolder_1 = require("./KalturaBasicFieldsDropFolder");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'dropFolder' action 'updateBasicFields'.
 *
 *
 *
 * Server response type:         KalturaDropFolder
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DropFolderUpdateBasicFieldsAction = /** @class */ (function (_super) {
    tslib_1.__extends(DropFolderUpdateBasicFieldsAction, _super);
    function DropFolderUpdateBasicFieldsAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDropFolder', responseConstructor: KalturaDropFolder_1.KalturaDropFolder }) || this;
    }
    DropFolderUpdateBasicFieldsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'dropfolder_dropfolder' },
            action: { type: 'c', default: 'updateBasicFields' },
            dropFolderId: { type: 'n' },
            dropFolder: { type: 'o', subTypeConstructor: KalturaBasicFieldsDropFolder_1.KalturaBasicFieldsDropFolder, subType: 'KalturaBasicFieldsDropFolder' }
        });
        return result;
    };
    return DropFolderUpdateBasicFieldsAction;
}(kaltura_request_1.KalturaRequest));
exports.DropFolderUpdateBasicFieldsAction = DropFolderUpdateBasicFieldsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Ecm9wRm9sZGVyVXBkYXRlQmFzaWNGaWVsZHNBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHlEQUF3RDtBQUV4RCwrRUFBOEU7QUFDOUUsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXVELDZEQUFpQztJQUtwRiwyQ0FBWSxJQUE0QztlQUVwRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRyxxQ0FBaUIsRUFBRyxDQUFDO0lBQ3ZILENBQUM7SUFFUyx3REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUN2RSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUN0RCxZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsMkRBQTRCLEVBQUUsT0FBTyxFQUFHLDhCQUE4QixFQUFFO1NBQy9HLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx3Q0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJzRCxnQ0FBYyxHQXdCcEU7QUF4QlksOEVBQWlDIiwiZmlsZSI6ImFwaS90eXBlcy9Ecm9wRm9sZGVyVXBkYXRlQmFzaWNGaWVsZHNBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYURyb3BGb2xkZXIgfSBmcm9tICcuL0thbHR1cmFEcm9wRm9sZGVyJztcblxuaW1wb3J0IHsgS2FsdHVyYUJhc2ljRmllbGRzRHJvcEZvbGRlciB9IGZyb20gJy4vS2FsdHVyYUJhc2ljRmllbGRzRHJvcEZvbGRlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBEcm9wRm9sZGVyVXBkYXRlQmFzaWNGaWVsZHNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZHJvcEZvbGRlcklkIDogbnVtYmVyO1xuXHRkcm9wRm9sZGVyIDogS2FsdHVyYUJhc2ljRmllbGRzRHJvcEZvbGRlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2Ryb3BGb2xkZXInIGFjdGlvbiAndXBkYXRlQmFzaWNGaWVsZHMnLlxuICpcbiAqIFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFEcm9wRm9sZGVyXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBEcm9wRm9sZGVyVXBkYXRlQmFzaWNGaWVsZHNBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRHJvcEZvbGRlcj4ge1xuXG4gICAgZHJvcEZvbGRlcklkIDogbnVtYmVyO1xuXHRkcm9wRm9sZGVyIDogS2FsdHVyYUJhc2ljRmllbGRzRHJvcEZvbGRlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBEcm9wRm9sZGVyVXBkYXRlQmFzaWNGaWVsZHNBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFEcm9wRm9sZGVyJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFEcm9wRm9sZGVyICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdkcm9wZm9sZGVyX2Ryb3Bmb2xkZXInIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVCYXNpY0ZpZWxkcycgfSxcblx0XHRcdFx0ZHJvcEZvbGRlcklkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGRyb3BGb2xkZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFCYXNpY0ZpZWxkc0Ryb3BGb2xkZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUJhc2ljRmllbGRzRHJvcEZvbGRlcicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
