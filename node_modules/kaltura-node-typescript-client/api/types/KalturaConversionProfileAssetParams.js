"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaConversionProfileAssetParams = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaFlavorReadyBehaviorType_1 = require("./KalturaFlavorReadyBehaviorType");
var KalturaAssetParamsOrigin_1 = require("./KalturaAssetParamsOrigin");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaAssetParamsDeletePolicy_1 = require("./KalturaAssetParamsDeletePolicy");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaConversionProfileAssetParams = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaConversionProfileAssetParams, _super);
    function KalturaConversionProfileAssetParams(data) {
        return _super.call(this, data) || this;
    }
    KalturaConversionProfileAssetParams.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaConversionProfileAssetParams' },
            conversionProfileId: { type: 'n', readOnly: true },
            assetParamsId: { type: 'n', readOnly: true },
            readyBehavior: { type: 'en', subTypeConstructor: KalturaFlavorReadyBehaviorType_1.KalturaFlavorReadyBehaviorType, subType: 'KalturaFlavorReadyBehaviorType' },
            origin: { type: 'en', subTypeConstructor: KalturaAssetParamsOrigin_1.KalturaAssetParamsOrigin, subType: 'KalturaAssetParamsOrigin' },
            systemName: { type: 's' },
            forceNoneComplied: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            deletePolicy: { type: 'en', subTypeConstructor: KalturaAssetParamsDeletePolicy_1.KalturaAssetParamsDeletePolicy, subType: 'KalturaAssetParamsDeletePolicy' },
            isEncrypted: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            contentAwareness: { type: 'n' },
            chunkedEncodeMode: { type: 'n' },
            twoPass: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            tags: { type: 's' },
            overloadParams: { type: 's' }
        });
        return result;
    };
    return KalturaConversionProfileAssetParams;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaConversionProfileAssetParams = KalturaConversionProfileAssetParams;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaConversionProfileAssetParams', KalturaConversionProfileAssetParams);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1GQUFrRjtBQUNsRix1RUFBc0U7QUFDdEUsbUVBQWtFO0FBQ2xFLG1GQUFrRjtBQUNsRiw4REFBa0Y7QUFpQmxGO0lBQXlELCtEQUFpQjtJQWdCdEUsNkNBQVksSUFBK0M7ZUFFdkQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLDBEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHFDQUFxQyxFQUFFO1lBQ3hGLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3JELGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMvQyxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtEQUE4QixFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUNoSSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUM3RyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDcEgsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrREFBOEIsRUFBRSxPQUFPLEVBQUcsZ0NBQWdDLEVBQUU7WUFDL0gsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDOUcsZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNsQyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMxRyxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDdEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDBDQUFDO0FBQUQsQ0E3Q0EsQUE2Q0MsQ0E3Q3dELHVDQUFpQixHQTZDekU7QUE3Q1ksa0ZBQW1DO0FBK0NoRCwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMscUNBQXFDLEVBQUMsbUNBQW1DLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRmxhdm9yUmVhZHlCZWhhdmlvclR5cGUgfSBmcm9tICcuL0thbHR1cmFGbGF2b3JSZWFkeUJlaGF2aW9yVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhQXNzZXRQYXJhbXNPcmlnaW4gfSBmcm9tICcuL0thbHR1cmFBc3NldFBhcmFtc09yaWdpbic7XG5pbXBvcnQgeyBLYWx0dXJhTnVsbGFibGVCb29sZWFuIH0gZnJvbSAnLi9LYWx0dXJhTnVsbGFibGVCb29sZWFuJztcbmltcG9ydCB7IEthbHR1cmFBc3NldFBhcmFtc0RlbGV0ZVBvbGljeSB9IGZyb20gJy4vS2FsdHVyYUFzc2V0UGFyYW1zRGVsZXRlUG9saWN5JztcbmltcG9ydCB7IEthbHR1cmFPYmplY3RCYXNlLCBLYWx0dXJhT2JqZWN0QmFzZUFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtc0FyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICByZWFkeUJlaGF2aW9yPyA6IEthbHR1cmFGbGF2b3JSZWFkeUJlaGF2aW9yVHlwZTtcblx0b3JpZ2luPyA6IEthbHR1cmFBc3NldFBhcmFtc09yaWdpbjtcblx0c3lzdGVtTmFtZT8gOiBzdHJpbmc7XG5cdGZvcmNlTm9uZUNvbXBsaWVkPyA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW47XG5cdGRlbGV0ZVBvbGljeT8gOiBLYWx0dXJhQXNzZXRQYXJhbXNEZWxldGVQb2xpY3k7XG5cdGlzRW5jcnlwdGVkPyA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW47XG5cdGNvbnRlbnRBd2FyZW5lc3M/IDogbnVtYmVyO1xuXHRjaHVua2VkRW5jb2RlTW9kZT8gOiBudW1iZXI7XG5cdHR3b1Bhc3M/IDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbjtcblx0dGFncz8gOiBzdHJpbmc7XG5cdG92ZXJsb2FkUGFyYW1zPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICByZWFkb25seSBjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRyZWFkb25seSBhc3NldFBhcmFtc0lkIDogbnVtYmVyO1xuXHRyZWFkeUJlaGF2aW9yIDogS2FsdHVyYUZsYXZvclJlYWR5QmVoYXZpb3JUeXBlO1xuXHRvcmlnaW4gOiBLYWx0dXJhQXNzZXRQYXJhbXNPcmlnaW47XG5cdHN5c3RlbU5hbWUgOiBzdHJpbmc7XG5cdGZvcmNlTm9uZUNvbXBsaWVkIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbjtcblx0ZGVsZXRlUG9saWN5IDogS2FsdHVyYUFzc2V0UGFyYW1zRGVsZXRlUG9saWN5O1xuXHRpc0VuY3J5cHRlZCA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW47XG5cdGNvbnRlbnRBd2FyZW5lc3MgOiBudW1iZXI7XG5cdGNodW5rZWRFbmNvZGVNb2RlIDogbnVtYmVyO1xuXHR0d29QYXNzIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbjtcblx0dGFncyA6IHN0cmluZztcblx0b3ZlcmxvYWRQYXJhbXMgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFDb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFDb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zJyB9LFxuXHRcdFx0XHRjb252ZXJzaW9uUHJvZmlsZUlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0YXNzZXRQYXJhbXNJZCA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHJlYWR5QmVoYXZpb3IgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRmxhdm9yUmVhZHlCZWhhdmlvclR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUZsYXZvclJlYWR5QmVoYXZpb3JUeXBlJyB9LFxuXHRcdFx0XHRvcmlnaW4gOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQXNzZXRQYXJhbXNPcmlnaW4sIHN1YlR5cGUgOiAnS2FsdHVyYUFzc2V0UGFyYW1zT3JpZ2luJyB9LFxuXHRcdFx0XHRzeXN0ZW1OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGZvcmNlTm9uZUNvbXBsaWVkIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbiwgc3ViVHlwZSA6ICdLYWx0dXJhTnVsbGFibGVCb29sZWFuJyB9LFxuXHRcdFx0XHRkZWxldGVQb2xpY3kgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQXNzZXRQYXJhbXNEZWxldGVQb2xpY3ksIHN1YlR5cGUgOiAnS2FsdHVyYUFzc2V0UGFyYW1zRGVsZXRlUG9saWN5JyB9LFxuXHRcdFx0XHRpc0VuY3J5cHRlZCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFOdWxsYWJsZUJvb2xlYW4sIHN1YlR5cGUgOiAnS2FsdHVyYU51bGxhYmxlQm9vbGVhbicgfSxcblx0XHRcdFx0Y29udGVudEF3YXJlbmVzcyA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjaHVua2VkRW5jb2RlTW9kZSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR0d29QYXNzIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbiwgc3ViVHlwZSA6ICdLYWx0dXJhTnVsbGFibGVCb29sZWFuJyB9LFxuXHRcdFx0XHR0YWdzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG92ZXJsb2FkUGFyYW1zIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcycsS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMpO1xuIl19
