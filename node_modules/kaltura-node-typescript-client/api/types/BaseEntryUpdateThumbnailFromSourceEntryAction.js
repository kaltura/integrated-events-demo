"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseEntryUpdateThumbnailFromSourceEntryAction = void 0;
var tslib_1 = require("tslib");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'baseEntry' action 'updateThumbnailFromSourceEntry'.
 *
 * Usage: Update entry thumbnail from a different entry by a specified time offset (in seconds)
 *
 * Server response type:         KalturaBaseEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var BaseEntryUpdateThumbnailFromSourceEntryAction = /** @class */ (function (_super) {
    tslib_1.__extends(BaseEntryUpdateThumbnailFromSourceEntryAction, _super);
    function BaseEntryUpdateThumbnailFromSourceEntryAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBaseEntry', responseConstructor: KalturaBaseEntry_1.KalturaBaseEntry }) || this;
    }
    BaseEntryUpdateThumbnailFromSourceEntryAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'baseentry' },
            action: { type: 'c', default: 'updateThumbnailFromSourceEntry' },
            entryId: { type: 's' },
            sourceEntryId: { type: 's' },
            timeOffset: { type: 'n' }
        });
        return result;
    };
    return BaseEntryUpdateThumbnailFromSourceEntryAction;
}(kaltura_request_1.KalturaRequest));
exports.BaseEntryUpdateThumbnailFromSourceEntryAction = BaseEntryUpdateThumbnailFromSourceEntryAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CYXNlRW50cnlVcGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnlBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHVEQUFzRDtBQUV0RCxzREFBd0U7QUFReEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBbUUseUVBQWdDO0lBTS9GLHVEQUFZLElBQXdEO2VBRWhFLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGtCQUFrQixFQUFFLG1CQUFtQixFQUFHLG1DQUFnQixFQUFHLENBQUM7SUFDckgsQ0FBQztJQUVTLG9FQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUNuRSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNsQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsb0RBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCa0UsZ0NBQWMsR0EwQmhGO0FBMUJZLHNHQUE2QyIsImZpbGUiOiJhcGkvdHlwZXMvQmFzZUVudHJ5VXBkYXRlVGh1bWJuYWlsRnJvbVNvdXJjZUVudHJ5QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFCYXNlRW50cnkgfSBmcm9tICcuL0thbHR1cmFCYXNlRW50cnknO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlRW50cnlVcGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnlBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0c291cmNlRW50cnlJZCA6IHN0cmluZztcblx0dGltZU9mZnNldCA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2Jhc2VFbnRyeScgYWN0aW9uICd1cGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnknLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgZW50cnkgdGh1bWJuYWlsIGZyb20gYSBkaWZmZXJlbnQgZW50cnkgYnkgYSBzcGVjaWZpZWQgdGltZSBvZmZzZXQgKGluIHNlY29uZHMpXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUJhc2VFbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQmFzZUVudHJ5VXBkYXRlVGh1bWJuYWlsRnJvbVNvdXJjZUVudHJ5QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUJhc2VFbnRyeT4ge1xuXG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0c291cmNlRW50cnlJZCA6IHN0cmluZztcblx0dGltZU9mZnNldCA6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBCYXNlRW50cnlVcGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnlBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFCYXNlRW50cnknLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJhc2VFbnRyeSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYmFzZWVudHJ5JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlVGh1bWJuYWlsRnJvbVNvdXJjZUVudHJ5JyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNvdXJjZUVudHJ5SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dGltZU9mZnNldCA6IHsgdHlwZSA6ICduJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
