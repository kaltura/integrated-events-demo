"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaPlayableEntry = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDurationType_1 = require("./KalturaDurationType");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var KalturaPlayableEntry = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaPlayableEntry, _super);
    function KalturaPlayableEntry(data) {
        return _super.call(this, data) || this;
    }
    KalturaPlayableEntry.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaPlayableEntry' },
            plays: { type: 'n', readOnly: true },
            views: { type: 'n', readOnly: true },
            lastPlayedAt: { type: 'd', readOnly: true },
            width: { type: 'n', readOnly: true },
            height: { type: 'n', readOnly: true },
            duration: { type: 'n', readOnly: true },
            msDuration: { type: 'n' },
            durationType: { type: 'es', readOnly: true, subTypeConstructor: KalturaDurationType_1.KalturaDurationType, subType: 'KalturaDurationType' }
        });
        return result;
    };
    return KalturaPlayableEntry;
}(KalturaBaseEntry_1.KalturaBaseEntry));
exports.KalturaPlayableEntry = KalturaPlayableEntry;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaPlayableEntry', KalturaPlayableEntry);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUGxheWFibGVFbnRyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELDZEQUE0RDtBQUM1RCx1REFBNEU7QUFPNUU7SUFBMEMsZ0RBQWdCO0lBV3RELDhCQUFZLElBQWdDO2VBRXhDLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUywyQ0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxzQkFBc0IsRUFBRTtZQUN6RSxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDdkMsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3ZDLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUM5QyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDdkMsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3hDLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMxQyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx5Q0FBbUIsRUFBRSxPQUFPLEVBQUcscUJBQXFCLEVBQUU7U0FDakgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0FuQ0EsQUFtQ0MsQ0FuQ3lDLG1DQUFnQixHQW1DekQ7QUFuQ1ksb0RBQW9CO0FBcUNqQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsc0JBQXNCLEVBQUMsb0JBQW9CLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVBsYXlhYmxlRW50cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRHVyYXRpb25UeXBlIH0gZnJvbSAnLi9LYWx0dXJhRHVyYXRpb25UeXBlJztcbmltcG9ydCB7IEthbHR1cmFCYXNlRW50cnksIEthbHR1cmFCYXNlRW50cnlBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQmFzZUVudHJ5JztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhUGxheWFibGVFbnRyeUFyZ3MgIGV4dGVuZHMgS2FsdHVyYUJhc2VFbnRyeUFyZ3Mge1xuICAgIG1zRHVyYXRpb24/IDogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhUGxheWFibGVFbnRyeSBleHRlbmRzIEthbHR1cmFCYXNlRW50cnkge1xuXG4gICAgcmVhZG9ubHkgcGxheXMgOiBudW1iZXI7XG5cdHJlYWRvbmx5IHZpZXdzIDogbnVtYmVyO1xuXHRyZWFkb25seSBsYXN0UGxheWVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSB3aWR0aCA6IG51bWJlcjtcblx0cmVhZG9ubHkgaGVpZ2h0IDogbnVtYmVyO1xuXHRyZWFkb25seSBkdXJhdGlvbiA6IG51bWJlcjtcblx0bXNEdXJhdGlvbiA6IG51bWJlcjtcblx0cmVhZG9ubHkgZHVyYXRpb25UeXBlIDogS2FsdHVyYUR1cmF0aW9uVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYVBsYXlhYmxlRW50cnlBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVBsYXlhYmxlRW50cnknIH0sXG5cdFx0XHRcdHBsYXlzIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dmlld3MgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRsYXN0UGxheWVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHR3aWR0aCA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGhlaWdodCA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGR1cmF0aW9uIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bXNEdXJhdGlvbiA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRkdXJhdGlvblR5cGUgOiB7IHR5cGUgOiAnZXMnLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEdXJhdGlvblR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUR1cmF0aW9uVHlwZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFQbGF5YWJsZUVudHJ5JyxLYWx0dXJhUGxheWFibGVFbnRyeSk7XG4iXX0=
