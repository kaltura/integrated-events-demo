"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkUploadAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaBulkUpload_1 = require("./KalturaBulkUpload");
var KalturaBulkUploadType_1 = require("./KalturaBulkUploadType");
var kaltura_upload_request_1 = require("../kaltura-upload-request");
/**
 * Build request payload for service 'bulkUpload' action 'add'.
 *
 * Usage: Add new bulk upload batch job
 * Conversion profile id can be specified in the API or in the CSV file, the one in the CSV file will be stronger.
 * If no conversion profile was specified, partner's default will be used
 *
 * Server response type:         KalturaBulkUpload
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaUploadRequest
 */
var BulkUploadAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(BulkUploadAddAction, _super);
    function BulkUploadAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBulkUpload', responseConstructor: KalturaBulkUpload_1.KalturaBulkUpload }) || this;
    }
    BulkUploadAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'bulkupload' },
            action: { type: 'c', default: 'add' },
            conversionProfileId: { type: 'n' },
            csvFileData: { type: 'f' },
            bulkUploadType: { type: 'es', subTypeConstructor: KalturaBulkUploadType_1.KalturaBulkUploadType, subType: 'KalturaBulkUploadType' },
            uploadedBy: { type: 's' },
            fileName: { type: 's' }
        });
        return result;
    };
    return BulkUploadAddAction;
}(kaltura_upload_request_1.KalturaUploadRequest));
exports.BulkUploadAddAction = BulkUploadAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CdWxrVXBsb2FkQWRkQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx5REFBd0Q7QUFFeEQsaUVBQWdFO0FBQ2hFLG9FQUEyRjtBQVUzRjs7Ozs7Ozs7Ozs7R0FXRztBQUNIO0lBQXlDLCtDQUF1QztJQVE1RSw2QkFBWSxJQUE4QjtlQUV0QyxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRyxxQ0FBaUIsRUFBRyxDQUFDO0lBQ3ZILENBQUM7SUFFUywwQ0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxZQUFZLEVBQUU7WUFDNUQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsS0FBSyxFQUFFO1lBQ3hDLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNwQyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsNkNBQXFCLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQy9HLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNoQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMEJBQUM7QUFBRCxDQTlCQSxBQThCQyxDQTlCd0MsNkNBQW9CLEdBOEI1RDtBQTlCWSxrREFBbUIiLCJmaWxlIjoiYXBpL3R5cGVzL0J1bGtVcGxvYWRBZGRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUJ1bGtVcGxvYWQgfSBmcm9tICcuL0thbHR1cmFCdWxrVXBsb2FkJztcblxuaW1wb3J0IHsgS2FsdHVyYUJ1bGtVcGxvYWRUeXBlIH0gZnJvbSAnLi9LYWx0dXJhQnVsa1VwbG9hZFR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVVwbG9hZFJlcXVlc3QsIEthbHR1cmFVcGxvYWRSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtdXBsb2FkLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1bGtVcGxvYWRBZGRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFVcGxvYWRSZXF1ZXN0QXJncyB7XG4gICAgY29udmVyc2lvblByb2ZpbGVJZCA6IG51bWJlcjtcblx0Y3N2RmlsZURhdGEgOiBGaWxlO1xuXHRidWxrVXBsb2FkVHlwZT8gOiBLYWx0dXJhQnVsa1VwbG9hZFR5cGU7XG5cdHVwbG9hZGVkQnk/IDogc3RyaW5nO1xuXHRmaWxlTmFtZT8gOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdidWxrVXBsb2FkJyBhY3Rpb24gJ2FkZCcuXG4gKlxuICogVXNhZ2U6IEFkZCBuZXcgYnVsayB1cGxvYWQgYmF0Y2ggam9iXG4gKiBDb252ZXJzaW9uIHByb2ZpbGUgaWQgY2FuIGJlIHNwZWNpZmllZCBpbiB0aGUgQVBJIG9yIGluIHRoZSBDU1YgZmlsZSwgdGhlIG9uZSBpbiB0aGUgQ1NWIGZpbGUgd2lsbCBiZSBzdHJvbmdlci5cbiAqIElmIG5vIGNvbnZlcnNpb24gcHJvZmlsZSB3YXMgc3BlY2lmaWVkLCBwYXJ0bmVyJ3MgZGVmYXVsdCB3aWxsIGJlIHVzZWRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQnVsa1VwbG9hZFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhVXBsb2FkUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQnVsa1VwbG9hZEFkZEFjdGlvbiBleHRlbmRzIEthbHR1cmFVcGxvYWRSZXF1ZXN0PEthbHR1cmFCdWxrVXBsb2FkPiB7XG5cbiAgICBjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRjc3ZGaWxlRGF0YSA6IEZpbGU7XG5cdGJ1bGtVcGxvYWRUeXBlIDogS2FsdHVyYUJ1bGtVcGxvYWRUeXBlO1xuXHR1cGxvYWRlZEJ5IDogc3RyaW5nO1xuXHRmaWxlTmFtZSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBCdWxrVXBsb2FkQWRkQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1VwbG9hZCAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYnVsa3VwbG9hZCcgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2FkZCcgfSxcblx0XHRcdFx0Y29udmVyc2lvblByb2ZpbGVJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjc3ZGaWxlRGF0YSA6IHsgdHlwZSA6ICdmJyB9LFxuXHRcdFx0XHRidWxrVXBsb2FkVHlwZSA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFCdWxrVXBsb2FkVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZFR5cGUnIH0sXG5cdFx0XHRcdHVwbG9hZGVkQnkgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZmlsZU5hbWUgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
