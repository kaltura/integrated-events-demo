"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropFolderFileAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaDropFolderFile_1 = require("./KalturaDropFolderFile");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'dropFolderFile' action 'add'.
 *
 * Usage: Allows you to add a new KalturaDropFolderFile object
 *
 * Server response type:         KalturaDropFolderFile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DropFolderFileAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(DropFolderFileAddAction, _super);
    function DropFolderFileAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDropFolderFile', responseConstructor: KalturaDropFolderFile_1.KalturaDropFolderFile }) || this;
    }
    DropFolderFileAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'dropfolder_dropfolderfile' },
            action: { type: 'c', default: 'add' },
            dropFolderFile: { type: 'o', subTypeConstructor: KalturaDropFolderFile_1.KalturaDropFolderFile, subType: 'KalturaDropFolderFile' }
        });
        return result;
    };
    return DropFolderFileAddAction;
}(kaltura_request_1.KalturaRequest));
exports.DropFolderFileAddAction = DropFolderFileAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Ecm9wRm9sZGVyRmlsZUFkZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsaUVBQWdFO0FBRWhFLHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUE2QyxtREFBcUM7SUFJOUUsaUNBQVksSUFBa0M7ZUFFMUMsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsdUJBQXVCLEVBQUUsbUJBQW1CLEVBQUcsNkNBQXFCLEVBQUcsQ0FBQztJQUMvSCxDQUFDO0lBRVMsOENBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMkJBQTJCLEVBQUU7WUFDM0UsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsS0FBSyxFQUFFO1lBQ3hDLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkNBQXFCLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1NBQ3JHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw4QkFBQztBQUFELENBdEJBLEFBc0JDLENBdEI0QyxnQ0FBYyxHQXNCMUQ7QUF0QlksMERBQXVCIiwiZmlsZSI6ImFwaS90eXBlcy9Ecm9wRm9sZGVyRmlsZUFkZEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhRHJvcEZvbGRlckZpbGUgfSBmcm9tICcuL0thbHR1cmFEcm9wRm9sZGVyRmlsZSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERyb3BGb2xkZXJGaWxlQWRkQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGRyb3BGb2xkZXJGaWxlIDogS2FsdHVyYURyb3BGb2xkZXJGaWxlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnZHJvcEZvbGRlckZpbGUnIGFjdGlvbiAnYWRkJy5cbiAqXG4gKiBVc2FnZTogQWxsb3dzIHlvdSB0byBhZGQgYSBuZXcgS2FsdHVyYURyb3BGb2xkZXJGaWxlIG9iamVjdFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFEcm9wRm9sZGVyRmlsZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRHJvcEZvbGRlckZpbGVBZGRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRHJvcEZvbGRlckZpbGU+IHtcblxuICAgIGRyb3BGb2xkZXJGaWxlIDogS2FsdHVyYURyb3BGb2xkZXJGaWxlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IERyb3BGb2xkZXJGaWxlQWRkQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhRHJvcEZvbGRlckZpbGUnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYURyb3BGb2xkZXJGaWxlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdkcm9wZm9sZGVyX2Ryb3Bmb2xkZXJmaWxlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYWRkJyB9LFxuXHRcdFx0XHRkcm9wRm9sZGVyRmlsZSA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURyb3BGb2xkZXJGaWxlLCBzdWJUeXBlIDogJ0thbHR1cmFEcm9wRm9sZGVyRmlsZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
