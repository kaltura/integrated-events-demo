"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseEntryUpdateContentAction = void 0;
var tslib_1 = require("tslib");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var KalturaResource_1 = require("./KalturaResource");
var KalturaEntryReplacementOptions_1 = require("./KalturaEntryReplacementOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'baseEntry' action 'updateContent'.
 *
 * Usage: Update the content resource associated with the entry
 *
 * Server response type:         KalturaBaseEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var BaseEntryUpdateContentAction = /** @class */ (function (_super) {
    tslib_1.__extends(BaseEntryUpdateContentAction, _super);
    function BaseEntryUpdateContentAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBaseEntry', responseConstructor: KalturaBaseEntry_1.KalturaBaseEntry }) || this;
    }
    BaseEntryUpdateContentAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'baseentry' },
            action: { type: 'c', default: 'updateContent' },
            entryId: { type: 's' },
            resource: { type: 'o', subTypeConstructor: KalturaResource_1.KalturaResource, subType: 'KalturaResource' },
            conversionProfileId: { type: 'n' },
            advancedOptions: { type: 'o', subTypeConstructor: KalturaEntryReplacementOptions_1.KalturaEntryReplacementOptions, subType: 'KalturaEntryReplacementOptions' }
        });
        return result;
    };
    return BaseEntryUpdateContentAction;
}(kaltura_request_1.KalturaRequest));
exports.BaseEntryUpdateContentAction = BaseEntryUpdateContentAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CYXNlRW50cnlVcGRhdGVDb250ZW50QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx1REFBc0Q7QUFFdEQscURBQW9EO0FBQ3BELG1GQUFrRjtBQUNsRixzREFBd0U7QUFTeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBa0Qsd0RBQWdDO0lBTzlFLHNDQUFZLElBQXVDO2VBRS9DLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGtCQUFrQixFQUFFLG1CQUFtQixFQUFHLG1DQUFnQixFQUFHLENBQUM7SUFDckgsQ0FBQztJQUVTLG1EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDbEQsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQzVGLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNwQyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLCtEQUE4QixFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtTQUN4SCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsbUNBQUM7QUFBRCxDQTVCQSxBQTRCQyxDQTVCaUQsZ0NBQWMsR0E0Qi9EO0FBNUJZLG9FQUE0QiIsImZpbGUiOiJhcGkvdHlwZXMvQmFzZUVudHJ5VXBkYXRlQ29udGVudEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQmFzZUVudHJ5IH0gZnJvbSAnLi9LYWx0dXJhQmFzZUVudHJ5JztcblxuaW1wb3J0IHsgS2FsdHVyYVJlc291cmNlIH0gZnJvbSAnLi9LYWx0dXJhUmVzb3VyY2UnO1xuaW1wb3J0IHsgS2FsdHVyYUVudHJ5UmVwbGFjZW1lbnRPcHRpb25zIH0gZnJvbSAnLi9LYWx0dXJhRW50cnlSZXBsYWNlbWVudE9wdGlvbnMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUVudHJ5VXBkYXRlQ29udGVudEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRyZXNvdXJjZSA6IEthbHR1cmFSZXNvdXJjZTtcblx0Y29udmVyc2lvblByb2ZpbGVJZD8gOiBudW1iZXI7XG5cdGFkdmFuY2VkT3B0aW9ucz8gOiBLYWx0dXJhRW50cnlSZXBsYWNlbWVudE9wdGlvbnM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdiYXNlRW50cnknIGFjdGlvbiAndXBkYXRlQ29udGVudCcuXG4gKlxuICogVXNhZ2U6IFVwZGF0ZSB0aGUgY29udGVudCByZXNvdXJjZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVudHJ5XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUJhc2VFbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQmFzZUVudHJ5VXBkYXRlQ29udGVudEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFCYXNlRW50cnk+IHtcblxuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdHJlc291cmNlIDogS2FsdHVyYVJlc291cmNlO1xuXHRjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRhZHZhbmNlZE9wdGlvbnMgOiBLYWx0dXJhRW50cnlSZXBsYWNlbWVudE9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogQmFzZUVudHJ5VXBkYXRlQ29udGVudEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUJhc2VFbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmFzZUVudHJ5ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdiYXNlZW50cnknIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVDb250ZW50JyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlc291cmNlIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVzb3VyY2UsIHN1YlR5cGUgOiAnS2FsdHVyYVJlc291cmNlJyB9LFxuXHRcdFx0XHRjb252ZXJzaW9uUHJvZmlsZUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGFkdmFuY2VkT3B0aW9ucyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5UmVwbGFjZW1lbnRPcHRpb25zLCBzdWJUeXBlIDogJ0thbHR1cmFFbnRyeVJlcGxhY2VtZW50T3B0aW9ucycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
