"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaGenericXsltSyndicationFeed = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaExtendingItemMrssParameter_1 = require("./KalturaExtendingItemMrssParameter");
var KalturaGenericSyndicationFeed_1 = require("./KalturaGenericSyndicationFeed");
var KalturaGenericXsltSyndicationFeed = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaGenericXsltSyndicationFeed, _super);
    function KalturaGenericXsltSyndicationFeed(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.itemXpathsToExtend === 'undefined')
            _this.itemXpathsToExtend = [];
        return _this;
    }
    KalturaGenericXsltSyndicationFeed.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaGenericXsltSyndicationFeed' },
            xslt: { type: 's' },
            itemXpathsToExtend: { type: 'a', subTypeConstructor: KalturaExtendingItemMrssParameter_1.KalturaExtendingItemMrssParameter, subType: 'KalturaExtendingItemMrssParameter' }
        });
        return result;
    };
    return KalturaGenericXsltSyndicationFeed;
}(KalturaGenericSyndicationFeed_1.KalturaGenericSyndicationFeed));
exports.KalturaGenericXsltSyndicationFeed = KalturaGenericXsltSyndicationFeed;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaGenericXsltSyndicationFeed', KalturaGenericXsltSyndicationFeed);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY1hzbHRTeW5kaWNhdGlvbkZlZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCx5RkFBd0Y7QUFDeEYsaUZBQW1IO0FBUW5IO0lBQXVELDZEQUE2QjtJQUtoRiwyQ0FBWSxJQUE2QztRQUF6RCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUVkO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxrQkFBa0IsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQzs7SUFDckYsQ0FBQztJQUVTLHdEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG1DQUFtQyxFQUFFO1lBQ3RGLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsa0JBQWtCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHFFQUFpQyxFQUFFLE9BQU8sRUFBRyxtQ0FBbUMsRUFBRTtTQUNqSSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsd0NBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCc0QsNkRBQTZCLEdBd0JuRjtBQXhCWSw4RUFBaUM7QUEwQjlDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxtQ0FBbUMsRUFBQyxpQ0FBaUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY1hzbHRTeW5kaWNhdGlvbkZlZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRXh0ZW5kaW5nSXRlbU1yc3NQYXJhbWV0ZXIgfSBmcm9tICcuL0thbHR1cmFFeHRlbmRpbmdJdGVtTXJzc1BhcmFtZXRlcic7XG5pbXBvcnQgeyBLYWx0dXJhR2VuZXJpY1N5bmRpY2F0aW9uRmVlZCwgS2FsdHVyYUdlbmVyaWNTeW5kaWNhdGlvbkZlZWRBcmdzIH0gZnJvbSAnLi9LYWx0dXJhR2VuZXJpY1N5bmRpY2F0aW9uRmVlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUdlbmVyaWNYc2x0U3luZGljYXRpb25GZWVkQXJncyAgZXh0ZW5kcyBLYWx0dXJhR2VuZXJpY1N5bmRpY2F0aW9uRmVlZEFyZ3Mge1xuICAgIHhzbHQ/IDogc3RyaW5nO1xuXHRpdGVtWHBhdGhzVG9FeHRlbmQ/IDogS2FsdHVyYUV4dGVuZGluZ0l0ZW1NcnNzUGFyYW1ldGVyW107XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFHZW5lcmljWHNsdFN5bmRpY2F0aW9uRmVlZCBleHRlbmRzIEthbHR1cmFHZW5lcmljU3luZGljYXRpb25GZWVkIHtcblxuICAgIHhzbHQgOiBzdHJpbmc7XG5cdGl0ZW1YcGF0aHNUb0V4dGVuZCA6IEthbHR1cmFFeHRlbmRpbmdJdGVtTXJzc1BhcmFtZXRlcltdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhR2VuZXJpY1hzbHRTeW5kaWNhdGlvbkZlZWRBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtWHBhdGhzVG9FeHRlbmQgPT09ICd1bmRlZmluZWQnKSB0aGlzLml0ZW1YcGF0aHNUb0V4dGVuZCA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFHZW5lcmljWHNsdFN5bmRpY2F0aW9uRmVlZCcgfSxcblx0XHRcdFx0eHNsdCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRpdGVtWHBhdGhzVG9FeHRlbmQgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFeHRlbmRpbmdJdGVtTXJzc1BhcmFtZXRlciwgc3ViVHlwZSA6ICdLYWx0dXJhRXh0ZW5kaW5nSXRlbU1yc3NQYXJhbWV0ZXInIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhR2VuZXJpY1hzbHRTeW5kaWNhdGlvbkZlZWQnLEthbHR1cmFHZW5lcmljWHNsdFN5bmRpY2F0aW9uRmVlZCk7XG4iXX0=
