"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseEntryExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaBaseEntryFilter_1 = require("./KalturaBaseEntryFilter");
var KalturaCsvAdditionalFieldInfo_1 = require("./KalturaCsvAdditionalFieldInfo");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaExportToCsvOptions_1 = require("./KalturaExportToCsvOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'baseEntry' action 'exportToCsv'.
 *
 * Usage: add batch job that sends an email with a link to download an updated CSV that contains list of entries
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var BaseEntryExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(BaseEntryExportToCsvAction, _super);
    function BaseEntryExportToCsvAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.additionalFields === 'undefined')
            _this.additionalFields = [];
        if (typeof _this.mappedFields === 'undefined')
            _this.mappedFields = [];
        return _this;
    }
    BaseEntryExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'baseentry' },
            action: { type: 'c', default: 'exportToCsv' },
            filter: { type: 'o', subTypeConstructor: KalturaBaseEntryFilter_1.KalturaBaseEntryFilter, subType: 'KalturaBaseEntryFilter' },
            metadataProfileId: { type: 'n' },
            additionalFields: { type: 'a', subTypeConstructor: KalturaCsvAdditionalFieldInfo_1.KalturaCsvAdditionalFieldInfo, subType: 'KalturaCsvAdditionalFieldInfo' },
            mappedFields: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            options: { type: 'o', subTypeConstructor: KalturaExportToCsvOptions_1.KalturaExportToCsvOptions, subType: 'KalturaExportToCsvOptions' }
        });
        return result;
    };
    return BaseEntryExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.BaseEntryExportToCsvAction = BaseEntryExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CYXNlRW50cnlFeHBvcnRUb0NzdkFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsbUVBQWtFO0FBQ2xFLGlGQUFnRjtBQUNoRixxREFBb0Q7QUFDcEQseUVBQXdFO0FBQ3hFLHNEQUF3RTtBQVV4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFnRCxzREFBc0I7SUFRbEUsb0NBQVksSUFBc0M7UUFBbEQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUMsU0FHdkY7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLGdCQUFnQixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQ25GLElBQUksT0FBTyxLQUFJLENBQUMsWUFBWSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQzs7SUFDbkUsQ0FBQztJQUVTLGlEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxhQUFhLEVBQUU7WUFDaEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDeEcsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2xDLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2REFBNkIsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7WUFDaEksWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpQ0FBZSxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtZQUNoRyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtTQUN0RyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQWhDQSxBQWdDQyxDQWhDK0MsZ0NBQWMsR0FnQzdEO0FBaENZLGdFQUEwQiIsImZpbGUiOiJhcGkvdHlwZXMvQmFzZUVudHJ5RXhwb3J0VG9Dc3ZBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFCYXNlRW50cnlGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFCYXNlRW50cnlGaWx0ZXInO1xuaW1wb3J0IHsgS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8gfSBmcm9tICcuL0thbHR1cmFDc3ZBZGRpdGlvbmFsRmllbGRJbmZvJztcbmltcG9ydCB7IEthbHR1cmFLZXlWYWx1ZSB9IGZyb20gJy4vS2FsdHVyYUtleVZhbHVlJztcbmltcG9ydCB7IEthbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnMgfSBmcm9tICcuL0thbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUVudHJ5RXhwb3J0VG9Dc3ZBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZmlsdGVyPyA6IEthbHR1cmFCYXNlRW50cnlGaWx0ZXI7XG5cdG1ldGFkYXRhUHJvZmlsZUlkPyA6IG51bWJlcjtcblx0YWRkaXRpb25hbEZpZWxkcz8gOiBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mb1tdO1xuXHRtYXBwZWRGaWVsZHM/IDogS2FsdHVyYUtleVZhbHVlW107XG5cdG9wdGlvbnM/IDogS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2Jhc2VFbnRyeScgYWN0aW9uICdleHBvcnRUb0NzdicuXG4gKlxuICogVXNhZ2U6IGFkZCBiYXRjaCBqb2IgdGhhdCBzZW5kcyBhbiBlbWFpbCB3aXRoIGEgbGluayB0byBkb3dubG9hZCBhbiB1cGRhdGVkIENTViB0aGF0IGNvbnRhaW5zIGxpc3Qgb2YgZW50cmllc1xuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIHN0cmluZ1xuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQmFzZUVudHJ5RXhwb3J0VG9Dc3ZBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxzdHJpbmc+IHtcblxuICAgIGZpbHRlciA6IEthbHR1cmFCYXNlRW50cnlGaWx0ZXI7XG5cdG1ldGFkYXRhUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRhZGRpdGlvbmFsRmllbGRzIDogS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm9bXTtcblx0bWFwcGVkRmllbGRzIDogS2FsdHVyYUtleVZhbHVlW107XG5cdG9wdGlvbnMgOiBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBCYXNlRW50cnlFeHBvcnRUb0NzdkFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ3MnLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5hZGRpdGlvbmFsRmllbGRzID09PSAndW5kZWZpbmVkJykgdGhpcy5hZGRpdGlvbmFsRmllbGRzID0gW107XG5cdFx0aWYgKHR5cGVvZiB0aGlzLm1hcHBlZEZpZWxkcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMubWFwcGVkRmllbGRzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYmFzZWVudHJ5JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhwb3J0VG9Dc3YnIH0sXG5cdFx0XHRcdGZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJhc2VFbnRyeUZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhQmFzZUVudHJ5RmlsdGVyJyB9LFxuXHRcdFx0XHRtZXRhZGF0YVByb2ZpbGVJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRhZGRpdGlvbmFsRmllbGRzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mbywgc3ViVHlwZSA6ICdLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mbycgfSxcblx0XHRcdFx0bWFwcGVkRmllbGRzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhS2V5VmFsdWUsIHN1YlR5cGUgOiAnS2FsdHVyYUtleVZhbHVlJyB9LFxuXHRcdFx0XHRvcHRpb25zIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zLCBzdWJUeXBlIDogJ0thbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnMnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
