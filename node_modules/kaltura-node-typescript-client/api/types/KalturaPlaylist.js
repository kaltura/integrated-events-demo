"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaPlaylist = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaMediaEntryFilterForPlaylist_1 = require("./KalturaMediaEntryFilterForPlaylist");
var KalturaPlaylistType_1 = require("./KalturaPlaylistType");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var KalturaPlaylist = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaPlaylist, _super);
    function KalturaPlaylist(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.filters === 'undefined')
            _this.filters = [];
        return _this;
    }
    KalturaPlaylist.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaPlaylist' },
            playlistContent: { type: 's' },
            filters: { type: 'a', subTypeConstructor: KalturaMediaEntryFilterForPlaylist_1.KalturaMediaEntryFilterForPlaylist, subType: 'KalturaMediaEntryFilterForPlaylist' },
            totalResults: { type: 'n' },
            playlistType: { type: 'en', subTypeConstructor: KalturaPlaylistType_1.KalturaPlaylistType, subType: 'KalturaPlaylistType' },
            plays: { type: 'n', readOnly: true },
            views: { type: 'n', readOnly: true },
            duration: { type: 'n', readOnly: true },
            executeUrl: { type: 's', readOnly: true }
        });
        return result;
    };
    return KalturaPlaylist;
}(KalturaBaseEntry_1.KalturaBaseEntry));
exports.KalturaPlaylist = KalturaPlaylist;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaPlaylist', KalturaPlaylist);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUGxheWxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwyRkFBMEY7QUFDMUYsNkRBQTREO0FBQzVELHVEQUE0RTtBQVU1RTtJQUFxQywyQ0FBZ0I7SUFXakQseUJBQVksSUFBMkI7UUFBdkMsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7SUFDL0QsQ0FBQztJQUVTLHNDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ3BFLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx1RUFBa0MsRUFBRSxPQUFPLEVBQUcsb0NBQW9DLEVBQUU7WUFDakksWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUN6RyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDdkMsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3ZDLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMxQyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7U0FDbkMsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FwQ0EsQUFvQ0MsQ0FwQ29DLG1DQUFnQixHQW9DcEQ7QUFwQ1ksMENBQWU7QUFzQzVCLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxpQkFBaUIsRUFBQyxlQUFlLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVBsYXlsaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYU1lZGlhRW50cnlGaWx0ZXJGb3JQbGF5bGlzdCB9IGZyb20gJy4vS2FsdHVyYU1lZGlhRW50cnlGaWx0ZXJGb3JQbGF5bGlzdCc7XG5pbXBvcnQgeyBLYWx0dXJhUGxheWxpc3RUeXBlIH0gZnJvbSAnLi9LYWx0dXJhUGxheWxpc3RUeXBlJztcbmltcG9ydCB7IEthbHR1cmFCYXNlRW50cnksIEthbHR1cmFCYXNlRW50cnlBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQmFzZUVudHJ5JztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhUGxheWxpc3RBcmdzICBleHRlbmRzIEthbHR1cmFCYXNlRW50cnlBcmdzIHtcbiAgICBwbGF5bGlzdENvbnRlbnQ/IDogc3RyaW5nO1xuXHRmaWx0ZXJzPyA6IEthbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3RbXTtcblx0dG90YWxSZXN1bHRzPyA6IG51bWJlcjtcblx0cGxheWxpc3RUeXBlPyA6IEthbHR1cmFQbGF5bGlzdFR5cGU7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFQbGF5bGlzdCBleHRlbmRzIEthbHR1cmFCYXNlRW50cnkge1xuXG4gICAgcGxheWxpc3RDb250ZW50IDogc3RyaW5nO1xuXHRmaWx0ZXJzIDogS2FsdHVyYU1lZGlhRW50cnlGaWx0ZXJGb3JQbGF5bGlzdFtdO1xuXHR0b3RhbFJlc3VsdHMgOiBudW1iZXI7XG5cdHBsYXlsaXN0VHlwZSA6IEthbHR1cmFQbGF5bGlzdFR5cGU7XG5cdHJlYWRvbmx5IHBsYXlzIDogbnVtYmVyO1xuXHRyZWFkb25seSB2aWV3cyA6IG51bWJlcjtcblx0cmVhZG9ubHkgZHVyYXRpb24gOiBudW1iZXI7XG5cdHJlYWRvbmx5IGV4ZWN1dGVVcmwgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFQbGF5bGlzdEFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZpbHRlcnMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmZpbHRlcnMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhUGxheWxpc3QnIH0sXG5cdFx0XHRcdHBsYXlsaXN0Q29udGVudCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmaWx0ZXJzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWVkaWFFbnRyeUZpbHRlckZvclBsYXlsaXN0LCBzdWJUeXBlIDogJ0thbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3QnIH0sXG5cdFx0XHRcdHRvdGFsUmVzdWx0cyA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRwbGF5bGlzdFR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUGxheWxpc3RUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFQbGF5bGlzdFR5cGUnIH0sXG5cdFx0XHRcdHBsYXlzIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dmlld3MgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRkdXJhdGlvbiA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGV4ZWN1dGVVcmwgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVBsYXlsaXN0JyxLYWx0dXJhUGxheWxpc3QpO1xuIl19
