"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaExternalMediaEntryCompareAttributeCondition = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaExternalMediaEntryCompareAttribute_1 = require("./KalturaExternalMediaEntryCompareAttribute");
var KalturaSearchComparableAttributeCondition_1 = require("./KalturaSearchComparableAttributeCondition");
var KalturaExternalMediaEntryCompareAttributeCondition = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaExternalMediaEntryCompareAttributeCondition, _super);
    function KalturaExternalMediaEntryCompareAttributeCondition(data) {
        return _super.call(this, data) || this;
    }
    KalturaExternalMediaEntryCompareAttributeCondition.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaExternalMediaEntryCompareAttributeCondition' },
            attribute: { type: 'es', subTypeConstructor: KalturaExternalMediaEntryCompareAttribute_1.KalturaExternalMediaEntryCompareAttribute, subType: 'KalturaExternalMediaEntryCompareAttribute' }
        });
        return result;
    };
    return KalturaExternalMediaEntryCompareAttributeCondition;
}(KalturaSearchComparableAttributeCondition_1.KalturaSearchComparableAttributeCondition));
exports.KalturaExternalMediaEntryCompareAttributeCondition = KalturaExternalMediaEntryCompareAttributeCondition;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaExternalMediaEntryCompareAttributeCondition', KalturaExternalMediaEntryCompareAttributeCondition);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHlHQUF3RztBQUN4Ryx5R0FBdUo7QUFPdko7SUFBd0UsOEVBQXlDO0lBSTdHLDREQUFZLElBQThEO2VBRXRFLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyx5RUFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvREFBb0QsRUFBRTtZQUN2RyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFGQUF5QyxFQUFFLE9BQU8sRUFBRywyQ0FBMkMsRUFBRTtTQUN6SSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wseURBQUM7QUFBRCxDQXJCQSxBQXFCQyxDQXJCdUUscUZBQXlDLEdBcUJoSDtBQXJCWSxnSEFBa0Q7QUF1Qi9ELDJDQUFtQixDQUFDLFlBQVksQ0FBQyxvREFBb0QsRUFBQyxrREFBa0QsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFFeHRlcm5hbE1lZGlhRW50cnlDb21wYXJlQXR0cmlidXRlIH0gZnJvbSAnLi9LYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZSc7XG5pbXBvcnQgeyBLYWx0dXJhU2VhcmNoQ29tcGFyYWJsZUF0dHJpYnV0ZUNvbmRpdGlvbiwgS2FsdHVyYVNlYXJjaENvbXBhcmFibGVBdHRyaWJ1dGVDb25kaXRpb25BcmdzIH0gZnJvbSAnLi9LYWx0dXJhU2VhcmNoQ29tcGFyYWJsZUF0dHJpYnV0ZUNvbmRpdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUV4dGVybmFsTWVkaWFFbnRyeUNvbXBhcmVBdHRyaWJ1dGVDb25kaXRpb25BcmdzICBleHRlbmRzIEthbHR1cmFTZWFyY2hDb21wYXJhYmxlQXR0cmlidXRlQ29uZGl0aW9uQXJncyB7XG4gICAgYXR0cmlidXRlPyA6IEthbHR1cmFFeHRlcm5hbE1lZGlhRW50cnlDb21wYXJlQXR0cmlidXRlO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbiBleHRlbmRzIEthbHR1cmFTZWFyY2hDb21wYXJhYmxlQXR0cmlidXRlQ29uZGl0aW9uIHtcblxuICAgIGF0dHJpYnV0ZSA6IEthbHR1cmFFeHRlcm5hbE1lZGlhRW50cnlDb21wYXJlQXR0cmlidXRlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbicgfSxcblx0XHRcdFx0YXR0cmlidXRlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUV4dGVybmFsTWVkaWFFbnRyeUNvbXBhcmVBdHRyaWJ1dGUsIHN1YlR5cGUgOiAnS2FsdHVyYUV4dGVybmFsTWVkaWFFbnRyeUNvbXBhcmVBdHRyaWJ1dGUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhRXh0ZXJuYWxNZWRpYUVudHJ5Q29tcGFyZUF0dHJpYnV0ZUNvbmRpdGlvbicsS2FsdHVyYUV4dGVybmFsTWVkaWFFbnRyeUNvbXBhcmVBdHRyaWJ1dGVDb25kaXRpb24pO1xuIl19
