"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEntryVendorTaskBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEntryVendorTaskStatus_1 = require("./KalturaEntryVendorTaskStatus");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaEntryVendorTaskBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEntryVendorTaskBaseFilter, _super);
    function KalturaEntryVendorTaskBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaEntryVendorTaskBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEntryVendorTaskBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            idNotIn: { type: 's' },
            vendorPartnerIdEqual: { type: 'n' },
            vendorPartnerIdIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            queueTimeGreaterThanOrEqual: { type: 'd' },
            queueTimeLessThanOrEqual: { type: 'd' },
            finishTimeGreaterThanOrEqual: { type: 'd' },
            finishTimeLessThanOrEqual: { type: 'd' },
            entryIdEqual: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaEntryVendorTaskStatus_1.KalturaEntryVendorTaskStatus, subType: 'KalturaEntryVendorTaskStatus' },
            statusIn: { type: 's' },
            reachProfileIdEqual: { type: 'n' },
            reachProfileIdIn: { type: 's' },
            catalogItemIdEqual: { type: 'n' },
            catalogItemIdIn: { type: 's' },
            userIdEqual: { type: 's' },
            contextEqual: { type: 's' },
            expectedFinishTimeGreaterThanOrEqual: { type: 'd' },
            expectedFinishTimeLessThanOrEqual: { type: 'd' }
        });
        return result;
    };
    return KalturaEntryVendorTaskBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaEntryVendorTaskBaseFilter = KalturaEntryVendorTaskBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEntryVendorTaskBaseFilter', KalturaEntryVendorTaskBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELCtFQUE4RTtBQUM5RSwrREFBd0Y7QUE4QnhGO0lBQXNELDREQUFvQjtJQTJCdEUsMENBQVksSUFBNEM7ZUFFcEQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLHVEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGtDQUFrQyxFQUFFO1lBQ3JGLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLG9CQUFvQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQyxpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbEMsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVDLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QywyQkFBMkIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUMsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsNEJBQTRCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdDLHlCQUF5QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQyxZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsMkRBQTRCLEVBQUUsT0FBTyxFQUFHLDhCQUE4QixFQUFFO1lBQzFILFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3BDLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNqQyxrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbkMsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0Isb0NBQW9DLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JELGlDQUFpQyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN6QyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQW5FQSxBQW1FQyxDQW5FcUQsMkNBQW9CLEdBbUV6RTtBQW5FWSw0RUFBZ0M7QUFxRTdDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxrQ0FBa0MsRUFBQyxnQ0FBZ0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFFbnRyeVZlbmRvclRhc2tTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFFbnRyeVZlbmRvclRhc2tTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlbGF0ZWRGaWx0ZXIsIEthbHR1cmFSZWxhdGVkRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYVJlbGF0ZWRGaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFFbnRyeVZlbmRvclRhc2tCYXNlRmlsdGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVsYXRlZEZpbHRlckFyZ3Mge1xuICAgIGlkRXF1YWw/IDogbnVtYmVyO1xuXHRpZEluPyA6IHN0cmluZztcblx0aWROb3RJbj8gOiBzdHJpbmc7XG5cdHZlbmRvclBhcnRuZXJJZEVxdWFsPyA6IG51bWJlcjtcblx0dmVuZG9yUGFydG5lcklkSW4/IDogc3RyaW5nO1xuXHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0cXVldWVUaW1lR3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHF1ZXVlVGltZUxlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRmaW5pc2hUaW1lR3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdGZpbmlzaFRpbWVMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0ZW50cnlJZEVxdWFsPyA6IHN0cmluZztcblx0c3RhdHVzRXF1YWw/IDogS2FsdHVyYUVudHJ5VmVuZG9yVGFza1N0YXR1cztcblx0c3RhdHVzSW4/IDogc3RyaW5nO1xuXHRyZWFjaFByb2ZpbGVJZEVxdWFsPyA6IG51bWJlcjtcblx0cmVhY2hQcm9maWxlSWRJbj8gOiBzdHJpbmc7XG5cdGNhdGFsb2dJdGVtSWRFcXVhbD8gOiBudW1iZXI7XG5cdGNhdGFsb2dJdGVtSWRJbj8gOiBzdHJpbmc7XG5cdHVzZXJJZEVxdWFsPyA6IHN0cmluZztcblx0Y29udGV4dEVxdWFsPyA6IHN0cmluZztcblx0ZXhwZWN0ZWRGaW5pc2hUaW1lR3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdGV4cGVjdGVkRmluaXNoVGltZUxlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFSZWxhdGVkRmlsdGVyIHtcblxuICAgIGlkRXF1YWwgOiBudW1iZXI7XG5cdGlkSW4gOiBzdHJpbmc7XG5cdGlkTm90SW4gOiBzdHJpbmc7XG5cdHZlbmRvclBhcnRuZXJJZEVxdWFsIDogbnVtYmVyO1xuXHR2ZW5kb3JQYXJ0bmVySWRJbiA6IHN0cmluZztcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0cXVldWVUaW1lR3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0cXVldWVUaW1lTGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0ZmluaXNoVGltZUdyZWF0ZXJUaGFuT3JFcXVhbCA6IERhdGU7XG5cdGZpbmlzaFRpbWVMZXNzVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRlbnRyeUlkRXF1YWwgOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFza1N0YXR1cztcblx0c3RhdHVzSW4gOiBzdHJpbmc7XG5cdHJlYWNoUHJvZmlsZUlkRXF1YWwgOiBudW1iZXI7XG5cdHJlYWNoUHJvZmlsZUlkSW4gOiBzdHJpbmc7XG5cdGNhdGFsb2dJdGVtSWRFcXVhbCA6IG51bWJlcjtcblx0Y2F0YWxvZ0l0ZW1JZEluIDogc3RyaW5nO1xuXHR1c2VySWRFcXVhbCA6IHN0cmluZztcblx0Y29udGV4dEVxdWFsIDogc3RyaW5nO1xuXHRleHBlY3RlZEZpbmlzaFRpbWVHcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRleHBlY3RlZEZpbmlzaFRpbWVMZXNzVGhhbk9yRXF1YWwgOiBEYXRlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlcicgfSxcblx0XHRcdFx0aWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRpZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlkTm90SW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dmVuZG9yUGFydG5lcklkRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0dmVuZG9yUGFydG5lcklkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHF1ZXVlVGltZUdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHRxdWV1ZVRpbWVMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0ZmluaXNoVGltZUdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHRmaW5pc2hUaW1lTGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGVudHJ5SWRFcXVhbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNFcXVhbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2tTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5VmVuZG9yVGFza1N0YXR1cycgfSxcblx0XHRcdFx0c3RhdHVzSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVhY2hQcm9maWxlSWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRyZWFjaFByb2ZpbGVJZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNhdGFsb2dJdGVtSWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjYXRhbG9nSXRlbUlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXNlcklkRXF1YWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y29udGV4dEVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGV4cGVjdGVkRmluaXNoVGltZUdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHRleHBlY3RlZEZpbmlzaFRpbWVMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFFbnRyeVZlbmRvclRhc2tCYXNlRmlsdGVyJyxLYWx0dXJhRW50cnlWZW5kb3JUYXNrQmFzZUZpbHRlcik7XG4iXX0=
