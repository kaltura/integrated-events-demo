"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeaconSearchScheduledResourceAction = void 0;
var tslib_1 = require("tslib");
var KalturaBeaconListResponse_1 = require("./KalturaBeaconListResponse");
var KalturaBeaconSearchParams_1 = require("./KalturaBeaconSearchParams");
var KalturaPager_1 = require("./KalturaPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'beacon' action 'searchScheduledResource'.
 *
 *
 *
 * Server response type:         KalturaBeaconListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var BeaconSearchScheduledResourceAction = /** @class */ (function (_super) {
    tslib_1.__extends(BeaconSearchScheduledResourceAction, _super);
    function BeaconSearchScheduledResourceAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBeaconListResponse', responseConstructor: KalturaBeaconListResponse_1.KalturaBeaconListResponse }) || this;
    }
    BeaconSearchScheduledResourceAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'beacon_beacon' },
            action: { type: 'c', default: 'searchScheduledResource' },
            searchParams: { type: 'o', subTypeConstructor: KalturaBeaconSearchParams_1.KalturaBeaconSearchParams, subType: 'KalturaBeaconSearchParams' },
            pager: { type: 'o', subTypeConstructor: KalturaPager_1.KalturaPager, subType: 'KalturaPager' }
        });
        return result;
    };
    return BeaconSearchScheduledResourceAction;
}(kaltura_request_1.KalturaRequest));
exports.BeaconSearchScheduledResourceAction = BeaconSearchScheduledResourceAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CZWFjb25TZWFyY2hTY2hlZHVsZWRSZXNvdXJjZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseUVBQXdFO0FBRXhFLHlFQUF3RTtBQUN4RSwrQ0FBOEM7QUFDOUMsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXlELCtEQUF5QztJQUs5Riw2Q0FBWSxJQUE4QztlQUV0RCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRywyQkFBMkIsRUFBRSxtQkFBbUIsRUFBRyxxREFBeUIsRUFBRyxDQUFDO0lBQ3ZJLENBQUM7SUFFUywwREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDL0QsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcseUJBQXlCLEVBQUU7WUFDNUQsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxxREFBeUIsRUFBRSxPQUFPLEVBQUcsMkJBQTJCLEVBQUU7WUFDcEgsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyQkFBWSxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7U0FDMUUsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDBDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QndELGdDQUFjLEdBd0J0RTtBQXhCWSxrRkFBbUMiLCJmaWxlIjoiYXBpL3R5cGVzL0JlYWNvblNlYXJjaFNjaGVkdWxlZFJlc291cmNlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFCZWFjb25MaXN0UmVzcG9uc2UgfSBmcm9tICcuL0thbHR1cmFCZWFjb25MaXN0UmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBLYWx0dXJhQmVhY29uU2VhcmNoUGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhQmVhY29uU2VhcmNoUGFyYW1zJztcbmltcG9ydCB7IEthbHR1cmFQYWdlciB9IGZyb20gJy4vS2FsdHVyYVBhZ2VyJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJlYWNvblNlYXJjaFNjaGVkdWxlZFJlc291cmNlQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHNlYXJjaFBhcmFtcyA6IEthbHR1cmFCZWFjb25TZWFyY2hQYXJhbXM7XG5cdHBhZ2VyPyA6IEthbHR1cmFQYWdlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2JlYWNvbicgYWN0aW9uICdzZWFyY2hTY2hlZHVsZWRSZXNvdXJjZScuXG4gKlxuICogXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUJlYWNvbkxpc3RSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQmVhY29uU2VhcmNoU2NoZWR1bGVkUmVzb3VyY2VBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhQmVhY29uTGlzdFJlc3BvbnNlPiB7XG5cbiAgICBzZWFyY2hQYXJhbXMgOiBLYWx0dXJhQmVhY29uU2VhcmNoUGFyYW1zO1xuXHRwYWdlciA6IEthbHR1cmFQYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBCZWFjb25TZWFyY2hTY2hlZHVsZWRSZXNvdXJjZUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUJlYWNvbkxpc3RSZXNwb25zZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmVhY29uTGlzdFJlc3BvbnNlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdiZWFjb25fYmVhY29uJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VhcmNoU2NoZWR1bGVkUmVzb3VyY2UnIH0sXG5cdFx0XHRcdHNlYXJjaFBhcmFtcyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJlYWNvblNlYXJjaFBhcmFtcywgc3ViVHlwZSA6ICdLYWx0dXJhQmVhY29uU2VhcmNoUGFyYW1zJyB9LFxuXHRcdFx0XHRwYWdlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBhZ2VyLCBzdWJUeXBlIDogJ0thbHR1cmFQYWdlcicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
