"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBusinessProcessServerBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBusinessProcessServerStatus_1 = require("./KalturaBusinessProcessServerStatus");
var KalturaBusinessProcessProvider_1 = require("./KalturaBusinessProcessProvider");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaBusinessProcessServerBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBusinessProcessServerBaseFilter, _super);
    function KalturaBusinessProcessServerBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaBusinessProcessServerBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBusinessProcessServerBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            idNotIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            partnerIdEqual: { type: 'n' },
            partnerIdIn: { type: 's' },
            statusEqual: { type: 'es', subTypeConstructor: KalturaBusinessProcessServerStatus_1.KalturaBusinessProcessServerStatus, subType: 'KalturaBusinessProcessServerStatus' },
            statusNotEqual: { type: 'es', subTypeConstructor: KalturaBusinessProcessServerStatus_1.KalturaBusinessProcessServerStatus, subType: 'KalturaBusinessProcessServerStatus' },
            statusIn: { type: 's' },
            statusNotIn: { type: 's' },
            typeEqual: { type: 'es', subTypeConstructor: KalturaBusinessProcessProvider_1.KalturaBusinessProcessProvider, subType: 'KalturaBusinessProcessProvider' },
            typeIn: { type: 's' },
            dcEqual: { type: 'n' },
            dcEqOrNull: { type: 'n' }
        });
        return result;
    };
    return KalturaBusinessProcessServerBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaBusinessProcessServerBaseFilter = KalturaBusinessProcessServerBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBusinessProcessServerBaseFilter', KalturaBusinessProcessServerBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyQmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELDJGQUEwRjtBQUMxRixtRkFBa0Y7QUFDbEYsaURBQW1FO0FBdUJuRTtJQUE0RCxrRUFBYTtJQW9CckUsZ0RBQVksSUFBa0Q7ZUFFMUQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLDZEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdDQUF3QyxFQUFFO1lBQzNGLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVDLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QyxjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1RUFBa0MsRUFBRSxPQUFPLEVBQUcsb0NBQW9DLEVBQUU7WUFDdEksY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1RUFBa0MsRUFBRSxPQUFPLEVBQUcsb0NBQW9DLEVBQUU7WUFDekksUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0RBQThCLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQzVILE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkIsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2xCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2Q0FBQztBQUFELENBckRBLEFBcURDLENBckQyRCw2QkFBYSxHQXFEeEU7QUFyRFksd0ZBQXNDO0FBdURuRCwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsd0NBQXdDLEVBQUMsc0NBQXNDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlckJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFCdXNpbmVzc1Byb2Nlc3NQcm92aWRlciB9IGZyb20gJy4vS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1Byb3ZpZGVyJztcbmltcG9ydCB7IEthbHR1cmFGaWx0ZXIsIEthbHR1cmFGaWx0ZXJBcmdzIH0gZnJvbSAnLi9LYWx0dXJhRmlsdGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyQmFzZUZpbHRlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYUZpbHRlckFyZ3Mge1xuICAgIGlkRXF1YWw/IDogbnVtYmVyO1xuXHRpZEluPyA6IHN0cmluZztcblx0aWROb3RJbj8gOiBzdHJpbmc7XG5cdGNyZWF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRjcmVhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRwYXJ0bmVySWRFcXVhbD8gOiBudW1iZXI7XG5cdHBhcnRuZXJJZEluPyA6IHN0cmluZztcblx0c3RhdHVzRXF1YWw/IDogS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlclN0YXR1cztcblx0c3RhdHVzTm90RXF1YWw/IDogS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlclN0YXR1cztcblx0c3RhdHVzSW4/IDogc3RyaW5nO1xuXHRzdGF0dXNOb3RJbj8gOiBzdHJpbmc7XG5cdHR5cGVFcXVhbD8gOiBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzUHJvdmlkZXI7XG5cdHR5cGVJbj8gOiBzdHJpbmc7XG5cdGRjRXF1YWw/IDogbnVtYmVyO1xuXHRkY0VxT3JOdWxsPyA6IG51bWJlcjtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlckJhc2VGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhRmlsdGVyIHtcblxuICAgIGlkRXF1YWwgOiBudW1iZXI7XG5cdGlkSW4gOiBzdHJpbmc7XG5cdGlkTm90SW4gOiBzdHJpbmc7XG5cdGNyZWF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IERhdGU7XG5cdGNyZWF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IERhdGU7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IERhdGU7XG5cdHBhcnRuZXJJZEVxdWFsIDogbnVtYmVyO1xuXHRwYXJ0bmVySWRJbiA6IHN0cmluZztcblx0c3RhdHVzRXF1YWwgOiBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyU3RhdHVzO1xuXHRzdGF0dXNOb3RFcXVhbCA6IEthbHR1cmFCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXJTdGF0dXM7XG5cdHN0YXR1c0luIDogc3RyaW5nO1xuXHRzdGF0dXNOb3RJbiA6IHN0cmluZztcblx0dHlwZUVxdWFsIDogS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1Byb3ZpZGVyO1xuXHR0eXBlSW4gOiBzdHJpbmc7XG5cdGRjRXF1YWwgOiBudW1iZXI7XG5cdGRjRXFPck51bGwgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXJCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXJCYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHRpZEVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aWROb3RJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0cGFydG5lcklkRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cGFydG5lcklkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3RhdHVzRXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXJTdGF0dXMnIH0sXG5cdFx0XHRcdHN0YXR1c05vdEVxdWFsIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlclN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyU3RhdHVzJyB9LFxuXHRcdFx0XHRzdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNOb3RJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0eXBlRXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzUHJvdmlkZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1Byb3ZpZGVyJyB9LFxuXHRcdFx0XHR0eXBlSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZGNFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRkY0VxT3JOdWxsIDogeyB0eXBlIDogJ24nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyQmFzZUZpbHRlcicsS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlckJhc2VGaWx0ZXIpO1xuIl19
