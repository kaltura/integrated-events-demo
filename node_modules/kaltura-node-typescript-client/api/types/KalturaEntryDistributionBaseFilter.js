"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEntryDistributionBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEntryDistributionStatus_1 = require("./KalturaEntryDistributionStatus");
var KalturaEntryDistributionFlag_1 = require("./KalturaEntryDistributionFlag");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaEntryDistributionBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEntryDistributionBaseFilter, _super);
    function KalturaEntryDistributionBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaEntryDistributionBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEntryDistributionBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            submittedAtGreaterThanOrEqual: { type: 'd' },
            submittedAtLessThanOrEqual: { type: 'd' },
            entryIdEqual: { type: 's' },
            entryIdIn: { type: 's' },
            distributionProfileIdEqual: { type: 'n' },
            distributionProfileIdIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaEntryDistributionStatus_1.KalturaEntryDistributionStatus, subType: 'KalturaEntryDistributionStatus' },
            statusIn: { type: 's' },
            dirtyStatusEqual: { type: 'en', subTypeConstructor: KalturaEntryDistributionFlag_1.KalturaEntryDistributionFlag, subType: 'KalturaEntryDistributionFlag' },
            dirtyStatusIn: { type: 's' },
            sunriseGreaterThanOrEqual: { type: 'd' },
            sunriseLessThanOrEqual: { type: 'd' },
            sunsetGreaterThanOrEqual: { type: 'd' },
            sunsetLessThanOrEqual: { type: 'd' }
        });
        return result;
    };
    return KalturaEntryDistributionBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaEntryDistributionBaseFilter = KalturaEntryDistributionBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEntryDistributionBaseFilter', KalturaEntryDistributionBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRW50cnlEaXN0cmlidXRpb25CYXNlRmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUZBQWtGO0FBQ2xGLCtFQUE4RTtBQUM5RSwrREFBd0Y7QUEwQnhGO0lBQXdELDhEQUFvQjtJQXVCeEUsNENBQVksSUFBOEM7ZUFFdEQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLHlEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG9DQUFvQyxFQUFFO1lBQ3ZGLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQiwyQkFBMkIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUMsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsNkJBQTZCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlDLDBCQUEwQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQyxZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsMEJBQTBCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNDLHVCQUF1QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtEQUE4QixFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUM5SCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7WUFDL0gsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5Qix5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsc0JBQXNCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3ZDLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QyxxQkFBcUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDN0IsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHlDQUFDO0FBQUQsQ0EzREEsQUEyREMsQ0EzRHVELDJDQUFvQixHQTJEM0U7QUEzRFksZ0ZBQWtDO0FBNkQvQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsb0NBQW9DLEVBQUMsa0NBQWtDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uQmFzZUZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvblN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbkZsYWcgfSBmcm9tICcuL0thbHR1cmFFbnRyeURpc3RyaWJ1dGlvbkZsYWcnO1xuaW1wb3J0IHsgS2FsdHVyYVJlbGF0ZWRGaWx0ZXIsIEthbHR1cmFSZWxhdGVkRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYVJlbGF0ZWRGaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbkJhc2VGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFSZWxhdGVkRmlsdGVyQXJncyB7XG4gICAgaWRFcXVhbD8gOiBudW1iZXI7XG5cdGlkSW4/IDogc3RyaW5nO1xuXHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0c3VibWl0dGVkQXRHcmVhdGVyVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0c3VibWl0dGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0ZW50cnlJZEVxdWFsPyA6IHN0cmluZztcblx0ZW50cnlJZEluPyA6IHN0cmluZztcblx0ZGlzdHJpYnV0aW9uUHJvZmlsZUlkRXF1YWw/IDogbnVtYmVyO1xuXHRkaXN0cmlidXRpb25Qcm9maWxlSWRJbj8gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsPyA6IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvblN0YXR1cztcblx0c3RhdHVzSW4/IDogc3RyaW5nO1xuXHRkaXJ0eVN0YXR1c0VxdWFsPyA6IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbkZsYWc7XG5cdGRpcnR5U3RhdHVzSW4/IDogc3RyaW5nO1xuXHRzdW5yaXNlR3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHN1bnJpc2VMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0c3Vuc2V0R3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHN1bnNldExlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRW50cnlEaXN0cmlidXRpb25CYXNlRmlsdGVyIGV4dGVuZHMgS2FsdHVyYVJlbGF0ZWRGaWx0ZXIge1xuXG4gICAgaWRFcXVhbCA6IG51bWJlcjtcblx0aWRJbiA6IHN0cmluZztcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0c3VibWl0dGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRzdWJtaXR0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IERhdGU7XG5cdGVudHJ5SWRFcXVhbCA6IHN0cmluZztcblx0ZW50cnlJZEluIDogc3RyaW5nO1xuXHRkaXN0cmlidXRpb25Qcm9maWxlSWRFcXVhbCA6IG51bWJlcjtcblx0ZGlzdHJpYnV0aW9uUHJvZmlsZUlkSW4gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsIDogS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uU3RhdHVzO1xuXHRzdGF0dXNJbiA6IHN0cmluZztcblx0ZGlydHlTdGF0dXNFcXVhbCA6IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbkZsYWc7XG5cdGRpcnR5U3RhdHVzSW4gOiBzdHJpbmc7XG5cdHN1bnJpc2VHcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHRzdW5yaXNlTGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0c3Vuc2V0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0c3Vuc2V0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uQmFzZUZpbHRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRW50cnlEaXN0cmlidXRpb25CYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHRpZEVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHN1Ym1pdHRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHN1Ym1pdHRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGVudHJ5SWRFcXVhbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbnRyeUlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZGlzdHJpYnV0aW9uUHJvZmlsZUlkRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZGlzdHJpYnV0aW9uUHJvZmlsZUlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3RhdHVzRXF1YWwgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW50cnlEaXN0cmlidXRpb25TdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uU3RhdHVzJyB9LFxuXHRcdFx0XHRzdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkaXJ0eVN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uRmxhZywgc3ViVHlwZSA6ICdLYWx0dXJhRW50cnlEaXN0cmlidXRpb25GbGFnJyB9LFxuXHRcdFx0XHRkaXJ0eVN0YXR1c0luIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN1bnJpc2VHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0c3VucmlzZUxlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHRzdW5zZXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0c3Vuc2V0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhRW50cnlEaXN0cmlidXRpb25CYXNlRmlsdGVyJyxLYWx0dXJhRW50cnlEaXN0cmlidXRpb25CYXNlRmlsdGVyKTtcbiJdfQ==
