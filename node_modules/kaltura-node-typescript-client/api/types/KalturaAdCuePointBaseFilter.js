"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAdCuePointBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAdProtocolType_1 = require("./KalturaAdProtocolType");
var KalturaCuePointFilter_1 = require("./KalturaCuePointFilter");
var KalturaAdCuePointBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAdCuePointBaseFilter, _super);
    function KalturaAdCuePointBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaAdCuePointBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAdCuePointBaseFilter' },
            protocolTypeEqual: { type: 'es', subTypeConstructor: KalturaAdProtocolType_1.KalturaAdProtocolType, subType: 'KalturaAdProtocolType' },
            protocolTypeIn: { type: 's' },
            titleLike: { type: 's' },
            titleMultiLikeOr: { type: 's' },
            titleMultiLikeAnd: { type: 's' },
            endTimeGreaterThanOrEqual: { type: 'n' },
            endTimeLessThanOrEqual: { type: 'n' },
            durationGreaterThanOrEqual: { type: 'n' },
            durationLessThanOrEqual: { type: 'n' }
        });
        return result;
    };
    return KalturaAdCuePointBaseFilter;
}(KalturaCuePointFilter_1.KalturaCuePointFilter));
exports.KalturaAdCuePointBaseFilter = KalturaAdCuePointBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAdCuePointBaseFilter', KalturaAdCuePointBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQWRDdWVQb2ludEJhc2VGaWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxpRUFBZ0U7QUFDaEUsaUVBQTJGO0FBZTNGO0lBQWlELHVEQUFxQjtJQVlsRSxxQ0FBWSxJQUF1QztlQUUvQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsa0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDaEYsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUNsSCxjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNsQyx5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsc0JBQXNCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3ZDLDBCQUEwQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQyx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDL0IsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0FyQ0EsQUFxQ0MsQ0FyQ2dELDZDQUFxQixHQXFDckU7QUFyQ1ksa0VBQTJCO0FBdUN4QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNkJBQTZCLEVBQUMsMkJBQTJCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUFkQ3VlUG9pbnRCYXNlRmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUFkUHJvdG9jb2xUeXBlIH0gZnJvbSAnLi9LYWx0dXJhQWRQcm90b2NvbFR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYUN1ZVBvaW50RmlsdGVyLCBLYWx0dXJhQ3VlUG9pbnRGaWx0ZXJBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQ3VlUG9pbnRGaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFBZEN1ZVBvaW50QmFzZUZpbHRlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYUN1ZVBvaW50RmlsdGVyQXJncyB7XG4gICAgcHJvdG9jb2xUeXBlRXF1YWw/IDogS2FsdHVyYUFkUHJvdG9jb2xUeXBlO1xuXHRwcm90b2NvbFR5cGVJbj8gOiBzdHJpbmc7XG5cdHRpdGxlTGlrZT8gOiBzdHJpbmc7XG5cdHRpdGxlTXVsdGlMaWtlT3I/IDogc3RyaW5nO1xuXHR0aXRsZU11bHRpTGlrZUFuZD8gOiBzdHJpbmc7XG5cdGVuZFRpbWVHcmVhdGVyVGhhbk9yRXF1YWw/IDogbnVtYmVyO1xuXHRlbmRUaW1lTGVzc1RoYW5PckVxdWFsPyA6IG51bWJlcjtcblx0ZHVyYXRpb25HcmVhdGVyVGhhbk9yRXF1YWw/IDogbnVtYmVyO1xuXHRkdXJhdGlvbkxlc3NUaGFuT3JFcXVhbD8gOiBudW1iZXI7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFBZEN1ZVBvaW50QmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFDdWVQb2ludEZpbHRlciB7XG5cbiAgICBwcm90b2NvbFR5cGVFcXVhbCA6IEthbHR1cmFBZFByb3RvY29sVHlwZTtcblx0cHJvdG9jb2xUeXBlSW4gOiBzdHJpbmc7XG5cdHRpdGxlTGlrZSA6IHN0cmluZztcblx0dGl0bGVNdWx0aUxpa2VPciA6IHN0cmluZztcblx0dGl0bGVNdWx0aUxpa2VBbmQgOiBzdHJpbmc7XG5cdGVuZFRpbWVHcmVhdGVyVGhhbk9yRXF1YWwgOiBudW1iZXI7XG5cdGVuZFRpbWVMZXNzVGhhbk9yRXF1YWwgOiBudW1iZXI7XG5cdGR1cmF0aW9uR3JlYXRlclRoYW5PckVxdWFsIDogbnVtYmVyO1xuXHRkdXJhdGlvbkxlc3NUaGFuT3JFcXVhbCA6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUFkQ3VlUG9pbnRCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFBZEN1ZVBvaW50QmFzZUZpbHRlcicgfSxcblx0XHRcdFx0cHJvdG9jb2xUeXBlRXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQWRQcm90b2NvbFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUFkUHJvdG9jb2xUeXBlJyB9LFxuXHRcdFx0XHRwcm90b2NvbFR5cGVJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0aXRsZUxpa2UgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dGl0bGVNdWx0aUxpa2VPciA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0aXRsZU11bHRpTGlrZUFuZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbmRUaW1lR3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGVuZFRpbWVMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZHVyYXRpb25HcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZHVyYXRpb25MZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFBZEN1ZVBvaW50QmFzZUZpbHRlcicsS2FsdHVyYUFkQ3VlUG9pbnRCYXNlRmlsdGVyKTtcbiJdfQ==
