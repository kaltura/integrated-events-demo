"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDistributionProvider = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionProviderType_1 = require("./KalturaDistributionProviderType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaDistributionProvider = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDistributionProvider, _super);
    function KalturaDistributionProvider(data) {
        return _super.call(this, data) || this;
    }
    KalturaDistributionProvider.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDistributionProvider' },
            type: { type: 'es', readOnly: true, subTypeConstructor: KalturaDistributionProviderType_1.KalturaDistributionProviderType, subType: 'KalturaDistributionProviderType' },
            name: { type: 's' },
            scheduleUpdateEnabled: { type: 'b' },
            availabilityUpdateEnabled: { type: 'b' },
            deleteInsteadUpdate: { type: 'b' },
            intervalBeforeSunrise: { type: 'n' },
            intervalBeforeSunset: { type: 'n' },
            updateRequiredEntryFields: { type: 's' },
            updateRequiredMetadataXPaths: { type: 's' }
        });
        return result;
    };
    return KalturaDistributionProvider;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaDistributionProvider = KalturaDistributionProvider;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDistributionProvider', KalturaDistributionProvider);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxxRkFBb0Y7QUFDcEYsOERBQWtGO0FBY2xGO0lBQWlELHVEQUFpQjtJQVk5RCxxQ0FBWSxJQUF1QztlQUUvQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsa0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDaEYsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlFQUErQixFQUFFLE9BQU8sRUFBRyxpQ0FBaUMsRUFBRTtZQUMxSSxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLHFCQUFxQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0Qyx5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3BDLHFCQUFxQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QyxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckMseUJBQXlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFDLDRCQUE0QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNwQyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsa0NBQUM7QUFBRCxDQXJDQSxBQXFDQyxDQXJDZ0QsdUNBQWlCLEdBcUNqRTtBQXJDWSxrRUFBMkI7QUF1Q3hDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyw2QkFBNkIsRUFBQywyQkFBMkIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9LYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXJUeXBlJztcbmltcG9ydCB7IEthbHR1cmFPYmplY3RCYXNlLCBLYWx0dXJhT2JqZWN0QmFzZUFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXJBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgbmFtZT8gOiBzdHJpbmc7XG5cdHNjaGVkdWxlVXBkYXRlRW5hYmxlZD8gOiBib29sZWFuO1xuXHRhdmFpbGFiaWxpdHlVcGRhdGVFbmFibGVkPyA6IGJvb2xlYW47XG5cdGRlbGV0ZUluc3RlYWRVcGRhdGU/IDogYm9vbGVhbjtcblx0aW50ZXJ2YWxCZWZvcmVTdW5yaXNlPyA6IG51bWJlcjtcblx0aW50ZXJ2YWxCZWZvcmVTdW5zZXQ/IDogbnVtYmVyO1xuXHR1cGRhdGVSZXF1aXJlZEVudHJ5RmllbGRzPyA6IHN0cmluZztcblx0dXBkYXRlUmVxdWlyZWRNZXRhZGF0YVhQYXRocz8gOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFEaXN0cmlidXRpb25Qcm92aWRlciBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IHR5cGUgOiBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXJUeXBlO1xuXHRuYW1lIDogc3RyaW5nO1xuXHRzY2hlZHVsZVVwZGF0ZUVuYWJsZWQgOiBib29sZWFuO1xuXHRhdmFpbGFiaWxpdHlVcGRhdGVFbmFibGVkIDogYm9vbGVhbjtcblx0ZGVsZXRlSW5zdGVhZFVwZGF0ZSA6IGJvb2xlYW47XG5cdGludGVydmFsQmVmb3JlU3VucmlzZSA6IG51bWJlcjtcblx0aW50ZXJ2YWxCZWZvcmVTdW5zZXQgOiBudW1iZXI7XG5cdHVwZGF0ZVJlcXVpcmVkRW50cnlGaWVsZHMgOiBzdHJpbmc7XG5cdHVwZGF0ZVJlcXVpcmVkTWV0YWRhdGFYUGF0aHMgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFEaXN0cmlidXRpb25Qcm92aWRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXInIH0sXG5cdFx0XHRcdHR5cGUgOiB7IHR5cGUgOiAnZXMnLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEaXN0cmlidXRpb25Qcm92aWRlclR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvblByb3ZpZGVyVHlwZScgfSxcblx0XHRcdFx0bmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzY2hlZHVsZVVwZGF0ZUVuYWJsZWQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0YXZhaWxhYmlsaXR5VXBkYXRlRW5hYmxlZCA6IHsgdHlwZSA6ICdiJyB9LFxuXHRcdFx0XHRkZWxldGVJbnN0ZWFkVXBkYXRlIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdGludGVydmFsQmVmb3JlU3VucmlzZSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRpbnRlcnZhbEJlZm9yZVN1bnNldCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR1cGRhdGVSZXF1aXJlZEVudHJ5RmllbGRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVwZGF0ZVJlcXVpcmVkTWV0YWRhdGFYUGF0aHMgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFEaXN0cmlidXRpb25Qcm92aWRlcicsS2FsdHVyYURpc3RyaWJ1dGlvblByb3ZpZGVyKTtcbiJdfQ==
