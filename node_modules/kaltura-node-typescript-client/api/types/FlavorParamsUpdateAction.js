"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlavorParamsUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaFlavorParams_1 = require("./KalturaFlavorParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'flavorParams' action 'update'.
 *
 * Usage: Update Flavor Params by ID
 *
 * Server response type:         KalturaFlavorParams
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var FlavorParamsUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(FlavorParamsUpdateAction, _super);
    function FlavorParamsUpdateAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaFlavorParams', responseConstructor: KalturaFlavorParams_1.KalturaFlavorParams }) || this;
    }
    FlavorParamsUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'flavorparams' },
            action: { type: 'c', default: 'update' },
            id: { type: 'n' },
            flavorParams: { type: 'o', subTypeConstructor: KalturaFlavorParams_1.KalturaFlavorParams, subType: 'KalturaFlavorParams' }
        });
        return result;
    };
    return FlavorParamsUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.FlavorParamsUpdateAction = FlavorParamsUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9GbGF2b3JQYXJhbXNVcGRhdGVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBOEMsb0RBQW1DO0lBSzdFLGtDQUFZLElBQW1DO2VBRTNDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHFCQUFxQixFQUFFLG1CQUFtQixFQUFHLHlDQUFtQixFQUFHLENBQUM7SUFDM0gsQ0FBQztJQUVTLCtDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGNBQWMsRUFBRTtZQUM5RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDM0MsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQixZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtTQUMvRixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0JBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCNkMsZ0NBQWMsR0F3QjNEO0FBeEJZLDREQUF3QiIsImZpbGUiOiJhcGkvdHlwZXMvRmxhdm9yUGFyYW1zVXBkYXRlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFGbGF2b3JQYXJhbXMgfSBmcm9tICcuL0thbHR1cmFGbGF2b3JQYXJhbXMnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBGbGF2b3JQYXJhbXNVcGRhdGVBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgaWQgOiBudW1iZXI7XG5cdGZsYXZvclBhcmFtcyA6IEthbHR1cmFGbGF2b3JQYXJhbXM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdmbGF2b3JQYXJhbXMnIGFjdGlvbiAndXBkYXRlJy5cbiAqXG4gKiBVc2FnZTogVXBkYXRlIEZsYXZvciBQYXJhbXMgYnkgSURcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhRmxhdm9yUGFyYW1zXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBGbGF2b3JQYXJhbXNVcGRhdGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRmxhdm9yUGFyYW1zPiB7XG5cbiAgICBpZCA6IG51bWJlcjtcblx0Zmxhdm9yUGFyYW1zIDogS2FsdHVyYUZsYXZvclBhcmFtcztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBGbGF2b3JQYXJhbXNVcGRhdGVBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFGbGF2b3JQYXJhbXMnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUZsYXZvclBhcmFtcyAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZmxhdm9ycGFyYW1zJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlJyB9LFxuXHRcdFx0XHRpZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRmbGF2b3JQYXJhbXMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFGbGF2b3JQYXJhbXMsIHN1YlR5cGUgOiAnS2FsdHVyYUZsYXZvclBhcmFtcycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
