"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAttUverseDistributionJobProviderData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAttUverseDistributionFile_1 = require("./KalturaAttUverseDistributionFile");
var KalturaConfigurableDistributionJobProviderData_1 = require("./KalturaConfigurableDistributionJobProviderData");
var KalturaAttUverseDistributionJobProviderData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAttUverseDistributionJobProviderData, _super);
    function KalturaAttUverseDistributionJobProviderData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.filesForDistribution === 'undefined')
            _this.filesForDistribution = [];
        return _this;
    }
    KalturaAttUverseDistributionJobProviderData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAttUverseDistributionJobProviderData' },
            filesForDistribution: { type: 'a', subTypeConstructor: KalturaAttUverseDistributionFile_1.KalturaAttUverseDistributionFile, subType: 'KalturaAttUverseDistributionFile' },
            remoteAssetFileUrls: { type: 's' },
            remoteThumbnailFileUrls: { type: 's' },
            remoteCaptionFileUrls: { type: 's' }
        });
        return result;
    };
    return KalturaAttUverseDistributionJobProviderData;
}(KalturaConfigurableDistributionJobProviderData_1.KalturaConfigurableDistributionJobProviderData));
exports.KalturaAttUverseDistributionJobProviderData = KalturaAttUverseDistributionJobProviderData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAttUverseDistributionJobProviderData', KalturaAttUverseDistributionJobProviderData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsdUZBQXNGO0FBQ3RGLG1IQUFzSztBQVV0SztJQUFpRSx1RUFBOEM7SUFPM0cscURBQVksSUFBdUQ7UUFBbkUsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsb0JBQW9CLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUM7O0lBQ3pGLENBQUM7SUFFUyxrRUFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw2Q0FBNkMsRUFBRTtZQUNoRyxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbUVBQWdDLEVBQUUsT0FBTyxFQUFHLGtDQUFrQyxFQUFFO1lBQzFJLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNwQyx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEMscUJBQXFCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQzdCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxrREFBQztBQUFELENBNUJBLEFBNEJDLENBNUJnRSwrRkFBOEMsR0E0QjlHO0FBNUJZLGtHQUEyQztBQThCeEQsMkNBQW1CLENBQUMsWUFBWSxDQUFDLDZDQUE2QyxFQUFDLDJDQUEyQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFBdHRVdmVyc2VEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uRmlsZSB9IGZyb20gJy4vS2FsdHVyYUF0dFV2ZXJzZURpc3RyaWJ1dGlvbkZpbGUnO1xuaW1wb3J0IHsgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YSwgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFBdHRVdmVyc2VEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzICBleHRlbmRzIEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzIHtcbiAgICBmaWxlc0ZvckRpc3RyaWJ1dGlvbj8gOiBLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uRmlsZVtdO1xuXHRyZW1vdGVBc3NldEZpbGVVcmxzPyA6IHN0cmluZztcblx0cmVtb3RlVGh1bWJuYWlsRmlsZVVybHM/IDogc3RyaW5nO1xuXHRyZW1vdGVDYXB0aW9uRmlsZVVybHM/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhIGV4dGVuZHMgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YSB7XG5cbiAgICBmaWxlc0ZvckRpc3RyaWJ1dGlvbiA6IEthbHR1cmFBdHRVdmVyc2VEaXN0cmlidXRpb25GaWxlW107XG5cdHJlbW90ZUFzc2V0RmlsZVVybHMgOiBzdHJpbmc7XG5cdHJlbW90ZVRodW1ibmFpbEZpbGVVcmxzIDogc3RyaW5nO1xuXHRyZW1vdGVDYXB0aW9uRmlsZVVybHMgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFBdHRVdmVyc2VEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5maWxlc0ZvckRpc3RyaWJ1dGlvbiA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuZmlsZXNGb3JEaXN0cmlidXRpb24gPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJyB9LFxuXHRcdFx0XHRmaWxlc0ZvckRpc3RyaWJ1dGlvbiA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUF0dFV2ZXJzZURpc3RyaWJ1dGlvbkZpbGUsIHN1YlR5cGUgOiAnS2FsdHVyYUF0dFV2ZXJzZURpc3RyaWJ1dGlvbkZpbGUnIH0sXG5cdFx0XHRcdHJlbW90ZUFzc2V0RmlsZVVybHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVtb3RlVGh1bWJuYWlsRmlsZVVybHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVtb3RlQ2FwdGlvbkZpbGVVcmxzIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJyxLYWx0dXJhQXR0VXZlcnNlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhKTtcbiJdfQ==
