"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaUpdateThumbnailFromSourceEntryAction = void 0;
var tslib_1 = require("tslib");
var KalturaMediaEntry_1 = require("./KalturaMediaEntry");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'media' action 'updateThumbnailFromSourceEntry'.
 *
 * Usage: Update media entry thumbnail from a different entry by a specified time offset (In seconds)
 * If flavor params id not specified, source flavor will be used by default
 *
 * Server response type:         KalturaMediaEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var MediaUpdateThumbnailFromSourceEntryAction = /** @class */ (function (_super) {
    tslib_1.__extends(MediaUpdateThumbnailFromSourceEntryAction, _super);
    function MediaUpdateThumbnailFromSourceEntryAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaMediaEntry', responseConstructor: KalturaMediaEntry_1.KalturaMediaEntry }) || this;
    }
    MediaUpdateThumbnailFromSourceEntryAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'media' },
            action: { type: 'c', default: 'updateThumbnailFromSourceEntry' },
            entryId: { type: 's' },
            sourceEntryId: { type: 's' },
            timeOffset: { type: 'n' },
            flavorParamsId: { type: 'n' }
        });
        return result;
    };
    return MediaUpdateThumbnailFromSourceEntryAction;
}(kaltura_request_1.KalturaRequest));
exports.MediaUpdateThumbnailFromSourceEntryAction = MediaUpdateThumbnailFromSourceEntryAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZWRpYVVwZGF0ZVRodW1ibmFpbEZyb21Tb3VyY2VFbnRyeUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseURBQXdEO0FBRXhELHNEQUF3RTtBQVN4RTs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBK0QscUVBQWlDO0lBTzVGLG1EQUFZLElBQW9EO2VBRTVELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG1CQUFtQixFQUFFLG1CQUFtQixFQUFHLHFDQUFpQixFQUFHLENBQUM7SUFDdkgsQ0FBQztJQUVTLGdFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLE9BQU8sRUFBRTtZQUN2RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUNuRSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3RCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxnREFBQztBQUFELENBNUJBLEFBNEJDLENBNUI4RCxnQ0FBYyxHQTRCNUU7QUE1QlksOEZBQXlDIiwiZmlsZSI6ImFwaS90eXBlcy9NZWRpYVVwZGF0ZVRodW1ibmFpbEZyb21Tb3VyY2VFbnRyeUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhTWVkaWFFbnRyeSB9IGZyb20gJy4vS2FsdHVyYU1lZGlhRW50cnknO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBNZWRpYVVwZGF0ZVRodW1ibmFpbEZyb21Tb3VyY2VFbnRyeUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRzb3VyY2VFbnRyeUlkIDogc3RyaW5nO1xuXHR0aW1lT2Zmc2V0IDogbnVtYmVyO1xuXHRmbGF2b3JQYXJhbXNJZD8gOiBudW1iZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdtZWRpYScgYWN0aW9uICd1cGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnknLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgbWVkaWEgZW50cnkgdGh1bWJuYWlsIGZyb20gYSBkaWZmZXJlbnQgZW50cnkgYnkgYSBzcGVjaWZpZWQgdGltZSBvZmZzZXQgKEluIHNlY29uZHMpXG4gKiBJZiBmbGF2b3IgcGFyYW1zIGlkIG5vdCBzcGVjaWZpZWQsIHNvdXJjZSBmbGF2b3Igd2lsbCBiZSB1c2VkIGJ5IGRlZmF1bHRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhTWVkaWFFbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgTWVkaWFVcGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnlBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhTWVkaWFFbnRyeT4ge1xuXG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0c291cmNlRW50cnlJZCA6IHN0cmluZztcblx0dGltZU9mZnNldCA6IG51bWJlcjtcblx0Zmxhdm9yUGFyYW1zSWQgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogTWVkaWFVcGRhdGVUaHVtYm5haWxGcm9tU291cmNlRW50cnlBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFNZWRpYUVudHJ5JywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFNZWRpYUVudHJ5ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdtZWRpYScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3VwZGF0ZVRodW1ibmFpbEZyb21Tb3VyY2VFbnRyeScgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzb3VyY2VFbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHRpbWVPZmZzZXQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Zmxhdm9yUGFyYW1zSWQgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
