"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DrmProfileGetByProviderAction = void 0;
var tslib_1 = require("tslib");
var KalturaDrmProfile_1 = require("./KalturaDrmProfile");
var KalturaDrmProviderType_1 = require("./KalturaDrmProviderType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'drmProfile' action 'getByProvider'.
 *
 * Usage: Retrieve a KalturaDrmProfile object by provider, if no specific profile defined return default profile
 *
 * Server response type:         KalturaDrmProfile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DrmProfileGetByProviderAction = /** @class */ (function (_super) {
    tslib_1.__extends(DrmProfileGetByProviderAction, _super);
    function DrmProfileGetByProviderAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDrmProfile', responseConstructor: KalturaDrmProfile_1.KalturaDrmProfile }) || this;
    }
    DrmProfileGetByProviderAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'drm_drmprofile' },
            action: { type: 'c', default: 'getByProvider' },
            provider: { type: 'es', subTypeConstructor: KalturaDrmProviderType_1.KalturaDrmProviderType, subType: 'KalturaDrmProviderType' }
        });
        return result;
    };
    return DrmProfileGetByProviderAction;
}(kaltura_request_1.KalturaRequest));
exports.DrmProfileGetByProviderAction = DrmProfileGetByProviderAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Ecm1Qcm9maWxlR2V0QnlQcm92aWRlckFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseURBQXdEO0FBRXhELG1FQUFrRTtBQUNsRSxzREFBd0U7QUFNeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBbUQseURBQWlDO0lBSWhGLHVDQUFZLElBQXdDO2VBRWhELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG1CQUFtQixFQUFFLG1CQUFtQixFQUFHLHFDQUFpQixFQUFHLENBQUM7SUFDdkgsQ0FBQztJQUVTLG9EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdCQUFnQixFQUFFO1lBQ2hFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGVBQWUsRUFBRTtZQUNsRCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtTQUNsRyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsb0NBQUM7QUFBRCxDQXRCQSxBQXNCQyxDQXRCa0QsZ0NBQWMsR0FzQmhFO0FBdEJZLHNFQUE2QiIsImZpbGUiOiJhcGkvdHlwZXMvRHJtUHJvZmlsZUdldEJ5UHJvdmlkZXJBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYURybVByb2ZpbGUgfSBmcm9tICcuL0thbHR1cmFEcm1Qcm9maWxlJztcblxuaW1wb3J0IHsgS2FsdHVyYURybVByb3ZpZGVyVHlwZSB9IGZyb20gJy4vS2FsdHVyYURybVByb3ZpZGVyVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBEcm1Qcm9maWxlR2V0QnlQcm92aWRlckFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBwcm92aWRlciA6IEthbHR1cmFEcm1Qcm92aWRlclR5cGU7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdkcm1Qcm9maWxlJyBhY3Rpb24gJ2dldEJ5UHJvdmlkZXInLlxuICpcbiAqIFVzYWdlOiBSZXRyaWV2ZSBhIEthbHR1cmFEcm1Qcm9maWxlIG9iamVjdCBieSBwcm92aWRlciwgaWYgbm8gc3BlY2lmaWMgcHJvZmlsZSBkZWZpbmVkIHJldHVybiBkZWZhdWx0IHByb2ZpbGVcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhRHJtUHJvZmlsZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRHJtUHJvZmlsZUdldEJ5UHJvdmlkZXJBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRHJtUHJvZmlsZT4ge1xuXG4gICAgcHJvdmlkZXIgOiBLYWx0dXJhRHJtUHJvdmlkZXJUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IERybVByb2ZpbGVHZXRCeVByb3ZpZGVyQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhRHJtUHJvZmlsZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhRHJtUHJvZmlsZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZHJtX2RybXByb2ZpbGUnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRCeVByb3ZpZGVyJyB9LFxuXHRcdFx0XHRwcm92aWRlciA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEcm1Qcm92aWRlclR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYURybVByb3ZpZGVyVHlwZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
