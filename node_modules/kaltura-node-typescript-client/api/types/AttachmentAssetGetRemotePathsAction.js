"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttachmentAssetGetRemotePathsAction = void 0;
var tslib_1 = require("tslib");
var KalturaRemotePathListResponse_1 = require("./KalturaRemotePathListResponse");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'attachmentAsset' action 'getRemotePaths'.
 *
 * Usage: Get remote storage existing paths for the asset
 *
 * Server response type:         KalturaRemotePathListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var AttachmentAssetGetRemotePathsAction = /** @class */ (function (_super) {
    tslib_1.__extends(AttachmentAssetGetRemotePathsAction, _super);
    function AttachmentAssetGetRemotePathsAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaRemotePathListResponse', responseConstructor: KalturaRemotePathListResponse_1.KalturaRemotePathListResponse }) || this;
    }
    AttachmentAssetGetRemotePathsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'attachment_attachmentasset' },
            action: { type: 'c', default: 'getRemotePaths' },
            id: { type: 's' }
        });
        return result;
    };
    return AttachmentAssetGetRemotePathsAction;
}(kaltura_request_1.KalturaRequest));
exports.AttachmentAssetGetRemotePathsAction = AttachmentAssetGetRemotePathsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9BdHRhY2htZW50QXNzZXRHZXRSZW1vdGVQYXRoc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsaUZBQWdGO0FBRWhGLHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUF5RCwrREFBNkM7SUFJbEcsNkNBQVksSUFBOEM7ZUFFdEQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsK0JBQStCLEVBQUUsbUJBQW1CLEVBQUcsNkRBQTZCLEVBQUcsQ0FBQztJQUMvSSxDQUFDO0lBRVMsMERBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDNUUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZ0JBQWdCLEVBQUU7WUFDbkQsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNWLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQ0FBQztBQUFELENBdEJBLEFBc0JDLENBdEJ3RCxnQ0FBYyxHQXNCdEU7QUF0Qlksa0ZBQW1DIiwiZmlsZSI6ImFwaS90eXBlcy9BdHRhY2htZW50QXNzZXRHZXRSZW1vdGVQYXRoc0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVtb3RlUGF0aExpc3RSZXNwb25zZSB9IGZyb20gJy4vS2FsdHVyYVJlbW90ZVBhdGhMaXN0UmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBBdHRhY2htZW50QXNzZXRHZXRSZW1vdGVQYXRoc0FjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2F0dGFjaG1lbnRBc3NldCcgYWN0aW9uICdnZXRSZW1vdGVQYXRocycuXG4gKlxuICogVXNhZ2U6IEdldCByZW1vdGUgc3RvcmFnZSBleGlzdGluZyBwYXRocyBmb3IgdGhlIGFzc2V0XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVJlbW90ZVBhdGhMaXN0UmVzcG9uc2VcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEF0dGFjaG1lbnRBc3NldEdldFJlbW90ZVBhdGhzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVJlbW90ZVBhdGhMaXN0UmVzcG9uc2U+IHtcblxuICAgIGlkIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IEF0dGFjaG1lbnRBc3NldEdldFJlbW90ZVBhdGhzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhUmVtb3RlUGF0aExpc3RSZXNwb25zZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVtb3RlUGF0aExpc3RSZXNwb25zZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYXR0YWNobWVudF9hdHRhY2htZW50YXNzZXQnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRSZW1vdGVQYXRocycgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
