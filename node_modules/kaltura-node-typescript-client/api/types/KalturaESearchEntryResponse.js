"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaESearchEntryResponse = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaESearchEntryResult_1 = require("./KalturaESearchEntryResult");
var KalturaESearchAggregationResponseItem_1 = require("./KalturaESearchAggregationResponseItem");
var KalturaESearchResponse_1 = require("./KalturaESearchResponse");
var KalturaESearchEntryResponse = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaESearchEntryResponse, _super);
    function KalturaESearchEntryResponse(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.objects === 'undefined')
            _this.objects = [];
        if (typeof _this.aggregations === 'undefined')
            _this.aggregations = [];
        return _this;
    }
    KalturaESearchEntryResponse.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaESearchEntryResponse' },
            objects: { type: 'a', readOnly: true, subTypeConstructor: KalturaESearchEntryResult_1.KalturaESearchEntryResult, subType: 'KalturaESearchEntryResult' },
            aggregations: { type: 'a', readOnly: true, subTypeConstructor: KalturaESearchAggregationResponseItem_1.KalturaESearchAggregationResponseItem, subType: 'KalturaESearchAggregationResponseItem' }
        });
        return result;
    };
    return KalturaESearchEntryResponse;
}(KalturaESearchResponse_1.KalturaESearchResponse));
exports.KalturaESearchEntryResponse = KalturaESearchEntryResponse;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaESearchEntryResponse', KalturaESearchEntryResponse);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRVNlYXJjaEVudHJ5UmVzcG9uc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCx5RUFBd0U7QUFDeEUsaUdBQWdHO0FBQ2hHLG1FQUE4RjtBQU85RjtJQUFpRCx1REFBc0I7SUFLbkUscUNBQVksSUFBdUM7UUFBbkQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FHZDtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNqRSxJQUFJLE9BQU8sS0FBSSxDQUFDLFlBQVksS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7O0lBQ25FLENBQUM7SUFFUyxrREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw2QkFBNkIsRUFBRTtZQUNoRixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQ2hJLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2RUFBcUMsRUFBRSxPQUFPLEVBQUcsdUNBQXVDLEVBQUU7U0FDcEosQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QmdELCtDQUFzQixHQXlCdEU7QUF6Qlksa0VBQTJCO0FBMkJ4QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNkJBQTZCLEVBQUMsMkJBQTJCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3BvbnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3VsdCB9IGZyb20gJy4vS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3VsdCc7XG5pbXBvcnQgeyBLYWx0dXJhRVNlYXJjaEFnZ3JlZ2F0aW9uUmVzcG9uc2VJdGVtIH0gZnJvbSAnLi9LYWx0dXJhRVNlYXJjaEFnZ3JlZ2F0aW9uUmVzcG9uc2VJdGVtJztcbmltcG9ydCB7IEthbHR1cmFFU2VhcmNoUmVzcG9uc2UsIEthbHR1cmFFU2VhcmNoUmVzcG9uc2VBcmdzIH0gZnJvbSAnLi9LYWx0dXJhRVNlYXJjaFJlc3BvbnNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhRVNlYXJjaEVudHJ5UmVzcG9uc2VBcmdzICBleHRlbmRzIEthbHR1cmFFU2VhcmNoUmVzcG9uc2VBcmdzIHtcbiAgICBcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3BvbnNlIGV4dGVuZHMgS2FsdHVyYUVTZWFyY2hSZXNwb25zZSB7XG5cbiAgICByZWFkb25seSBvYmplY3RzIDogS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3VsdFtdO1xuXHRyZWFkb25seSBhZ2dyZWdhdGlvbnMgOiBLYWx0dXJhRVNlYXJjaEFnZ3JlZ2F0aW9uUmVzcG9uc2VJdGVtW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFFU2VhcmNoRW50cnlSZXNwb25zZUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm9iamVjdHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLm9iamVjdHMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMuYWdncmVnYXRpb25zID09PSAndW5kZWZpbmVkJykgdGhpcy5hZ2dyZWdhdGlvbnMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRVNlYXJjaEVudHJ5UmVzcG9uc2UnIH0sXG5cdFx0XHRcdG9iamVjdHMgOiB7IHR5cGUgOiAnYScsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3VsdCwgc3ViVHlwZSA6ICdLYWx0dXJhRVNlYXJjaEVudHJ5UmVzdWx0JyB9LFxuXHRcdFx0XHRhZ2dyZWdhdGlvbnMgOiB7IHR5cGUgOiAnYScsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVTZWFyY2hBZ2dyZWdhdGlvblJlc3BvbnNlSXRlbSwgc3ViVHlwZSA6ICdLYWx0dXJhRVNlYXJjaEFnZ3JlZ2F0aW9uUmVzcG9uc2VJdGVtJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUVTZWFyY2hFbnRyeVJlc3BvbnNlJyxLYWx0dXJhRVNlYXJjaEVudHJ5UmVzcG9uc2UpO1xuIl19
