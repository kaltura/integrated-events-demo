"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendorCatalogItemUpdateStatusAction = void 0;
var tslib_1 = require("tslib");
var KalturaVendorCatalogItem_1 = require("./KalturaVendorCatalogItem");
var KalturaVendorCatalogItemStatus_1 = require("./KalturaVendorCatalogItemStatus");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'vendorCatalogItem' action 'updateStatus'.
 *
 * Usage: Update vendor catalog item status by id
 *
 * Server response type:         KalturaVendorCatalogItem
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var VendorCatalogItemUpdateStatusAction = /** @class */ (function (_super) {
    tslib_1.__extends(VendorCatalogItemUpdateStatusAction, _super);
    function VendorCatalogItemUpdateStatusAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaVendorCatalogItem', responseConstructor: KalturaVendorCatalogItem_1.KalturaVendorCatalogItem }) || this;
    }
    VendorCatalogItemUpdateStatusAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'reach_vendorcatalogitem' },
            action: { type: 'c', default: 'updateStatus' },
            id: { type: 'n' },
            status: { type: 'en', subTypeConstructor: KalturaVendorCatalogItemStatus_1.KalturaVendorCatalogItemStatus, subType: 'KalturaVendorCatalogItemStatus' }
        });
        return result;
    };
    return VendorCatalogItemUpdateStatusAction;
}(kaltura_request_1.KalturaRequest));
exports.VendorCatalogItemUpdateStatusAction = VendorCatalogItemUpdateStatusAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9WZW5kb3JDYXRhbG9nSXRlbVVwZGF0ZVN0YXR1c0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsdUVBQXNFO0FBRXRFLG1GQUFrRjtBQUNsRixzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBeUQsK0RBQXdDO0lBSzdGLDZDQUFZLElBQThDO2VBRXRELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLDBCQUEwQixFQUFFLG1CQUFtQixFQUFHLG1EQUF3QixFQUFHLENBQUM7SUFDckksQ0FBQztJQUVTLDBEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHlCQUF5QixFQUFFO1lBQ3pFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGNBQWMsRUFBRTtZQUNqRCxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0RBQThCLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1NBQ2hILENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQ0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJ3RCxnQ0FBYyxHQXdCdEU7QUF4Qlksa0ZBQW1DIiwiZmlsZSI6ImFwaS90eXBlcy9WZW5kb3JDYXRhbG9nSXRlbVVwZGF0ZVN0YXR1c0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW0gfSBmcm9tICcuL0thbHR1cmFWZW5kb3JDYXRhbG9nSXRlbSc7XG5cbmltcG9ydCB7IEthbHR1cmFWZW5kb3JDYXRhbG9nSXRlbVN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZlbmRvckNhdGFsb2dJdGVtVXBkYXRlU3RhdHVzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGlkIDogbnVtYmVyO1xuXHRzdGF0dXMgOiBLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1TdGF0dXM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICd2ZW5kb3JDYXRhbG9nSXRlbScgYWN0aW9uICd1cGRhdGVTdGF0dXMnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgdmVuZG9yIGNhdGFsb2cgaXRlbSBzdGF0dXMgYnkgaWRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1cbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFZlbmRvckNhdGFsb2dJdGVtVXBkYXRlU3RhdHVzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtPiB7XG5cbiAgICBpZCA6IG51bWJlcjtcblx0c3RhdHVzIDogS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtU3RhdHVzO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFZlbmRvckNhdGFsb2dJdGVtVXBkYXRlU3RhdHVzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW0nLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdyZWFjaF92ZW5kb3JjYXRhbG9naXRlbScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3VwZGF0ZVN0YXR1cycgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c3RhdHVzIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFWZW5kb3JDYXRhbG9nSXRlbVN0YXR1cycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
