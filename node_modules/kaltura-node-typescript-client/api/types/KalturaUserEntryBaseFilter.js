"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaUserEntryBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaUserEntryStatus_1 = require("./KalturaUserEntryStatus");
var KalturaUserEntryType_1 = require("./KalturaUserEntryType");
var KalturaUserEntryExtendedStatus_1 = require("./KalturaUserEntryExtendedStatus");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaUserEntryBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaUserEntryBaseFilter, _super);
    function KalturaUserEntryBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaUserEntryBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaUserEntryBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            idNotIn: { type: 's' },
            entryIdEqual: { type: 's' },
            entryIdIn: { type: 's' },
            entryIdNotIn: { type: 's' },
            userIdEqual: { type: 's' },
            userIdIn: { type: 's' },
            userIdNotIn: { type: 's' },
            statusEqual: { type: 'es', subTypeConstructor: KalturaUserEntryStatus_1.KalturaUserEntryStatus, subType: 'KalturaUserEntryStatus' },
            createdAtLessThanOrEqual: { type: 'd' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            typeEqual: { type: 'es', subTypeConstructor: KalturaUserEntryType_1.KalturaUserEntryType, subType: 'KalturaUserEntryType' },
            extendedStatusEqual: { type: 'es', subTypeConstructor: KalturaUserEntryExtendedStatus_1.KalturaUserEntryExtendedStatus, subType: 'KalturaUserEntryExtendedStatus' },
            extendedStatusIn: { type: 's' },
            extendedStatusNotIn: { type: 's' }
        });
        return result;
    };
    return KalturaUserEntryBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaUserEntryBaseFilter = KalturaUserEntryBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaUserEntryBaseFilter', KalturaUserEntryBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVXNlckVudHJ5QmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1FQUFrRTtBQUNsRSwrREFBOEQ7QUFDOUQsbUZBQWtGO0FBQ2xGLCtEQUF3RjtBQXdCeEY7SUFBZ0Qsc0RBQW9CO0lBcUJoRSxvQ0FBWSxJQUFzQztlQUU5QyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsaURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0UsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDOUcsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsMkNBQW9CLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1lBQ3hHLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrREFBOEIsRUFBRSxPQUFPLEVBQUcsZ0NBQWdDLEVBQUU7WUFDdEksZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUMzQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQXZEQSxBQXVEQyxDQXZEK0MsMkNBQW9CLEdBdURuRTtBQXZEWSxnRUFBMEI7QUF5RHZDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyw0QkFBNEIsRUFBQywwQkFBMEIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhVXNlckVudHJ5QmFzZUZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFVc2VyRW50cnlTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFVc2VyRW50cnlTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVVzZXJFbnRyeVR5cGUgfSBmcm9tICcuL0thbHR1cmFVc2VyRW50cnlUeXBlJztcbmltcG9ydCB7IEthbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYVVzZXJFbnRyeUV4dGVuZGVkU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFSZWxhdGVkRmlsdGVyLCBLYWx0dXJhUmVsYXRlZEZpbHRlckFyZ3MgfSBmcm9tICcuL0thbHR1cmFSZWxhdGVkRmlsdGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhVXNlckVudHJ5QmFzZUZpbHRlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlbGF0ZWRGaWx0ZXJBcmdzIHtcbiAgICBpZEVxdWFsPyA6IG51bWJlcjtcblx0aWRJbj8gOiBzdHJpbmc7XG5cdGlkTm90SW4/IDogc3RyaW5nO1xuXHRlbnRyeUlkRXF1YWw/IDogc3RyaW5nO1xuXHRlbnRyeUlkSW4/IDogc3RyaW5nO1xuXHRlbnRyeUlkTm90SW4/IDogc3RyaW5nO1xuXHR1c2VySWRFcXVhbD8gOiBzdHJpbmc7XG5cdHVzZXJJZEluPyA6IHN0cmluZztcblx0dXNlcklkTm90SW4/IDogc3RyaW5nO1xuXHRzdGF0dXNFcXVhbD8gOiBLYWx0dXJhVXNlckVudHJ5U3RhdHVzO1xuXHRjcmVhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0dHlwZUVxdWFsPyA6IEthbHR1cmFVc2VyRW50cnlUeXBlO1xuXHRleHRlbmRlZFN0YXR1c0VxdWFsPyA6IEthbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cztcblx0ZXh0ZW5kZWRTdGF0dXNJbj8gOiBzdHJpbmc7XG5cdGV4dGVuZGVkU3RhdHVzTm90SW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhVXNlckVudHJ5QmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFSZWxhdGVkRmlsdGVyIHtcblxuICAgIGlkRXF1YWwgOiBudW1iZXI7XG5cdGlkSW4gOiBzdHJpbmc7XG5cdGlkTm90SW4gOiBzdHJpbmc7XG5cdGVudHJ5SWRFcXVhbCA6IHN0cmluZztcblx0ZW50cnlJZEluIDogc3RyaW5nO1xuXHRlbnRyeUlkTm90SW4gOiBzdHJpbmc7XG5cdHVzZXJJZEVxdWFsIDogc3RyaW5nO1xuXHR1c2VySWRJbiA6IHN0cmluZztcblx0dXNlcklkTm90SW4gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsIDogS2FsdHVyYVVzZXJFbnRyeVN0YXR1cztcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0dHlwZUVxdWFsIDogS2FsdHVyYVVzZXJFbnRyeVR5cGU7XG5cdGV4dGVuZGVkU3RhdHVzRXF1YWwgOiBLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXM7XG5cdGV4dGVuZGVkU3RhdHVzSW4gOiBzdHJpbmc7XG5cdGV4dGVuZGVkU3RhdHVzTm90SW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFVc2VyRW50cnlCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFVc2VyRW50cnlCYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHRpZEVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGlkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aWROb3RJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbnRyeUlkRXF1YWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZW50cnlJZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGVudHJ5SWROb3RJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1c2VySWRFcXVhbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1c2VySWRJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1c2VySWROb3RJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVc2VyRW50cnlTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYVVzZXJFbnRyeVN0YXR1cycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHR5cGVFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVc2VyRW50cnlUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFVc2VyRW50cnlUeXBlJyB9LFxuXHRcdFx0XHRleHRlbmRlZFN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVVzZXJFbnRyeUV4dGVuZGVkU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cycgfSxcblx0XHRcdFx0ZXh0ZW5kZWRTdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRleHRlbmRlZFN0YXR1c05vdEluIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhVXNlckVudHJ5QmFzZUZpbHRlcicsS2FsdHVyYVVzZXJFbnRyeUJhc2VGaWx0ZXIpO1xuIl19
