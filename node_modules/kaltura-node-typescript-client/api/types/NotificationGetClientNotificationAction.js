"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationGetClientNotificationAction = void 0;
var tslib_1 = require("tslib");
var KalturaClientNotification_1 = require("./KalturaClientNotification");
var KalturaNotificationType_1 = require("./KalturaNotificationType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'notification' action 'getClientNotification'.
 *
 * Usage: Return the notifications for a specific entry id and type
 *
 * Server response type:         KalturaClientNotification
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var NotificationGetClientNotificationAction = /** @class */ (function (_super) {
    tslib_1.__extends(NotificationGetClientNotificationAction, _super);
    function NotificationGetClientNotificationAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaClientNotification', responseConstructor: KalturaClientNotification_1.KalturaClientNotification }) || this;
    }
    NotificationGetClientNotificationAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'notification' },
            action: { type: 'c', default: 'getClientNotification' },
            entryId: { type: 's' },
            type: { type: 'en', subTypeConstructor: KalturaNotificationType_1.KalturaNotificationType, subType: 'KalturaNotificationType' }
        });
        return result;
    };
    return NotificationGetClientNotificationAction;
}(kaltura_request_1.KalturaRequest));
exports.NotificationGetClientNotificationAction = NotificationGetClientNotificationAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Ob3RpZmljYXRpb25HZXRDbGllbnROb3RpZmljYXRpb25BY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHlFQUF3RTtBQUV4RSxxRUFBb0U7QUFDcEUsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTZELG1FQUF5QztJQUtsRyxpREFBWSxJQUFrRDtlQUUxRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRywyQkFBMkIsRUFBRSxtQkFBbUIsRUFBRyxxREFBeUIsRUFBRyxDQUFDO0lBQ3ZJLENBQUM7SUFFUyw4REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7WUFDOUQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDMUQsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlEQUF1QixFQUFFLE9BQU8sRUFBRyx5QkFBeUIsRUFBRTtTQUNoRyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsOENBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCNEQsZ0NBQWMsR0F3QjFFO0FBeEJZLDBGQUF1QyIsImZpbGUiOiJhcGkvdHlwZXMvTm90aWZpY2F0aW9uR2V0Q2xpZW50Tm90aWZpY2F0aW9uQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFDbGllbnROb3RpZmljYXRpb24gfSBmcm9tICcuL0thbHR1cmFDbGllbnROb3RpZmljYXRpb24nO1xuXG5pbXBvcnQgeyBLYWx0dXJhTm90aWZpY2F0aW9uVHlwZSB9IGZyb20gJy4vS2FsdHVyYU5vdGlmaWNhdGlvblR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpY2F0aW9uR2V0Q2xpZW50Tm90aWZpY2F0aW9uQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdHR5cGUgOiBLYWx0dXJhTm90aWZpY2F0aW9uVHlwZTtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ25vdGlmaWNhdGlvbicgYWN0aW9uICdnZXRDbGllbnROb3RpZmljYXRpb24nLlxuICpcbiAqIFVzYWdlOiBSZXR1cm4gdGhlIG5vdGlmaWNhdGlvbnMgZm9yIGEgc3BlY2lmaWMgZW50cnkgaWQgYW5kIHR5cGVcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQ2xpZW50Tm90aWZpY2F0aW9uXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RpZmljYXRpb25HZXRDbGllbnROb3RpZmljYXRpb25BY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhQ2xpZW50Tm90aWZpY2F0aW9uPiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHR0eXBlIDogS2FsdHVyYU5vdGlmaWNhdGlvblR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogTm90aWZpY2F0aW9uR2V0Q2xpZW50Tm90aWZpY2F0aW9uQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQ2xpZW50Tm90aWZpY2F0aW9uJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFDbGllbnROb3RpZmljYXRpb24gIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ25vdGlmaWNhdGlvbicgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2dldENsaWVudE5vdGlmaWNhdGlvbicgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYU5vdGlmaWNhdGlvblR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYU5vdGlmaWNhdGlvblR5cGUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
