"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaPlaylist_1 = require("./KalturaPlaylist");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playlist' action 'add'.
 *
 * Usage: Add new playlist
 * Note that all entries used in a playlist will become public and may appear in KalturaNetwork
 *
 * Server response type:         KalturaPlaylist
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlaylistAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlaylistAddAction, _super);
    function PlaylistAddAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPlaylist', responseConstructor: KalturaPlaylist_1.KalturaPlaylist }) || this;
        if (typeof _this.updateStats === 'undefined')
            _this.updateStats = false;
        return _this;
    }
    PlaylistAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playlist' },
            action: { type: 'c', default: 'add' },
            playlist: { type: 'o', subTypeConstructor: KalturaPlaylist_1.KalturaPlaylist, subType: 'KalturaPlaylist' },
            updateStats: { type: 'b' }
        });
        return result;
    };
    return PlaylistAddAction;
}(kaltura_request_1.KalturaRequest));
exports.PlaylistAddAction = PlaylistAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5bGlzdEFkZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEscURBQW9EO0FBRXBELHNEQUF3RTtBQU94RTs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBdUMsNkNBQStCO0lBS2xFLDJCQUFZLElBQTRCO1FBQXhDLFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsaUJBQWlCLEVBQUUsbUJBQW1CLEVBQUcsaUNBQWUsRUFBRyxDQUFDLFNBRWxIO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxXQUFXLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDOztJQUMxRSxDQUFDO0lBRVMsd0NBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsVUFBVSxFQUFFO1lBQzFELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLEtBQUssRUFBRTtZQUN4QyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQzVGLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDbkIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHdCQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QnNDLGdDQUFjLEdBeUJwRDtBQXpCWSw4Q0FBaUIiLCJmaWxlIjoiYXBpL3R5cGVzL1BsYXlsaXN0QWRkQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFQbGF5bGlzdCB9IGZyb20gJy4vS2FsdHVyYVBsYXlsaXN0JztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWxpc3RBZGRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgcGxheWxpc3QgOiBLYWx0dXJhUGxheWxpc3Q7XG5cdHVwZGF0ZVN0YXRzPyA6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwbGF5bGlzdCcgYWN0aW9uICdhZGQnLlxuICpcbiAqIFVzYWdlOiBBZGQgbmV3IHBsYXlsaXN0XG4gKiBOb3RlIHRoYXQgYWxsIGVudHJpZXMgdXNlZCBpbiBhIHBsYXlsaXN0IHdpbGwgYmVjb21lIHB1YmxpYyBhbmQgbWF5IGFwcGVhciBpbiBLYWx0dXJhTmV0d29ya1xuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFQbGF5bGlzdFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUGxheWxpc3RBZGRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUGxheWxpc3Q+IHtcblxuICAgIHBsYXlsaXN0IDogS2FsdHVyYVBsYXlsaXN0O1xuXHR1cGRhdGVTdGF0cyA6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogUGxheWxpc3RBZGRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFQbGF5bGlzdCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhUGxheWxpc3QgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMudXBkYXRlU3RhdHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnVwZGF0ZVN0YXRzID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncGxheWxpc3QnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZGQnIH0sXG5cdFx0XHRcdHBsYXlsaXN0IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUGxheWxpc3QsIHN1YlR5cGUgOiAnS2FsdHVyYVBsYXlsaXN0JyB9LFxuXHRcdFx0XHR1cGRhdGVTdGF0cyA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
