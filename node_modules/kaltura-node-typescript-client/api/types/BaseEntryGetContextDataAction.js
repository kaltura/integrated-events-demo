"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseEntryGetContextDataAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryContextDataResult_1 = require("./KalturaEntryContextDataResult");
var KalturaEntryContextDataParams_1 = require("./KalturaEntryContextDataParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'baseEntry' action 'getContextData'.
 *
 * Usage: This action delivers entry-related data, based on the user's context: access control, restriction, playback format and storage information
 *
 * Server response type:         KalturaEntryContextDataResult
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var BaseEntryGetContextDataAction = /** @class */ (function (_super) {
    tslib_1.__extends(BaseEntryGetContextDataAction, _super);
    function BaseEntryGetContextDataAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEntryContextDataResult', responseConstructor: KalturaEntryContextDataResult_1.KalturaEntryContextDataResult }) || this;
    }
    BaseEntryGetContextDataAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'baseentry' },
            action: { type: 'c', default: 'getContextData' },
            entryId: { type: 's' },
            contextDataParams: { type: 'o', subTypeConstructor: KalturaEntryContextDataParams_1.KalturaEntryContextDataParams, subType: 'KalturaEntryContextDataParams' }
        });
        return result;
    };
    return BaseEntryGetContextDataAction;
}(kaltura_request_1.KalturaRequest));
exports.BaseEntryGetContextDataAction = BaseEntryGetContextDataAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CYXNlRW50cnlHZXRDb250ZXh0RGF0YUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsaUZBQWdGO0FBRWhGLGlGQUFnRjtBQUNoRixzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBbUQseURBQTZDO0lBSzVGLHVDQUFZLElBQXdDO2VBRWhELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLCtCQUErQixFQUFFLG1CQUFtQixFQUFHLDZEQUE2QixFQUFHLENBQUM7SUFDL0ksQ0FBQztJQUVTLG9EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxnQkFBZ0IsRUFBRTtZQUNuRCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2REFBNkIsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7U0FDeEgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLG9DQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QmtELGdDQUFjLEdBd0JoRTtBQXhCWSxzRUFBNkIiLCJmaWxlIjoiYXBpL3R5cGVzL0Jhc2VFbnRyeUdldENvbnRleHREYXRhQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFFbnRyeUNvbnRleHREYXRhUmVzdWx0IH0gZnJvbSAnLi9LYWx0dXJhRW50cnlDb250ZXh0RGF0YVJlc3VsdCc7XG5cbmltcG9ydCB7IEthbHR1cmFFbnRyeUNvbnRleHREYXRhUGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhRW50cnlDb250ZXh0RGF0YVBhcmFtcyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBCYXNlRW50cnlHZXRDb250ZXh0RGF0YUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRjb250ZXh0RGF0YVBhcmFtcyA6IEthbHR1cmFFbnRyeUNvbnRleHREYXRhUGFyYW1zO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnYmFzZUVudHJ5JyBhY3Rpb24gJ2dldENvbnRleHREYXRhJy5cbiAqXG4gKiBVc2FnZTogVGhpcyBhY3Rpb24gZGVsaXZlcnMgZW50cnktcmVsYXRlZCBkYXRhLCBiYXNlZCBvbiB0aGUgdXNlcidzIGNvbnRleHQ6IGFjY2VzcyBjb250cm9sLCByZXN0cmljdGlvbiwgcGxheWJhY2sgZm9ybWF0IGFuZCBzdG9yYWdlIGluZm9ybWF0aW9uXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUVudHJ5Q29udGV4dERhdGFSZXN1bHRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEJhc2VFbnRyeUdldENvbnRleHREYXRhQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUVudHJ5Q29udGV4dERhdGFSZXN1bHQ+IHtcblxuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdGNvbnRleHREYXRhUGFyYW1zIDogS2FsdHVyYUVudHJ5Q29udGV4dERhdGFQYXJhbXM7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogQmFzZUVudHJ5R2V0Q29udGV4dERhdGFBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFFbnRyeUNvbnRleHREYXRhUmVzdWx0JywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeUNvbnRleHREYXRhUmVzdWx0ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdiYXNlZW50cnknIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRDb250ZXh0RGF0YScgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjb250ZXh0RGF0YVBhcmFtcyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5Q29udGV4dERhdGFQYXJhbXMsIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5Q29udGV4dERhdGFQYXJhbXMnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
