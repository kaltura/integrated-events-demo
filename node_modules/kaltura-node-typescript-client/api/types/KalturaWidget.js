"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaWidget = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaWidgetSecurityType_1 = require("./KalturaWidgetSecurityType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaWidget = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaWidget, _super);
    function KalturaWidget(data) {
        return _super.call(this, data) || this;
    }
    KalturaWidget.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaWidget' },
            id: { type: 's', readOnly: true },
            sourceWidgetId: { type: 's' },
            rootWidgetId: { type: 's', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            entryId: { type: 's' },
            uiConfId: { type: 'n' },
            securityType: { type: 'en', subTypeConstructor: KalturaWidgetSecurityType_1.KalturaWidgetSecurityType, subType: 'KalturaWidgetSecurityType' },
            securityPolicy: { type: 'n' },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            partnerData: { type: 's' },
            widgetHTML: { type: 's', readOnly: true },
            enforceEntitlement: { type: 'b' },
            privacyContext: { type: 's' },
            addEmbedHtml5Support: { type: 'b' },
            roles: { type: 's' },
            privileges: { type: 's' }
        });
        return result;
    };
    return KalturaWidget;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaWidget = KalturaWidget;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaWidget', KalturaWidget);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhV2lkZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QseUVBQXdFO0FBQ3hFLDhEQUFrRjtBQWlCbEY7SUFBbUMseUNBQWlCO0lBb0JoRCx1QkFBWSxJQUF5QjtlQUVqQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsb0NBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZUFBZSxFQUFFO1lBQ2xFLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUNwQyxjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUM5QyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQ3JILGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUM1QyxrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbkMsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckMsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2xCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxvQkFBQztBQUFELENBckRBLEFBcURDLENBckRrQyx1Q0FBaUIsR0FxRG5EO0FBckRZLHNDQUFhO0FBdUQxQiwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFDLGFBQWEsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhV2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVdpZGdldFNlY3VyaXR5VHlwZSB9IGZyb20gJy4vS2FsdHVyYVdpZGdldFNlY3VyaXR5VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVdpZGdldEFyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBzb3VyY2VXaWRnZXRJZD8gOiBzdHJpbmc7XG5cdGVudHJ5SWQ/IDogc3RyaW5nO1xuXHR1aUNvbmZJZD8gOiBudW1iZXI7XG5cdHNlY3VyaXR5VHlwZT8gOiBLYWx0dXJhV2lkZ2V0U2VjdXJpdHlUeXBlO1xuXHRzZWN1cml0eVBvbGljeT8gOiBudW1iZXI7XG5cdHBhcnRuZXJEYXRhPyA6IHN0cmluZztcblx0ZW5mb3JjZUVudGl0bGVtZW50PyA6IGJvb2xlYW47XG5cdHByaXZhY3lDb250ZXh0PyA6IHN0cmluZztcblx0YWRkRW1iZWRIdG1sNVN1cHBvcnQ/IDogYm9vbGVhbjtcblx0cm9sZXM/IDogc3RyaW5nO1xuXHRwcml2aWxlZ2VzPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVdpZGdldCBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IGlkIDogc3RyaW5nO1xuXHRzb3VyY2VXaWRnZXRJZCA6IHN0cmluZztcblx0cmVhZG9ubHkgcm9vdFdpZGdldElkIDogc3RyaW5nO1xuXHRyZWFkb25seSBwYXJ0bmVySWQgOiBudW1iZXI7XG5cdGVudHJ5SWQgOiBzdHJpbmc7XG5cdHVpQ29uZklkIDogbnVtYmVyO1xuXHRzZWN1cml0eVR5cGUgOiBLYWx0dXJhV2lkZ2V0U2VjdXJpdHlUeXBlO1xuXHRzZWN1cml0eVBvbGljeSA6IG51bWJlcjtcblx0cmVhZG9ubHkgY3JlYXRlZEF0IDogRGF0ZTtcblx0cmVhZG9ubHkgdXBkYXRlZEF0IDogRGF0ZTtcblx0cGFydG5lckRhdGEgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHdpZGdldEhUTUwgOiBzdHJpbmc7XG5cdGVuZm9yY2VFbnRpdGxlbWVudCA6IGJvb2xlYW47XG5cdHByaXZhY3lDb250ZXh0IDogc3RyaW5nO1xuXHRhZGRFbWJlZEh0bWw1U3VwcG9ydCA6IGJvb2xlYW47XG5cdHJvbGVzIDogc3RyaW5nO1xuXHRwcml2aWxlZ2VzIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhV2lkZ2V0QXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFXaWRnZXQnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ3MnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c291cmNlV2lkZ2V0SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cm9vdFdpZGdldElkIDogeyB0eXBlIDogJ3MnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1aUNvbmZJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzZWN1cml0eVR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhV2lkZ2V0U2VjdXJpdHlUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFXaWRnZXRTZWN1cml0eVR5cGUnIH0sXG5cdFx0XHRcdHNlY3VyaXR5UG9saWN5IDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdCA6IHsgdHlwZSA6ICdkJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHVwZGF0ZWRBdCA6IHsgdHlwZSA6ICdkJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHBhcnRuZXJEYXRhIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHdpZGdldEhUTUwgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRlbmZvcmNlRW50aXRsZW1lbnQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cHJpdmFjeUNvbnRleHQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0YWRkRW1iZWRIdG1sNVN1cHBvcnQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cm9sZXMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJpdmlsZWdlcyA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVdpZGdldCcsS2FsdHVyYVdpZGdldCk7XG4iXX0=
