"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventNotificationTemplateSendCommandAction = void 0;
var tslib_1 = require("tslib");
var KalturaPushNotificationParams_1 = require("./KalturaPushNotificationParams");
var KalturaPushNotificationCommandType_1 = require("./KalturaPushNotificationCommandType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'eventNotificationTemplate' action 'sendCommand'.
 *
 * Usage: Clear queue messages
 *
 * Server response type:         void
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EventNotificationTemplateSendCommandAction = /** @class */ (function (_super) {
    tslib_1.__extends(EventNotificationTemplateSendCommandAction, _super);
    function EventNotificationTemplateSendCommandAction(data) {
        return _super.call(this, data, { responseType: 'v', responseSubType: '', responseConstructor: null }) || this;
    }
    EventNotificationTemplateSendCommandAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'eventnotification_eventnotificationtemplate' },
            action: { type: 'c', default: 'sendCommand' },
            notificationTemplateSystemName: { type: 's' },
            pushNotificationParams: { type: 'o', subTypeConstructor: KalturaPushNotificationParams_1.KalturaPushNotificationParams, subType: 'KalturaPushNotificationParams' },
            command: { type: 'es', subTypeConstructor: KalturaPushNotificationCommandType_1.KalturaPushNotificationCommandType, subType: 'KalturaPushNotificationCommandType' }
        });
        return result;
    };
    return EventNotificationTemplateSendCommandAction;
}(kaltura_request_1.KalturaRequest));
exports.EventNotificationTemplateSendCommandAction = EventNotificationTemplateSendCommandAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlU2VuZENvbW1hbmRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLGlGQUFnRjtBQUNoRiwyRkFBMEY7QUFDMUYsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQWdFLHNFQUFvQjtJQU1oRixvREFBWSxJQUFxRDtlQUU3RCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUM7SUFDeEYsQ0FBQztJQUVTLGlFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDZDQUE2QyxFQUFFO1lBQzdGLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUNoRCw4QkFBOEIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0Msc0JBQXNCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZEQUE2QixFQUFFLE9BQU8sRUFBRywrQkFBK0IsRUFBRTtZQUN0SSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHVFQUFrQyxFQUFFLE9BQU8sRUFBRyxvQ0FBb0MsRUFBRTtTQUN6SCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsaURBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCK0QsZ0NBQWMsR0EwQjdFO0FBMUJZLGdHQUEwQyIsImZpbGUiOiJhcGkvdHlwZXMvRXZlbnROb3RpZmljYXRpb25UZW1wbGF0ZVNlbmRDb21tYW5kQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuXG5pbXBvcnQgeyBLYWx0dXJhUHVzaE5vdGlmaWNhdGlvblBhcmFtcyB9IGZyb20gJy4vS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXMnO1xuaW1wb3J0IHsgS2FsdHVyYVB1c2hOb3RpZmljYXRpb25Db21tYW5kVHlwZSB9IGZyb20gJy4vS2FsdHVyYVB1c2hOb3RpZmljYXRpb25Db21tYW5kVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlU2VuZENvbW1hbmRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgbm90aWZpY2F0aW9uVGVtcGxhdGVTeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRwdXNoTm90aWZpY2F0aW9uUGFyYW1zIDogS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXM7XG5cdGNvbW1hbmQgOiBLYWx0dXJhUHVzaE5vdGlmaWNhdGlvbkNvbW1hbmRUeXBlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnZXZlbnROb3RpZmljYXRpb25UZW1wbGF0ZScgYWN0aW9uICdzZW5kQ29tbWFuZCcuXG4gKlxuICogVXNhZ2U6IENsZWFyIHF1ZXVlIG1lc3NhZ2VzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgdm9pZFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRXZlbnROb3RpZmljYXRpb25UZW1wbGF0ZVNlbmRDb21tYW5kQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8dm9pZD4ge1xuXG4gICAgbm90aWZpY2F0aW9uVGVtcGxhdGVTeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRwdXNoTm90aWZpY2F0aW9uUGFyYW1zIDogS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXM7XG5cdGNvbW1hbmQgOiBLYWx0dXJhUHVzaE5vdGlmaWNhdGlvbkNvbW1hbmRUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IEV2ZW50Tm90aWZpY2F0aW9uVGVtcGxhdGVTZW5kQ29tbWFuZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ3YnLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXZlbnRub3RpZmljYXRpb25fZXZlbnRub3RpZmljYXRpb250ZW1wbGF0ZScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NlbmRDb21tYW5kJyB9LFxuXHRcdFx0XHRub3RpZmljYXRpb25UZW1wbGF0ZVN5c3RlbU5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHVzaE5vdGlmaWNhdGlvblBhcmFtcyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXMsIHN1YlR5cGUgOiAnS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXMnIH0sXG5cdFx0XHRcdGNvbW1hbmQgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUHVzaE5vdGlmaWNhdGlvbkNvbW1hbmRUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFQdXNoTm90aWZpY2F0aW9uQ29tbWFuZFR5cGUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
