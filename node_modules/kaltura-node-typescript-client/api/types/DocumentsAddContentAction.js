"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsAddContentAction = void 0;
var tslib_1 = require("tslib");
var KalturaDocumentEntry_1 = require("./KalturaDocumentEntry");
var KalturaResource_1 = require("./KalturaResource");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'documents' action 'addContent'.
 *
 * Usage: Add content to document entry which is not yet associated with content (therefore is in status NO_CONTENT).
 * If the requirement is to replace the entry's associated content, use action updateContent
 *
 * Server response type:         KalturaDocumentEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DocumentsAddContentAction = /** @class */ (function (_super) {
    tslib_1.__extends(DocumentsAddContentAction, _super);
    function DocumentsAddContentAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaDocumentEntry', responseConstructor: KalturaDocumentEntry_1.KalturaDocumentEntry }) || this;
    }
    DocumentsAddContentAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'document_documents' },
            action: { type: 'c', default: 'addContent' },
            entryId: { type: 's' },
            resource: { type: 'o', subTypeConstructor: KalturaResource_1.KalturaResource, subType: 'KalturaResource' }
        });
        return result;
    };
    return DocumentsAddContentAction;
}(kaltura_request_1.KalturaRequest));
exports.DocumentsAddContentAction = DocumentsAddContentAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Eb2N1bWVudHNBZGRDb250ZW50QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSwrREFBOEQ7QUFFOUQscURBQW9EO0FBQ3BELHNEQUF3RTtBQU94RTs7Ozs7Ozs7OztHQVVHO0FBQ0g7SUFBK0MscURBQW9DO0lBSy9FLG1DQUFZLElBQW9DO2VBRTVDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHNCQUFzQixFQUFFLG1CQUFtQixFQUFHLDJDQUFvQixFQUFHLENBQUM7SUFDN0gsQ0FBQztJQUVTLGdEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1lBQ3BFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFlBQVksRUFBRTtZQUMvQyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsaUNBQWUsRUFBRSxPQUFPLEVBQUcsaUJBQWlCLEVBQUU7U0FDbkYsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGdDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QjhDLGdDQUFjLEdBd0I1RDtBQXhCWSw4REFBeUIiLCJmaWxlIjoiYXBpL3R5cGVzL0RvY3VtZW50c0FkZENvbnRlbnRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYURvY3VtZW50RW50cnkgfSBmcm9tICcuL0thbHR1cmFEb2N1bWVudEVudHJ5JztcblxuaW1wb3J0IHsgS2FsdHVyYVJlc291cmNlIH0gZnJvbSAnLi9LYWx0dXJhUmVzb3VyY2UnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRzQWRkQ29udGVudEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRyZXNvdXJjZT8gOiBLYWx0dXJhUmVzb3VyY2U7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdkb2N1bWVudHMnIGFjdGlvbiAnYWRkQ29udGVudCcuXG4gKlxuICogVXNhZ2U6IEFkZCBjb250ZW50IHRvIGRvY3VtZW50IGVudHJ5IHdoaWNoIGlzIG5vdCB5ZXQgYXNzb2NpYXRlZCB3aXRoIGNvbnRlbnQgKHRoZXJlZm9yZSBpcyBpbiBzdGF0dXMgTk9fQ09OVEVOVCkuXG4gKiBJZiB0aGUgcmVxdWlyZW1lbnQgaXMgdG8gcmVwbGFjZSB0aGUgZW50cnkncyBhc3NvY2lhdGVkIGNvbnRlbnQsIHVzZSBhY3Rpb24gdXBkYXRlQ29udGVudFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFEb2N1bWVudEVudHJ5XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBEb2N1bWVudHNBZGRDb250ZW50QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYURvY3VtZW50RW50cnk+IHtcblxuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdHJlc291cmNlIDogS2FsdHVyYVJlc291cmNlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IERvY3VtZW50c0FkZENvbnRlbnRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFEb2N1bWVudEVudHJ5JywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFEb2N1bWVudEVudHJ5ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdkb2N1bWVudF9kb2N1bWVudHMnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZGRDb250ZW50JyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlc291cmNlIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVzb3VyY2UsIHN1YlR5cGUgOiAnS2FsdHVyYVJlc291cmNlJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
