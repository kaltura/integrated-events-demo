"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayReadyDrmGetEntryContentKeyAction = void 0;
var tslib_1 = require("tslib");
var KalturaPlayReadyContentKey_1 = require("./KalturaPlayReadyContentKey");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playReadyDrm' action 'getEntryContentKey'.
 *
 * Usage: Get content key and key id for the given entry
 *
 * Server response type:         KalturaPlayReadyContentKey
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlayReadyDrmGetEntryContentKeyAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlayReadyDrmGetEntryContentKeyAction, _super);
    function PlayReadyDrmGetEntryContentKeyAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPlayReadyContentKey', responseConstructor: KalturaPlayReadyContentKey_1.KalturaPlayReadyContentKey }) || this;
        if (typeof _this.createIfMissing === 'undefined')
            _this.createIfMissing = false;
        return _this;
    }
    PlayReadyDrmGetEntryContentKeyAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playready_playreadydrm' },
            action: { type: 'c', default: 'getEntryContentKey' },
            entryId: { type: 's' },
            createIfMissing: { type: 'b' }
        });
        return result;
    };
    return PlayReadyDrmGetEntryContentKeyAction;
}(kaltura_request_1.KalturaRequest));
exports.PlayReadyDrmGetEntryContentKeyAction = PlayReadyDrmGetEntryContentKeyAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5UmVhZHlEcm1HZXRFbnRyeUNvbnRlbnRLZXlBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDJFQUEwRTtBQUUxRSxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMEQsZ0VBQTBDO0lBS2hHLDhDQUFZLElBQStDO1FBQTNELFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsNEJBQTRCLEVBQUUsbUJBQW1CLEVBQUcsdURBQTBCLEVBQUcsQ0FBQyxTQUV4STtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsZUFBZSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQzs7SUFDbEYsQ0FBQztJQUVTLDJEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQ3hFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1lBQ3ZELE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN2QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQXpCQSxBQXlCQyxDQXpCeUQsZ0NBQWMsR0F5QnZFO0FBekJZLG9GQUFvQyIsImZpbGUiOiJhcGkvdHlwZXMvUGxheVJlYWR5RHJtR2V0RW50cnlDb250ZW50S2V5QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFQbGF5UmVhZHlDb250ZW50S2V5IH0gZnJvbSAnLi9LYWx0dXJhUGxheVJlYWR5Q29udGVudEtleSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBsYXlSZWFkeURybUdldEVudHJ5Q29udGVudEtleUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRjcmVhdGVJZk1pc3Npbmc/IDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3BsYXlSZWFkeURybScgYWN0aW9uICdnZXRFbnRyeUNvbnRlbnRLZXknLlxuICpcbiAqIFVzYWdlOiBHZXQgY29udGVudCBrZXkgYW5kIGtleSBpZCBmb3IgdGhlIGdpdmVuIGVudHJ5XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVBsYXlSZWFkeUNvbnRlbnRLZXlcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXlSZWFkeURybUdldEVudHJ5Q29udGVudEtleUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFQbGF5UmVhZHlDb250ZW50S2V5PiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRjcmVhdGVJZk1pc3NpbmcgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBsYXlSZWFkeURybUdldEVudHJ5Q29udGVudEtleUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVBsYXlSZWFkeUNvbnRlbnRLZXknLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBsYXlSZWFkeUNvbnRlbnRLZXkgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuY3JlYXRlSWZNaXNzaW5nID09PSAndW5kZWZpbmVkJykgdGhpcy5jcmVhdGVJZk1pc3NpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdwbGF5cmVhZHlfcGxheXJlYWR5ZHJtJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0RW50cnlDb250ZW50S2V5JyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNyZWF0ZUlmTWlzc2luZyA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
