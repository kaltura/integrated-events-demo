"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ESearchSearchCategoryAction = void 0;
var tslib_1 = require("tslib");
var KalturaESearchCategoryResponse_1 = require("./KalturaESearchCategoryResponse");
var KalturaESearchCategoryParams_1 = require("./KalturaESearchCategoryParams");
var KalturaPager_1 = require("./KalturaPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'eSearch' action 'searchCategory'.
 *
 *
 *
 * Server response type:         KalturaESearchCategoryResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ESearchSearchCategoryAction = /** @class */ (function (_super) {
    tslib_1.__extends(ESearchSearchCategoryAction, _super);
    function ESearchSearchCategoryAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaESearchCategoryResponse', responseConstructor: KalturaESearchCategoryResponse_1.KalturaESearchCategoryResponse }) || this;
    }
    ESearchSearchCategoryAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'elasticsearch_esearch' },
            action: { type: 'c', default: 'searchCategory' },
            searchParams: { type: 'o', subTypeConstructor: KalturaESearchCategoryParams_1.KalturaESearchCategoryParams, subType: 'KalturaESearchCategoryParams' },
            pager: { type: 'o', subTypeConstructor: KalturaPager_1.KalturaPager, subType: 'KalturaPager' }
        });
        return result;
    };
    return ESearchSearchCategoryAction;
}(kaltura_request_1.KalturaRequest));
exports.ESearchSearchCategoryAction = ESearchSearchCategoryAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FU2VhcmNoU2VhcmNoQ2F0ZWdvcnlBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1GQUFrRjtBQUVsRiwrRUFBOEU7QUFDOUUsK0NBQThDO0FBQzlDLHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFpRCx1REFBOEM7SUFLM0YscUNBQVksSUFBc0M7ZUFFOUMsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsZ0NBQWdDLEVBQUUsbUJBQW1CLEVBQUcsK0RBQThCLEVBQUcsQ0FBQztJQUNqSixDQUFDO0lBRVMsa0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDdkUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZ0JBQWdCLEVBQUU7WUFDbkQsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7WUFDMUgsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyQkFBWSxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7U0FDMUUsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QmdELGdDQUFjLEdBd0I5RDtBQXhCWSxrRUFBMkIiLCJmaWxlIjoiYXBpL3R5cGVzL0VTZWFyY2hTZWFyY2hDYXRlZ29yeUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhRVNlYXJjaENhdGVnb3J5UmVzcG9uc2UgfSBmcm9tICcuL0thbHR1cmFFU2VhcmNoQ2F0ZWdvcnlSZXNwb25zZSc7XG5cbmltcG9ydCB7IEthbHR1cmFFU2VhcmNoQ2F0ZWdvcnlQYXJhbXMgfSBmcm9tICcuL0thbHR1cmFFU2VhcmNoQ2F0ZWdvcnlQYXJhbXMnO1xuaW1wb3J0IHsgS2FsdHVyYVBhZ2VyIH0gZnJvbSAnLi9LYWx0dXJhUGFnZXInO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRVNlYXJjaFNlYXJjaENhdGVnb3J5QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHNlYXJjaFBhcmFtcyA6IEthbHR1cmFFU2VhcmNoQ2F0ZWdvcnlQYXJhbXM7XG5cdHBhZ2VyPyA6IEthbHR1cmFQYWdlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2VTZWFyY2gnIGFjdGlvbiAnc2VhcmNoQ2F0ZWdvcnknLlxuICpcbiAqIFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFFU2VhcmNoQ2F0ZWdvcnlSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRVNlYXJjaFNlYXJjaENhdGVnb3J5QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUVTZWFyY2hDYXRlZ29yeVJlc3BvbnNlPiB7XG5cbiAgICBzZWFyY2hQYXJhbXMgOiBLYWx0dXJhRVNlYXJjaENhdGVnb3J5UGFyYW1zO1xuXHRwYWdlciA6IEthbHR1cmFQYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBFU2VhcmNoU2VhcmNoQ2F0ZWdvcnlBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoQ2F0ZWdvcnlSZXNwb25zZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhRVNlYXJjaENhdGVnb3J5UmVzcG9uc2UgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2VsYXN0aWNzZWFyY2hfZXNlYXJjaCcgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NlYXJjaENhdGVnb3J5JyB9LFxuXHRcdFx0XHRzZWFyY2hQYXJhbXMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFU2VhcmNoQ2F0ZWdvcnlQYXJhbXMsIHN1YlR5cGUgOiAnS2FsdHVyYUVTZWFyY2hDYXRlZ29yeVBhcmFtcycgfSxcblx0XHRcdFx0cGFnZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFQYWdlciwgc3ViVHlwZSA6ICdLYWx0dXJhUGFnZXInIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
