"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaScheduler = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaSchedulerStatus_1 = require("./KalturaSchedulerStatus");
var KalturaSchedulerConfig_1 = require("./KalturaSchedulerConfig");
var KalturaSchedulerWorker_1 = require("./KalturaSchedulerWorker");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaScheduler = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaScheduler, _super);
    function KalturaScheduler(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.statuses === 'undefined')
            _this.statuses = [];
        if (typeof _this.configs === 'undefined')
            _this.configs = [];
        if (typeof _this.workers === 'undefined')
            _this.workers = [];
        return _this;
    }
    KalturaScheduler.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaScheduler' },
            id: { type: 'n', readOnly: true },
            configuredId: { type: 'n' },
            name: { type: 's' },
            host: { type: 's' },
            statuses: { type: 'a', readOnly: true, subTypeConstructor: KalturaSchedulerStatus_1.KalturaSchedulerStatus, subType: 'KalturaSchedulerStatus' },
            configs: { type: 'a', readOnly: true, subTypeConstructor: KalturaSchedulerConfig_1.KalturaSchedulerConfig, subType: 'KalturaSchedulerConfig' },
            workers: { type: 'a', readOnly: true, subTypeConstructor: KalturaSchedulerWorker_1.KalturaSchedulerWorker, subType: 'KalturaSchedulerWorker' },
            createdAt: { type: 'd', readOnly: true },
            lastStatus: { type: 'n', readOnly: true },
            lastStatusStr: { type: 's', readOnly: true }
        });
        return result;
    };
    return KalturaScheduler;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaScheduler = KalturaScheduler;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaScheduler', KalturaScheduler);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhU2NoZWR1bGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUVBQWtFO0FBQ2xFLG1FQUFrRTtBQUNsRSxtRUFBa0U7QUFDbEUsOERBQWtGO0FBU2xGO0lBQXNDLDRDQUFpQjtJQWFuRCwwQkFBWSxJQUE0QjtRQUF4QyxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUlkO1FBSEcsSUFBSSxPQUFPLEtBQUksQ0FBQyxRQUFRLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25FLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxJQUFJLE9BQU8sS0FBSSxDQUFDLE9BQU8sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O0lBQ3pELENBQUM7SUFFUyx1Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxrQkFBa0IsRUFBRTtZQUNyRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMzSCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0NBQXNCLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzFILE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDMUgsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUM1QyxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7U0FDdEMsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHVCQUFDO0FBQUQsQ0ExQ0EsQUEwQ0MsQ0ExQ3FDLHVDQUFpQixHQTBDdEQ7QUExQ1ksNENBQWdCO0FBNEM3QiwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVNjaGVkdWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFTY2hlZHVsZXJTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFTY2hlZHVsZXJTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlckNvbmZpZyB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlckNvbmZpZyc7XG5pbXBvcnQgeyBLYWx0dXJhU2NoZWR1bGVyV29ya2VyIH0gZnJvbSAnLi9LYWx0dXJhU2NoZWR1bGVyV29ya2VyJztcbmltcG9ydCB7IEthbHR1cmFPYmplY3RCYXNlLCBLYWx0dXJhT2JqZWN0QmFzZUFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhU2NoZWR1bGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZUFyZ3Mge1xuICAgIGNvbmZpZ3VyZWRJZD8gOiBudW1iZXI7XG5cdG5hbWU/IDogc3RyaW5nO1xuXHRob3N0PyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVNjaGVkdWxlciBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IGlkIDogbnVtYmVyO1xuXHRjb25maWd1cmVkSWQgOiBudW1iZXI7XG5cdG5hbWUgOiBzdHJpbmc7XG5cdGhvc3QgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHN0YXR1c2VzIDogS2FsdHVyYVNjaGVkdWxlclN0YXR1c1tdO1xuXHRyZWFkb25seSBjb25maWdzIDogS2FsdHVyYVNjaGVkdWxlckNvbmZpZ1tdO1xuXHRyZWFkb25seSB3b3JrZXJzIDogS2FsdHVyYVNjaGVkdWxlcldvcmtlcltdO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSBsYXN0U3RhdHVzIDogbnVtYmVyO1xuXHRyZWFkb25seSBsYXN0U3RhdHVzU3RyIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhU2NoZWR1bGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc3RhdHVzZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnN0YXR1c2VzID0gW107XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmNvbmZpZ3MgPT09ICd1bmRlZmluZWQnKSB0aGlzLmNvbmZpZ3MgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMud29ya2VycyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMud29ya2VycyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFTY2hlZHVsZXInIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y29uZmlndXJlZElkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdG5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aG9zdCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNlcyA6IHsgdHlwZSA6ICdhJywgcmVhZE9ubHkgOiB0cnVlLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU2NoZWR1bGVyU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZXJTdGF0dXMnIH0sXG5cdFx0XHRcdGNvbmZpZ3MgOiB7IHR5cGUgOiAnYScsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlckNvbmZpZywgc3ViVHlwZSA6ICdLYWx0dXJhU2NoZWR1bGVyQ29uZmlnJyB9LFxuXHRcdFx0XHR3b3JrZXJzIDogeyB0eXBlIDogJ2EnLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTY2hlZHVsZXJXb3JrZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVNjaGVkdWxlcldvcmtlcicgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bGFzdFN0YXR1cyA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGxhc3RTdGF0dXNTdHIgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVNjaGVkdWxlcicsS2FsdHVyYVNjaGVkdWxlcik7XG4iXX0=
