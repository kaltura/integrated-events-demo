"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdminUserUpdatePasswordAction = void 0;
var tslib_1 = require("tslib");
var KalturaAdminUser_1 = require("./KalturaAdminUser");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'adminUser' action 'updatePassword'.
 *
 * Usage: Update admin user password and email
 *
 * Server response type:         KalturaAdminUser
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var AdminUserUpdatePasswordAction = /** @class */ (function (_super) {
    tslib_1.__extends(AdminUserUpdatePasswordAction, _super);
    function AdminUserUpdatePasswordAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaAdminUser', responseConstructor: KalturaAdminUser_1.KalturaAdminUser }) || this;
    }
    AdminUserUpdatePasswordAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'adminuser' },
            action: { type: 'c', default: 'updatePassword' },
            email: { type: 's' },
            password: { type: 's' },
            newEmail: { type: 's' },
            newPassword: { type: 's' },
            otp: { type: 's' }
        });
        return result;
    };
    return AdminUserUpdatePasswordAction;
}(kaltura_request_1.KalturaRequest));
exports.AdminUserUpdatePasswordAction = AdminUserUpdatePasswordAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9BZG1pblVzZXJVcGRhdGVQYXNzd29yZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsdURBQXNEO0FBRXRELHNEQUF3RTtBQVV4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFtRCx5REFBZ0M7SUFRL0UsdUNBQVksSUFBd0M7ZUFFaEQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsa0JBQWtCLEVBQUUsbUJBQW1CLEVBQUcsbUNBQWdCLEVBQUcsQ0FBQztJQUNySCxDQUFDO0lBRVMsb0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsV0FBVyxFQUFFO1lBQzNELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdCQUFnQixFQUFFO1lBQ25ELEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdEIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsR0FBRyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNYLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxvQ0FBQztBQUFELENBOUJBLEFBOEJDLENBOUJrRCxnQ0FBYyxHQThCaEU7QUE5Qlksc0VBQTZCIiwiZmlsZSI6ImFwaS90eXBlcy9BZG1pblVzZXJVcGRhdGVQYXNzd29yZEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQWRtaW5Vc2VyIH0gZnJvbSAnLi9LYWx0dXJhQWRtaW5Vc2VyJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRtaW5Vc2VyVXBkYXRlUGFzc3dvcmRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZW1haWwgOiBzdHJpbmc7XG5cdHBhc3N3b3JkIDogc3RyaW5nO1xuXHRuZXdFbWFpbD8gOiBzdHJpbmc7XG5cdG5ld1Bhc3N3b3JkPyA6IHN0cmluZztcblx0b3RwPyA6IHN0cmluZztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2FkbWluVXNlcicgYWN0aW9uICd1cGRhdGVQYXNzd29yZCcuXG4gKlxuICogVXNhZ2U6IFVwZGF0ZSBhZG1pbiB1c2VyIHBhc3N3b3JkIGFuZCBlbWFpbFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFBZG1pblVzZXJcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEFkbWluVXNlclVwZGF0ZVBhc3N3b3JkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUFkbWluVXNlcj4ge1xuXG4gICAgZW1haWwgOiBzdHJpbmc7XG5cdHBhc3N3b3JkIDogc3RyaW5nO1xuXHRuZXdFbWFpbCA6IHN0cmluZztcblx0bmV3UGFzc3dvcmQgOiBzdHJpbmc7XG5cdG90cCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBBZG1pblVzZXJVcGRhdGVQYXNzd29yZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUFkbWluVXNlcicsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQWRtaW5Vc2VyICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZG1pbnVzZXInIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVQYXNzd29yZCcgfSxcblx0XHRcdFx0ZW1haWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bmV3RW1haWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bmV3UGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0b3RwIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
