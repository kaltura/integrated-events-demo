"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDistributionValidationError = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionAction_1 = require("./KalturaDistributionAction");
var KalturaDistributionErrorType_1 = require("./KalturaDistributionErrorType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaDistributionValidationError = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDistributionValidationError, _super);
    function KalturaDistributionValidationError(data) {
        return _super.call(this, data) || this;
    }
    KalturaDistributionValidationError.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDistributionValidationError' },
            action: { type: 'en', subTypeConstructor: KalturaDistributionAction_1.KalturaDistributionAction, subType: 'KalturaDistributionAction' },
            errorType: { type: 'en', subTypeConstructor: KalturaDistributionErrorType_1.KalturaDistributionErrorType, subType: 'KalturaDistributionErrorType' },
            description: { type: 's' }
        });
        return result;
    };
    return KalturaDistributionValidationError;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaDistributionValidationError = KalturaDistributionValidationError;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDistributionValidationError', KalturaDistributionValidationError);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QseUVBQXdFO0FBQ3hFLCtFQUE4RTtBQUM5RSw4REFBa0Y7QUFTbEY7SUFBd0QsOERBQWlCO0lBTXJFLDRDQUFZLElBQThDO2VBRXRELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyx5REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvQ0FBb0MsRUFBRTtZQUN2RixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUMvRyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDJEQUE0QixFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUN4SCxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ25CLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx5Q0FBQztBQUFELENBekJBLEFBeUJDLENBekJ1RCx1Q0FBaUIsR0F5QnhFO0FBekJZLGdGQUFrQztBQTJCL0MsMkNBQW1CLENBQUMsWUFBWSxDQUFDLG9DQUFvQyxFQUFDLGtDQUFrQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uIH0gZnJvbSAnLi9LYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uJztcbmltcG9ydCB7IEthbHR1cmFEaXN0cmlidXRpb25FcnJvclR5cGUgfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25FcnJvclR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3JBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgYWN0aW9uPyA6IEthbHR1cmFEaXN0cmlidXRpb25BY3Rpb247XG5cdGVycm9yVHlwZT8gOiBLYWx0dXJhRGlzdHJpYnV0aW9uRXJyb3JUeXBlO1xuXHRkZXNjcmlwdGlvbj8gOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICBhY3Rpb24gOiBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uO1xuXHRlcnJvclR5cGUgOiBLYWx0dXJhRGlzdHJpYnV0aW9uRXJyb3JUeXBlO1xuXHRkZXNjcmlwdGlvbiA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYURpc3RyaWJ1dGlvblZhbGlkYXRpb25FcnJvckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRGlzdHJpYnV0aW9uVmFsaWRhdGlvbkVycm9yJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uLCBzdWJUeXBlIDogJ0thbHR1cmFEaXN0cmlidXRpb25BY3Rpb24nIH0sXG5cdFx0XHRcdGVycm9yVHlwZSA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEaXN0cmlidXRpb25FcnJvclR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvbkVycm9yVHlwZScgfSxcblx0XHRcdFx0ZGVzY3JpcHRpb24gOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3InLEthbHR1cmFEaXN0cmlidXRpb25WYWxpZGF0aW9uRXJyb3IpO1xuIl19
