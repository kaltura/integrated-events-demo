"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaUserFilter_1 = require("./KalturaUserFilter");
var KalturaCsvAdditionalFieldInfo_1 = require("./KalturaCsvAdditionalFieldInfo");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaExportToCsvOptions_1 = require("./KalturaExportToCsvOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'user' action 'exportToCsv'.
 *
 * Usage: Creates a batch job that sends an email with a link to download a CSV containing a list of users
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var UserExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(UserExportToCsvAction, _super);
    function UserExportToCsvAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.additionalFields === 'undefined')
            _this.additionalFields = [];
        if (typeof _this.mappedFields === 'undefined')
            _this.mappedFields = [];
        return _this;
    }
    UserExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'user' },
            action: { type: 'c', default: 'exportToCsv' },
            filter: { type: 'o', subTypeConstructor: KalturaUserFilter_1.KalturaUserFilter, subType: 'KalturaUserFilter' },
            metadataProfileId: { type: 'n' },
            additionalFields: { type: 'a', subTypeConstructor: KalturaCsvAdditionalFieldInfo_1.KalturaCsvAdditionalFieldInfo, subType: 'KalturaCsvAdditionalFieldInfo' },
            mappedFields: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            options: { type: 'o', subTypeConstructor: KalturaExportToCsvOptions_1.KalturaExportToCsvOptions, subType: 'KalturaExportToCsvOptions' }
        });
        return result;
    };
    return UserExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.UserExportToCsvAction = UserExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Vc2VyRXhwb3J0VG9Dc3ZBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHlEQUF3RDtBQUN4RCxpRkFBZ0Y7QUFDaEYscURBQW9EO0FBQ3BELHlFQUF3RTtBQUN4RSxzREFBd0U7QUFVeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMkMsaURBQXNCO0lBUTdELCtCQUFZLElBQWlDO1FBQTdDLFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsRUFBRSxFQUFFLG1CQUFtQixFQUFHLElBQUksRUFBRSxDQUFDLFNBR3ZGO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxnQkFBZ0IsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUNuRixJQUFJLE9BQU8sS0FBSSxDQUFDLFlBQVksS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7O0lBQ25FLENBQUM7SUFFUyw0Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxNQUFNLEVBQUU7WUFDdEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFO1lBQ2hELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcscUNBQWlCLEVBQUUsT0FBTyxFQUFHLG1CQUFtQixFQUFFO1lBQzlGLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNsQyxnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkRBQTZCLEVBQUUsT0FBTyxFQUFHLCtCQUErQixFQUFFO1lBQ2hJLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsaUNBQWUsRUFBRSxPQUFPLEVBQUcsaUJBQWlCLEVBQUU7WUFDaEcsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxxREFBeUIsRUFBRSxPQUFPLEVBQUcsMkJBQTJCLEVBQUU7U0FDdEcsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsQ0FoQzBDLGdDQUFjLEdBZ0N4RDtBQWhDWSxzREFBcUIiLCJmaWxlIjoiYXBpL3R5cGVzL1VzZXJFeHBvcnRUb0NzdkFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVVzZXJGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFVc2VyRmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFDc3ZBZGRpdGlvbmFsRmllbGRJbmZvIH0gZnJvbSAnLi9LYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mbyc7XG5pbXBvcnQgeyBLYWx0dXJhS2V5VmFsdWUgfSBmcm9tICcuL0thbHR1cmFLZXlWYWx1ZSc7XG5pbXBvcnQgeyBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zIH0gZnJvbSAnLi9LYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJFeHBvcnRUb0NzdkFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBmaWx0ZXI/IDogS2FsdHVyYVVzZXJGaWx0ZXI7XG5cdG1ldGFkYXRhUHJvZmlsZUlkPyA6IG51bWJlcjtcblx0YWRkaXRpb25hbEZpZWxkcz8gOiBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mb1tdO1xuXHRtYXBwZWRGaWVsZHM/IDogS2FsdHVyYUtleVZhbHVlW107XG5cdG9wdGlvbnM/IDogS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3VzZXInIGFjdGlvbiAnZXhwb3J0VG9Dc3YnLlxuICpcbiAqIFVzYWdlOiBDcmVhdGVzIGEgYmF0Y2ggam9iIHRoYXQgc2VuZHMgYW4gZW1haWwgd2l0aCBhIGxpbmsgdG8gZG93bmxvYWQgYSBDU1YgY29udGFpbmluZyBhIGxpc3Qgb2YgdXNlcnNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXJFeHBvcnRUb0NzdkFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PHN0cmluZz4ge1xuXG4gICAgZmlsdGVyIDogS2FsdHVyYVVzZXJGaWx0ZXI7XG5cdG1ldGFkYXRhUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRhZGRpdGlvbmFsRmllbGRzIDogS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm9bXTtcblx0bWFwcGVkRmllbGRzIDogS2FsdHVyYUtleVZhbHVlW107XG5cdG9wdGlvbnMgOiBLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBVc2VyRXhwb3J0VG9Dc3ZBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdzJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYWRkaXRpb25hbEZpZWxkcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuYWRkaXRpb25hbEZpZWxkcyA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5tYXBwZWRGaWVsZHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLm1hcHBlZEZpZWxkcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3VzZXInIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdleHBvcnRUb0NzdicgfSxcblx0XHRcdFx0ZmlsdGVyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhVXNlckZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhVXNlckZpbHRlcicgfSxcblx0XHRcdFx0bWV0YWRhdGFQcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YWRkaXRpb25hbEZpZWxkcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8sIHN1YlR5cGUgOiAnS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8nIH0sXG5cdFx0XHRcdG1hcHBlZEZpZWxkcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUtleVZhbHVlLCBzdWJUeXBlIDogJ0thbHR1cmFLZXlWYWx1ZScgfSxcblx0XHRcdFx0b3B0aW9ucyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucywgc3ViVHlwZSA6ICdLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
