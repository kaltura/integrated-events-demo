"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentsConvertAction = void 0;
var tslib_1 = require("tslib");
var KalturaConversionAttribute_1 = require("./KalturaConversionAttribute");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'documents' action 'convert'.
 *
 * Usage: Convert entry
 *
 * Server response type:         number
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var DocumentsConvertAction = /** @class */ (function (_super) {
    tslib_1.__extends(DocumentsConvertAction, _super);
    function DocumentsConvertAction(data) {
        var _this = _super.call(this, data, { responseType: 'n', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.dynamicConversionAttributes === 'undefined')
            _this.dynamicConversionAttributes = [];
        return _this;
    }
    DocumentsConvertAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'document_documents' },
            action: { type: 'c', default: 'convert' },
            entryId: { type: 's' },
            conversionProfileId: { type: 'n' },
            dynamicConversionAttributes: { type: 'a', subTypeConstructor: KalturaConversionAttribute_1.KalturaConversionAttribute, subType: 'KalturaConversionAttribute' }
        });
        return result;
    };
    return DocumentsConvertAction;
}(kaltura_request_1.KalturaRequest));
exports.DocumentsConvertAction = DocumentsConvertAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Eb2N1bWVudHNDb252ZXJ0QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSwyRUFBMEU7QUFDMUUsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTRDLGtEQUFzQjtJQU05RCxnQ0FBWSxJQUFpQztRQUE3QyxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQyxTQUV2RjtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsMkJBQTJCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQywyQkFBMkIsR0FBRyxFQUFFLENBQUM7O0lBQ3ZHLENBQUM7SUFFUyw2Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtZQUNwRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxTQUFTLEVBQUU7WUFDNUMsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixtQkFBbUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDcEMsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVEQUEwQixFQUFFLE9BQU8sRUFBRyw0QkFBNEIsRUFBRTtTQUM1SCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNkJBQUM7QUFBRCxDQTNCQSxBQTJCQyxDQTNCMkMsZ0NBQWMsR0EyQnpEO0FBM0JZLHdEQUFzQiIsImZpbGUiOiJhcGkvdHlwZXMvRG9jdW1lbnRzQ29udmVydEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYUNvbnZlcnNpb25BdHRyaWJ1dGUgfSBmcm9tICcuL0thbHR1cmFDb252ZXJzaW9uQXR0cmlidXRlJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERvY3VtZW50c0NvbnZlcnRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZW50cnlJZCA6IHN0cmluZztcblx0Y29udmVyc2lvblByb2ZpbGVJZD8gOiBudW1iZXI7XG5cdGR5bmFtaWNDb252ZXJzaW9uQXR0cmlidXRlcz8gOiBLYWx0dXJhQ29udmVyc2lvbkF0dHJpYnV0ZVtdO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnZG9jdW1lbnRzJyBhY3Rpb24gJ2NvbnZlcnQnLlxuICpcbiAqIFVzYWdlOiBDb252ZXJ0IGVudHJ5XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgbnVtYmVyXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBEb2N1bWVudHNDb252ZXJ0QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8bnVtYmVyPiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRkeW5hbWljQ29udmVyc2lvbkF0dHJpYnV0ZXMgOiBLYWx0dXJhQ29udmVyc2lvbkF0dHJpYnV0ZVtdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IERvY3VtZW50c0NvbnZlcnRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICduJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZHluYW1pY0NvbnZlcnNpb25BdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJykgdGhpcy5keW5hbWljQ29udmVyc2lvbkF0dHJpYnV0ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdkb2N1bWVudF9kb2N1bWVudHMnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdjb252ZXJ0JyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNvbnZlcnNpb25Qcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZHluYW1pY0NvbnZlcnNpb25BdHRyaWJ1dGVzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ29udmVyc2lvbkF0dHJpYnV0ZSwgc3ViVHlwZSA6ICdLYWx0dXJhQ29udmVyc2lvbkF0dHJpYnV0ZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
