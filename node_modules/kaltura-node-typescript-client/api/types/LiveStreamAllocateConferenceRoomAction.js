"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveStreamAllocateConferenceRoomAction = void 0;
var tslib_1 = require("tslib");
var KalturaRoomDetails_1 = require("./KalturaRoomDetails");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'liveStream' action 'allocateConferenceRoom'.
 *
 * Usage: Allocates a conference room or returns ones that has already been allocated
 *
 * Server response type:         KalturaRoomDetails
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var LiveStreamAllocateConferenceRoomAction = /** @class */ (function (_super) {
    tslib_1.__extends(LiveStreamAllocateConferenceRoomAction, _super);
    function LiveStreamAllocateConferenceRoomAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaRoomDetails', responseConstructor: KalturaRoomDetails_1.KalturaRoomDetails }) || this;
    }
    LiveStreamAllocateConferenceRoomAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'livestream' },
            action: { type: 'c', default: 'allocateConferenceRoom' },
            entryId: { type: 's' },
            env: { type: 's' }
        });
        return result;
    };
    return LiveStreamAllocateConferenceRoomAction;
}(kaltura_request_1.KalturaRequest));
exports.LiveStreamAllocateConferenceRoomAction = LiveStreamAllocateConferenceRoomAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9MaXZlU3RyZWFtQWxsb2NhdGVDb25mZXJlbmNlUm9vbUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUE0RCxrRUFBa0M7SUFLMUYsZ0RBQVksSUFBaUQ7ZUFFekQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUcsdUNBQWtCLEVBQUcsQ0FBQztJQUN6SCxDQUFDO0lBRVMsNkRBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsWUFBWSxFQUFFO1lBQzVELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzNELE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsR0FBRyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNYLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2Q0FBQztBQUFELENBeEJBLEFBd0JDLENBeEIyRCxnQ0FBYyxHQXdCekU7QUF4Qlksd0ZBQXNDIiwiZmlsZSI6ImFwaS90eXBlcy9MaXZlU3RyZWFtQWxsb2NhdGVDb25mZXJlbmNlUm9vbUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUm9vbURldGFpbHMgfSBmcm9tICcuL0thbHR1cmFSb29tRGV0YWlscyc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExpdmVTdHJlYW1BbGxvY2F0ZUNvbmZlcmVuY2VSb29tQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdGVudj8gOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdsaXZlU3RyZWFtJyBhY3Rpb24gJ2FsbG9jYXRlQ29uZmVyZW5jZVJvb20nLlxuICpcbiAqIFVzYWdlOiBBbGxvY2F0ZXMgYSBjb25mZXJlbmNlIHJvb20gb3IgcmV0dXJucyBvbmVzIHRoYXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhUm9vbURldGFpbHNcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIExpdmVTdHJlYW1BbGxvY2F0ZUNvbmZlcmVuY2VSb29tQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVJvb21EZXRhaWxzPiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRlbnYgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogTGl2ZVN0cmVhbUFsbG9jYXRlQ29uZmVyZW5jZVJvb21BY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFSb29tRGV0YWlscycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhUm9vbURldGFpbHMgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2xpdmVzdHJlYW0nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhbGxvY2F0ZUNvbmZlcmVuY2VSb29tJyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGVudiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
