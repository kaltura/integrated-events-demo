"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaStorageProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaStorageProfileStatus_1 = require("./KalturaStorageProfileStatus");
var KalturaStorageProfileProtocol_1 = require("./KalturaStorageProfileProtocol");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaStorageProfileDeliveryStatus_1 = require("./KalturaStorageProfileDeliveryStatus");
var KalturaStorageProfileReadyBehavior_1 = require("./KalturaStorageProfileReadyBehavior");
var KalturaRule_1 = require("./KalturaRule");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaStorageProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaStorageProfile, _super);
    function KalturaStorageProfile(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.pathManagerParams === 'undefined')
            _this.pathManagerParams = [];
        if (typeof _this.rules === 'undefined')
            _this.rules = [];
        if (typeof _this.deliveryProfileIds === 'undefined')
            _this.deliveryProfileIds = [];
        if (typeof _this.additionalInfo === 'undefined')
            _this.additionalInfo = [];
        return _this;
    }
    KalturaStorageProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaStorageProfile' },
            id: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            name: { type: 's' },
            systemName: { type: 's' },
            desciption: { type: 's' },
            status: { type: 'en', subTypeConstructor: KalturaStorageProfileStatus_1.KalturaStorageProfileStatus, subType: 'KalturaStorageProfileStatus' },
            protocol: { type: 'es', subTypeConstructor: KalturaStorageProfileProtocol_1.KalturaStorageProfileProtocol, subType: 'KalturaStorageProfileProtocol' },
            storageUrl: { type: 's' },
            storageBaseDir: { type: 's' },
            pathPrefix: { type: 's' },
            storageUsername: { type: 's' },
            storagePassword: { type: 's' },
            storageFtpPassiveMode: { type: 'b' },
            minFileSize: { type: 'n' },
            maxFileSize: { type: 'n' },
            flavorParamsIds: { type: 's' },
            maxConcurrentConnections: { type: 'n' },
            pathManagerClass: { type: 's' },
            pathManagerParams: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            trigger: { type: 'n' },
            deliveryPriority: { type: 'n' },
            deliveryStatus: { type: 'en', subTypeConstructor: KalturaStorageProfileDeliveryStatus_1.KalturaStorageProfileDeliveryStatus, subType: 'KalturaStorageProfileDeliveryStatus' },
            readyBehavior: { type: 'en', subTypeConstructor: KalturaStorageProfileReadyBehavior_1.KalturaStorageProfileReadyBehavior, subType: 'KalturaStorageProfileReadyBehavior' },
            allowAutoDelete: { type: 'n' },
            createFileLink: { type: 'b' },
            rules: { type: 'a', subTypeConstructor: KalturaRule_1.KalturaRule, subType: 'KalturaRule' },
            deliveryProfileIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            privateKey: { type: 's' },
            publicKey: { type: 's' },
            passPhrase: { type: 's' },
            port: { type: 'n' },
            shouldExportThumbs: { type: 'b' },
            packagerUrl: { type: 's' },
            exportPeriodically: { type: 'b' },
            excludedFlavorParamsIds: { type: 's' },
            shouldExportCaptions: { type: 'b' },
            excludedEntryTypes: { type: 's' },
            additionalInfo: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaStorageProfile;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaStorageProfile = KalturaStorageProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaStorageProfile', KalturaStorageProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
