"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduledTaskProfileRequestDryRunAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduledTaskProfile' action 'requestDryRun'.
 *
 *
 *
 * Server response type:         number
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduledTaskProfileRequestDryRunAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduledTaskProfileRequestDryRunAction, _super);
    function ScheduledTaskProfileRequestDryRunAction(data) {
        var _this = _super.call(this, data, { responseType: 'n', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.maxResults === 'undefined')
            _this.maxResults = 500;
        return _this;
    }
    ScheduledTaskProfileRequestDryRunAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'scheduledtask_scheduledtaskprofile' },
            action: { type: 'c', default: 'requestDryRun' },
            scheduledTaskProfileId: { type: 'n' },
            maxResults: { type: 'n' }
        });
        return result;
    };
    return ScheduledTaskProfileRequestDryRunAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduledTaskProfileRequestDryRunAction = ScheduledTaskProfileRequestDryRunAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZWRUYXNrUHJvZmlsZVJlcXVlc3REcnlSdW5BY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUE2RCxtRUFBc0I7SUFLL0UsaURBQVksSUFBa0Q7UUFBOUQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUMsU0FFdkY7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLFVBQVUsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7O0lBQ3RFLENBQUM7SUFFUyw4REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvQ0FBb0MsRUFBRTtZQUNwRixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDbEQsc0JBQXNCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3ZDLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDbEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDhDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6QjRELGdDQUFjLEdBeUIxRTtBQXpCWSwwRkFBdUMiLCJmaWxlIjoiYXBpL3R5cGVzL1NjaGVkdWxlZFRhc2tQcm9maWxlUmVxdWVzdERyeVJ1bkFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVkVGFza1Byb2ZpbGVSZXF1ZXN0RHJ5UnVuQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHNjaGVkdWxlZFRhc2tQcm9maWxlSWQgOiBudW1iZXI7XG5cdG1heFJlc3VsdHM/IDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2NoZWR1bGVkVGFza1Byb2ZpbGUnIGFjdGlvbiAncmVxdWVzdERyeVJ1bicuXG4gKlxuICogXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgbnVtYmVyXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlZHVsZWRUYXNrUHJvZmlsZVJlcXVlc3REcnlSdW5BY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxudW1iZXI+IHtcblxuICAgIHNjaGVkdWxlZFRhc2tQcm9maWxlSWQgOiBudW1iZXI7XG5cdG1heFJlc3VsdHMgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogU2NoZWR1bGVkVGFza1Byb2ZpbGVSZXF1ZXN0RHJ5UnVuQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbicsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm1heFJlc3VsdHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLm1heFJlc3VsdHMgPSA1MDA7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2NoZWR1bGVkdGFza19zY2hlZHVsZWR0YXNrcHJvZmlsZScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3JlcXVlc3REcnlSdW4nIH0sXG5cdFx0XHRcdHNjaGVkdWxlZFRhc2tQcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0bWF4UmVzdWx0cyA6IHsgdHlwZSA6ICduJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
