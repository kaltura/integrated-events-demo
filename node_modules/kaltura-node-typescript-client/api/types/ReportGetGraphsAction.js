"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGetGraphsAction = void 0;
var tslib_1 = require("tslib");
var KalturaReportGraph_1 = require("./KalturaReportGraph");
var KalturaReportType_1 = require("./KalturaReportType");
var KalturaReportInputFilter_1 = require("./KalturaReportInputFilter");
var KalturaReportResponseOptions_1 = require("./KalturaReportResponseOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'report' action 'getGraphs'.
 *
 * Usage: report getGraphs action allows to get a graph data for a specific report
 *
 * Server response type:         KalturaReportGraph[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ReportGetGraphsAction = /** @class */ (function (_super) {
    tslib_1.__extends(ReportGetGraphsAction, _super);
    function ReportGetGraphsAction(data) {
        return _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaReportGraph', responseConstructor: KalturaReportGraph_1.KalturaReportGraph }) || this;
    }
    ReportGetGraphsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'report' },
            action: { type: 'c', default: 'getGraphs' },
            reportType: { type: 'es', subTypeConstructor: KalturaReportType_1.KalturaReportType, subType: 'KalturaReportType' },
            reportInputFilter: { type: 'o', subTypeConstructor: KalturaReportInputFilter_1.KalturaReportInputFilter, subType: 'KalturaReportInputFilter' },
            dimension: { type: 's' },
            objectIds: { type: 's' },
            responseOptions: { type: 'o', subTypeConstructor: KalturaReportResponseOptions_1.KalturaReportResponseOptions, subType: 'KalturaReportResponseOptions' }
        });
        return result;
    };
    return ReportGetGraphsAction;
}(kaltura_request_1.KalturaRequest));
exports.ReportGetGraphsAction = ReportGetGraphsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9SZXBvcnRHZXRHcmFwaHNBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDJEQUEwRDtBQUUxRCx5REFBd0Q7QUFDeEQsdUVBQXNFO0FBQ3RFLCtFQUE4RTtBQUM5RSxzREFBd0U7QUFVeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMkMsaURBQW9DO0lBUTNFLCtCQUFZLElBQWdDO2VBRXhDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG9CQUFvQixFQUFFLG1CQUFtQixFQUFHLHVDQUFrQixFQUFHLENBQUM7SUFDekgsQ0FBQztJQUVTLDRDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUN4RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxXQUFXLEVBQUU7WUFDOUMsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxxQ0FBaUIsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7WUFDbkcsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUN2SCxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7U0FDcEgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDRCQUFDO0FBQUQsQ0E5QkEsQUE4QkMsQ0E5QjBDLGdDQUFjLEdBOEJ4RDtBQTlCWSxzREFBcUIiLCJmaWxlIjoiYXBpL3R5cGVzL1JlcG9ydEdldEdyYXBoc0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0R3JhcGggfSBmcm9tICcuL0thbHR1cmFSZXBvcnRHcmFwaCc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXBvcnRUeXBlIH0gZnJvbSAnLi9LYWx0dXJhUmVwb3J0VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRJbnB1dEZpbHRlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zIH0gZnJvbSAnLi9LYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9ydEdldEdyYXBoc0FjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICByZXBvcnRUeXBlIDogS2FsdHVyYVJlcG9ydFR5cGU7XG5cdHJlcG9ydElucHV0RmlsdGVyIDogS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyO1xuXHRkaW1lbnNpb24/IDogc3RyaW5nO1xuXHRvYmplY3RJZHM/IDogc3RyaW5nO1xuXHRyZXNwb25zZU9wdGlvbnM/IDogS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3JlcG9ydCcgYWN0aW9uICdnZXRHcmFwaHMnLlxuICpcbiAqIFVzYWdlOiByZXBvcnQgZ2V0R3JhcGhzIGFjdGlvbiBhbGxvd3MgdG8gZ2V0IGEgZ3JhcGggZGF0YSBmb3IgYSBzcGVjaWZpYyByZXBvcnRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhUmVwb3J0R3JhcGhbXVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUmVwb3J0R2V0R3JhcGhzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVJlcG9ydEdyYXBoW10+IHtcblxuICAgIHJlcG9ydFR5cGUgOiBLYWx0dXJhUmVwb3J0VHlwZTtcblx0cmVwb3J0SW5wdXRGaWx0ZXIgOiBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXI7XG5cdGRpbWVuc2lvbiA6IHN0cmluZztcblx0b2JqZWN0SWRzIDogc3RyaW5nO1xuXHRyZXNwb25zZU9wdGlvbnMgOiBLYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFJlcG9ydEdldEdyYXBoc0FjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ2EnLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydEdyYXBoJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRHcmFwaCAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVwb3J0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0R3JhcGhzJyB9LFxuXHRcdFx0XHRyZXBvcnRUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFR5cGUnIH0sXG5cdFx0XHRcdHJlcG9ydElucHV0RmlsdGVyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyJyB9LFxuXHRcdFx0XHRkaW1lbnNpb24gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0b2JqZWN0SWRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlc3BvbnNlT3B0aW9ucyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucywgc3ViVHlwZSA6ICdLYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
