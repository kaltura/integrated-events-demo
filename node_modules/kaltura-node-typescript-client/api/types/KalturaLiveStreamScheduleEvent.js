"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaLiveStreamScheduleEvent = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaLiveFeature_1 = require("./KalturaLiveFeature");
var KalturaBaseLiveScheduleEvent_1 = require("./KalturaBaseLiveScheduleEvent");
var KalturaLiveStreamScheduleEvent = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaLiveStreamScheduleEvent, _super);
    function KalturaLiveStreamScheduleEvent(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.liveFeatures === 'undefined')
            _this.liveFeatures = [];
        return _this;
    }
    KalturaLiveStreamScheduleEvent.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaLiveStreamScheduleEvent' },
            sourceEntryId: { type: 's' },
            projectedAudience: { type: 'n' },
            preStartTime: { type: 'n' },
            postEndTime: { type: 'n' },
            preStartEntryId: { type: 's' },
            postEndEntryId: { type: 's' },
            isContentInterruptible: { type: 'b' },
            liveFeatures: { type: 'a', subTypeConstructor: KalturaLiveFeature_1.KalturaLiveFeature, subType: 'KalturaLiveFeature' }
        });
        return result;
    };
    return KalturaLiveStreamScheduleEvent;
}(KalturaBaseLiveScheduleEvent_1.KalturaBaseLiveScheduleEvent));
exports.KalturaLiveStreamScheduleEvent = KalturaLiveStreamScheduleEvent;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaLiveStreamScheduleEvent', KalturaLiveStreamScheduleEvent);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTGl2ZVN0cmVhbVNjaGVkdWxlRXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwyREFBMEQ7QUFDMUQsK0VBQWdIO0FBY2hIO0lBQW9ELDBEQUE0QjtJQVc1RSx3Q0FBWSxJQUEwQztRQUF0RCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUVkO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxZQUFZLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDOztJQUN6RSxDQUFDO0lBRVMscURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZ0NBQWdDLEVBQUU7WUFDbkYsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QixpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbEMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixzQkFBc0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyx1Q0FBa0IsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7U0FDN0YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHFDQUFDO0FBQUQsQ0FwQ0EsQUFvQ0MsQ0FwQ21ELDJEQUE0QixHQW9DL0U7QUFwQ1ksd0VBQThCO0FBc0MzQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUMsOEJBQThCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUxpdmVTdHJlYW1TY2hlZHVsZUV2ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVGZWF0dXJlIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZUZlYXR1cmUnO1xuaW1wb3J0IHsgS2FsdHVyYUJhc2VMaXZlU2NoZWR1bGVFdmVudCwgS2FsdHVyYUJhc2VMaXZlU2NoZWR1bGVFdmVudEFyZ3MgfSBmcm9tICcuL0thbHR1cmFCYXNlTGl2ZVNjaGVkdWxlRXZlbnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFMaXZlU3RyZWFtU2NoZWR1bGVFdmVudEFyZ3MgIGV4dGVuZHMgS2FsdHVyYUJhc2VMaXZlU2NoZWR1bGVFdmVudEFyZ3Mge1xuICAgIHNvdXJjZUVudHJ5SWQ/IDogc3RyaW5nO1xuXHRwcm9qZWN0ZWRBdWRpZW5jZT8gOiBudW1iZXI7XG5cdHByZVN0YXJ0VGltZT8gOiBudW1iZXI7XG5cdHBvc3RFbmRUaW1lPyA6IG51bWJlcjtcblx0cHJlU3RhcnRFbnRyeUlkPyA6IHN0cmluZztcblx0cG9zdEVuZEVudHJ5SWQ/IDogc3RyaW5nO1xuXHRpc0NvbnRlbnRJbnRlcnJ1cHRpYmxlPyA6IGJvb2xlYW47XG5cdGxpdmVGZWF0dXJlcz8gOiBLYWx0dXJhTGl2ZUZlYXR1cmVbXTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUxpdmVTdHJlYW1TY2hlZHVsZUV2ZW50IGV4dGVuZHMgS2FsdHVyYUJhc2VMaXZlU2NoZWR1bGVFdmVudCB7XG5cbiAgICBzb3VyY2VFbnRyeUlkIDogc3RyaW5nO1xuXHRwcm9qZWN0ZWRBdWRpZW5jZSA6IG51bWJlcjtcblx0cHJlU3RhcnRUaW1lIDogbnVtYmVyO1xuXHRwb3N0RW5kVGltZSA6IG51bWJlcjtcblx0cHJlU3RhcnRFbnRyeUlkIDogc3RyaW5nO1xuXHRwb3N0RW5kRW50cnlJZCA6IHN0cmluZztcblx0aXNDb250ZW50SW50ZXJydXB0aWJsZSA6IGJvb2xlYW47XG5cdGxpdmVGZWF0dXJlcyA6IEthbHR1cmFMaXZlRmVhdHVyZVtdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhTGl2ZVN0cmVhbVNjaGVkdWxlRXZlbnRBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5saXZlRmVhdHVyZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmxpdmVGZWF0dXJlcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFMaXZlU3RyZWFtU2NoZWR1bGVFdmVudCcgfSxcblx0XHRcdFx0c291cmNlRW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwcm9qZWN0ZWRBdWRpZW5jZSA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRwcmVTdGFydFRpbWUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cG9zdEVuZFRpbWUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cHJlU3RhcnRFbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBvc3RFbmRFbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlzQ29udGVudEludGVycnVwdGlibGUgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0bGl2ZUZlYXR1cmVzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZUZlYXR1cmUsIHN1YlR5cGUgOiAnS2FsdHVyYUxpdmVGZWF0dXJlJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUxpdmVTdHJlYW1TY2hlZHVsZUV2ZW50JyxLYWx0dXJhTGl2ZVN0cmVhbVNjaGVkdWxlRXZlbnQpO1xuIl19
