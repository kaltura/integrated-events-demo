"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGetTableAction = void 0;
var tslib_1 = require("tslib");
var KalturaReportTable_1 = require("./KalturaReportTable");
var KalturaReportType_1 = require("./KalturaReportType");
var KalturaReportInputFilter_1 = require("./KalturaReportInputFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var KalturaReportResponseOptions_1 = require("./KalturaReportResponseOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'report' action 'getTable'.
 *
 * Usage: report getTable action allows to get a graph data for a specific report
 *
 * Server response type:         KalturaReportTable
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ReportGetTableAction = /** @class */ (function (_super) {
    tslib_1.__extends(ReportGetTableAction, _super);
    function ReportGetTableAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaReportTable', responseConstructor: KalturaReportTable_1.KalturaReportTable }) || this;
    }
    ReportGetTableAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'report' },
            action: { type: 'c', default: 'getTable' },
            reportType: { type: 'es', subTypeConstructor: KalturaReportType_1.KalturaReportType, subType: 'KalturaReportType' },
            reportInputFilter: { type: 'o', subTypeConstructor: KalturaReportInputFilter_1.KalturaReportInputFilter, subType: 'KalturaReportInputFilter' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' },
            order: { type: 's' },
            objectIds: { type: 's' },
            responseOptions: { type: 'o', subTypeConstructor: KalturaReportResponseOptions_1.KalturaReportResponseOptions, subType: 'KalturaReportResponseOptions' }
        });
        return result;
    };
    return ReportGetTableAction;
}(kaltura_request_1.KalturaRequest));
exports.ReportGetTableAction = ReportGetTableAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9SZXBvcnRHZXRUYWJsZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELHlEQUF3RDtBQUN4RCx1RUFBc0U7QUFDdEUsMkRBQTBEO0FBQzFELCtFQUE4RTtBQUM5RSxzREFBd0U7QUFXeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMEMsZ0RBQWtDO0lBU3hFLDhCQUFZLElBQStCO2VBRXZDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG9CQUFvQixFQUFFLG1CQUFtQixFQUFHLHVDQUFrQixFQUFHLENBQUM7SUFDekgsQ0FBQztJQUVTLDJDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUN4RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxVQUFVLEVBQUU7WUFDN0MsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxxQ0FBaUIsRUFBRSxPQUFPLEVBQUcsbUJBQW1CLEVBQUU7WUFDbkcsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUN2SCxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtZQUMvRixLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7U0FDcEgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0FoQ0EsQUFnQ0MsQ0FoQ3lDLGdDQUFjLEdBZ0N2RDtBQWhDWSxvREFBb0IiLCJmaWxlIjoiYXBpL3R5cGVzL1JlcG9ydEdldFRhYmxlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRUYWJsZSB9IGZyb20gJy4vS2FsdHVyYVJlcG9ydFRhYmxlJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcG9ydFR5cGUgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlciB9IGZyb20gJy4vS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFGaWx0ZXJQYWdlciB9IGZyb20gJy4vS2FsdHVyYUZpbHRlclBhZ2VyJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVwb3J0R2V0VGFibGVBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgcmVwb3J0VHlwZSA6IEthbHR1cmFSZXBvcnRUeXBlO1xuXHRyZXBvcnRJbnB1dEZpbHRlciA6IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlcjtcblx0cGFnZXIgOiBLYWx0dXJhRmlsdGVyUGFnZXI7XG5cdG9yZGVyPyA6IHN0cmluZztcblx0b2JqZWN0SWRzPyA6IHN0cmluZztcblx0cmVzcG9uc2VPcHRpb25zPyA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdyZXBvcnQnIGFjdGlvbiAnZ2V0VGFibGUnLlxuICpcbiAqIFVzYWdlOiByZXBvcnQgZ2V0VGFibGUgYWN0aW9uIGFsbG93cyB0byBnZXQgYSBncmFwaCBkYXRhIGZvciBhIHNwZWNpZmljIHJlcG9ydFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFSZXBvcnRUYWJsZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUmVwb3J0R2V0VGFibGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUmVwb3J0VGFibGU+IHtcblxuICAgIHJlcG9ydFR5cGUgOiBLYWx0dXJhUmVwb3J0VHlwZTtcblx0cmVwb3J0SW5wdXRGaWx0ZXIgOiBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXI7XG5cdHBhZ2VyIDogS2FsdHVyYUZpbHRlclBhZ2VyO1xuXHRvcmRlciA6IHN0cmluZztcblx0b2JqZWN0SWRzIDogc3RyaW5nO1xuXHRyZXNwb25zZU9wdGlvbnMgOiBLYWx0dXJhUmVwb3J0UmVzcG9uc2VPcHRpb25zO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFJlcG9ydEdldFRhYmxlQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhUmVwb3J0VGFibGUnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydFRhYmxlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdyZXBvcnQnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRUYWJsZScgfSxcblx0XHRcdFx0cmVwb3J0VHlwZSA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFSZXBvcnRUeXBlJyB9LFxuXHRcdFx0XHRyZXBvcnRJbnB1dEZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyLCBzdWJUeXBlIDogJ0thbHR1cmFSZXBvcnRJbnB1dEZpbHRlcicgfSxcblx0XHRcdFx0cGFnZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFGaWx0ZXJQYWdlciwgc3ViVHlwZSA6ICdLYWx0dXJhRmlsdGVyUGFnZXInIH0sXG5cdFx0XHRcdG9yZGVyIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG9iamVjdElkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXNwb25zZU9wdGlvbnMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
