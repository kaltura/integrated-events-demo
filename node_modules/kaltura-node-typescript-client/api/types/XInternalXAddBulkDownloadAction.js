"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XInternalXAddBulkDownloadAction = void 0;
var tslib_1 = require("tslib");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'xInternal' action 'xAddBulkDownload'.
 *
 * Usage: Creates new download job for multiple entry ids (comma separated), an email will be sent when the job is done
 * This service support the following entries:
 * - MediaEntry
 * - Video will be converted using the flavor params id
 * - Audio will be downloaded as MP3
 * - Image will be downloaded as Jpeg
 * - MixEntry will be flattened using the flavor params id
 * - Other entry types are not supported
 * Returns the admin email that the email message will be sent to
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var XInternalXAddBulkDownloadAction = /** @class */ (function (_super) {
    tslib_1.__extends(XInternalXAddBulkDownloadAction, _super);
    function XInternalXAddBulkDownloadAction(data) {
        return _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
    }
    XInternalXAddBulkDownloadAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'xinternal' },
            action: { type: 'c', default: 'xAddBulkDownload' },
            entryIds: { type: 's' },
            flavorParamsId: { type: 's' }
        });
        return result;
    };
    return XInternalXAddBulkDownloadAction;
}(kaltura_request_1.KalturaRequest));
exports.XInternalXAddBulkDownloadAction = XInternalXAddBulkDownloadAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9YSW50ZXJuYWxYQWRkQnVsa0Rvd25sb2FkQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxzREFBd0U7QUFPeEU7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUJHO0FBQ0g7SUFBcUQsMkRBQXNCO0lBS3ZFLHlDQUFZLElBQTBDO2VBRWxELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQztJQUN4RixDQUFDO0lBRVMsc0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsV0FBVyxFQUFFO1lBQzNELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGtCQUFrQixFQUFFO1lBQ3JELFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN0QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsc0NBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCb0QsZ0NBQWMsR0F3QmxFO0FBeEJZLDBFQUErQiIsImZpbGUiOiJhcGkvdHlwZXMvWEludGVybmFsWEFkZEJ1bGtEb3dubG9hZEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgWEludGVybmFsWEFkZEJ1bGtEb3dubG9hZEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkcyA6IHN0cmluZztcblx0Zmxhdm9yUGFyYW1zSWQ/IDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAneEludGVybmFsJyBhY3Rpb24gJ3hBZGRCdWxrRG93bmxvYWQnLlxuICpcbiAqIFVzYWdlOiBDcmVhdGVzIG5ldyBkb3dubG9hZCBqb2IgZm9yIG11bHRpcGxlIGVudHJ5IGlkcyAoY29tbWEgc2VwYXJhdGVkKSwgYW4gZW1haWwgd2lsbCBiZSBzZW50IHdoZW4gdGhlIGpvYiBpcyBkb25lXG4gKiBUaGlzIHNlcnZpY2Ugc3VwcG9ydCB0aGUgZm9sbG93aW5nIGVudHJpZXM6XG4gKiAtIE1lZGlhRW50cnlcbiAqIC0gVmlkZW8gd2lsbCBiZSBjb252ZXJ0ZWQgdXNpbmcgdGhlIGZsYXZvciBwYXJhbXMgaWRcbiAqIC0gQXVkaW8gd2lsbCBiZSBkb3dubG9hZGVkIGFzIE1QM1xuICogLSBJbWFnZSB3aWxsIGJlIGRvd25sb2FkZWQgYXMgSnBlZ1xuICogLSBNaXhFbnRyeSB3aWxsIGJlIGZsYXR0ZW5lZCB1c2luZyB0aGUgZmxhdm9yIHBhcmFtcyBpZFxuICogLSBPdGhlciBlbnRyeSB0eXBlcyBhcmUgbm90IHN1cHBvcnRlZFxuICogUmV0dXJucyB0aGUgYWRtaW4gZW1haWwgdGhhdCB0aGUgZW1haWwgbWVzc2FnZSB3aWxsIGJlIHNlbnQgdG9cbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFhJbnRlcm5hbFhBZGRCdWxrRG93bmxvYWRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxzdHJpbmc+IHtcblxuICAgIGVudHJ5SWRzIDogc3RyaW5nO1xuXHRmbGF2b3JQYXJhbXNJZCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBYSW50ZXJuYWxYQWRkQnVsa0Rvd25sb2FkQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAncycsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd4aW50ZXJuYWwnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd4QWRkQnVsa0Rvd25sb2FkJyB9LFxuXHRcdFx0XHRlbnRyeUlkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmbGF2b3JQYXJhbXNJZCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
