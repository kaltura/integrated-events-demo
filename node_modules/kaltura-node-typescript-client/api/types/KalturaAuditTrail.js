"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAuditTrail = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAuditTrailStatus_1 = require("./KalturaAuditTrailStatus");
var KalturaAuditTrailObjectType_1 = require("./KalturaAuditTrailObjectType");
var KalturaAuditTrailAction_1 = require("./KalturaAuditTrailAction");
var KalturaAuditTrailInfo_1 = require("./KalturaAuditTrailInfo");
var KalturaAuditTrailContext_1 = require("./KalturaAuditTrailContext");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaAuditTrail = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAuditTrail, _super);
    function KalturaAuditTrail(data) {
        return _super.call(this, data) || this;
    }
    KalturaAuditTrail.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAuditTrail' },
            id: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            parsedAt: { type: 'n', readOnly: true },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaAuditTrailStatus_1.KalturaAuditTrailStatus, subType: 'KalturaAuditTrailStatus' },
            auditObjectType: { type: 'es', subTypeConstructor: KalturaAuditTrailObjectType_1.KalturaAuditTrailObjectType, subType: 'KalturaAuditTrailObjectType' },
            objectId: { type: 's' },
            relatedObjectId: { type: 's' },
            relatedObjectType: { type: 'es', subTypeConstructor: KalturaAuditTrailObjectType_1.KalturaAuditTrailObjectType, subType: 'KalturaAuditTrailObjectType' },
            entryId: { type: 's' },
            masterPartnerId: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            requestId: { type: 's', readOnly: true },
            userId: { type: 's' },
            action: { type: 'es', subTypeConstructor: KalturaAuditTrailAction_1.KalturaAuditTrailAction, subType: 'KalturaAuditTrailAction' },
            data: { type: 'o', subTypeConstructor: KalturaAuditTrailInfo_1.KalturaAuditTrailInfo, subType: 'KalturaAuditTrailInfo' },
            ks: { type: 's', readOnly: true },
            context: { type: 'en', readOnly: true, subTypeConstructor: KalturaAuditTrailContext_1.KalturaAuditTrailContext, subType: 'KalturaAuditTrailContext' },
            entryPoint: { type: 's', readOnly: true },
            serverName: { type: 's', readOnly: true },
            ipAddress: { type: 's', readOnly: true },
            userAgent: { type: 's', readOnly: true },
            clientTag: { type: 's' },
            description: { type: 's' },
            errorDescription: { type: 's', readOnly: true }
        });
        return result;
    };
    return KalturaAuditTrail;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaAuditTrail = KalturaAuditTrail;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAuditTrail', KalturaAuditTrail);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
