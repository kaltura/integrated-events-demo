"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleEventResourceAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaScheduleEventResource_1 = require("./KalturaScheduleEventResource");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'scheduleEventResource' action 'add'.
 *
 * Usage: Allows you to add a new KalturaScheduleEventResource object
 *
 * Server response type:         KalturaScheduleEventResource
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ScheduleEventResourceAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(ScheduleEventResourceAddAction, _super);
    function ScheduleEventResourceAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaScheduleEventResource', responseConstructor: KalturaScheduleEventResource_1.KalturaScheduleEventResource }) || this;
    }
    ScheduleEventResourceAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'schedule_scheduleeventresource' },
            action: { type: 'c', default: 'add' },
            scheduleEventResource: { type: 'o', subTypeConstructor: KalturaScheduleEventResource_1.KalturaScheduleEventResource, subType: 'KalturaScheduleEventResource' }
        });
        return result;
    };
    return ScheduleEventResourceAddAction;
}(kaltura_request_1.KalturaRequest));
exports.ScheduleEventResourceAddAction = ScheduleEventResourceAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50UmVzb3VyY2VBZGRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLCtFQUE4RTtBQUU5RSxzREFBd0U7QUFNeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBb0QsMERBQTRDO0lBSTVGLHdDQUFZLElBQXlDO2VBRWpELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLDhCQUE4QixFQUFFLG1CQUFtQixFQUFHLDJEQUE0QixFQUFHLENBQUM7SUFDN0ksQ0FBQztJQUVTLHFEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ2hGLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLEtBQUssRUFBRTtZQUN4QyxxQkFBcUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsMkRBQTRCLEVBQUUsT0FBTyxFQUFHLDhCQUE4QixFQUFFO1NBQzFILENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxxQ0FBQztBQUFELENBdEJBLEFBc0JDLENBdEJtRCxnQ0FBYyxHQXNCakU7QUF0Qlksd0VBQThCIiwiZmlsZSI6ImFwaS90eXBlcy9TY2hlZHVsZUV2ZW50UmVzb3VyY2VBZGRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaGVkdWxlRXZlbnRSZXNvdXJjZUFkZEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBzY2hlZHVsZUV2ZW50UmVzb3VyY2UgOiBLYWx0dXJhU2NoZWR1bGVFdmVudFJlc291cmNlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2NoZWR1bGVFdmVudFJlc291cmNlJyBhY3Rpb24gJ2FkZCcuXG4gKlxuICogVXNhZ2U6IEFsbG93cyB5b3UgdG8gYWRkIGEgbmV3IEthbHR1cmFTY2hlZHVsZUV2ZW50UmVzb3VyY2Ugb2JqZWN0XG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVFdmVudFJlc291cmNlQWRkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZT4ge1xuXG4gICAgc2NoZWR1bGVFdmVudFJlc291cmNlIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBTY2hlZHVsZUV2ZW50UmVzb3VyY2VBZGRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTY2hlZHVsZUV2ZW50UmVzb3VyY2UnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2NoZWR1bGVfc2NoZWR1bGVldmVudHJlc291cmNlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYWRkJyB9LFxuXHRcdFx0XHRzY2hlZHVsZUV2ZW50UmVzb3VyY2UgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTY2hlZHVsZUV2ZW50UmVzb3VyY2UsIHN1YlR5cGUgOiAnS2FsdHVyYVNjaGVkdWxlRXZlbnRSZXNvdXJjZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
