"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartnerRegistrationValidationAction = void 0;
var tslib_1 = require("tslib");
var KalturaPartner_1 = require("./KalturaPartner");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'partner' action 'registrationValidation'.
 *
 * Usage: Create a new Partner object
 *
 * Server response type:         boolean
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PartnerRegistrationValidationAction = /** @class */ (function (_super) {
    tslib_1.__extends(PartnerRegistrationValidationAction, _super);
    function PartnerRegistrationValidationAction(data) {
        var _this = _super.call(this, data, { responseType: 'b', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.silent === 'undefined')
            _this.silent = false;
        return _this;
    }
    PartnerRegistrationValidationAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'partner' },
            action: { type: 'c', default: 'registrationValidation' },
            partner: { type: 'o', subTypeConstructor: KalturaPartner_1.KalturaPartner, subType: 'KalturaPartner' },
            cmsPassword: { type: 's' },
            templatePartnerId: { type: 'n' },
            silent: { type: 'b' }
        });
        return result;
    };
    return PartnerRegistrationValidationAction;
}(kaltura_request_1.KalturaRequest));
exports.PartnerRegistrationValidationAction = PartnerRegistrationValidationAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QYXJ0bmVyUmVnaXN0cmF0aW9uVmFsaWRhdGlvbkFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsbURBQWtEO0FBQ2xELHNEQUF3RTtBQVN4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUF5RCwrREFBdUI7SUFPNUUsNkNBQVksSUFBOEM7UUFBMUQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUMsU0FFdkY7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLE1BQU0sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ2hFLENBQUM7SUFFUywwREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxTQUFTLEVBQUU7WUFDekQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDM0QsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywrQkFBYyxFQUFFLE9BQU8sRUFBRyxnQkFBZ0IsRUFBRTtZQUN6RixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNsQyxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2QsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDBDQUFDO0FBQUQsQ0E3QkEsQUE2QkMsQ0E3QndELGdDQUFjLEdBNkJ0RTtBQTdCWSxrRkFBbUMiLCJmaWxlIjoiYXBpL3R5cGVzL1BhcnRuZXJSZWdpc3RyYXRpb25WYWxpZGF0aW9uQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuXG5pbXBvcnQgeyBLYWx0dXJhUGFydG5lciB9IGZyb20gJy4vS2FsdHVyYVBhcnRuZXInO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFydG5lclJlZ2lzdHJhdGlvblZhbGlkYXRpb25BY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgcGFydG5lciA6IEthbHR1cmFQYXJ0bmVyO1xuXHRjbXNQYXNzd29yZD8gOiBzdHJpbmc7XG5cdHRlbXBsYXRlUGFydG5lcklkPyA6IG51bWJlcjtcblx0c2lsZW50PyA6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwYXJ0bmVyJyBhY3Rpb24gJ3JlZ2lzdHJhdGlvblZhbGlkYXRpb24nLlxuICpcbiAqIFVzYWdlOiBDcmVhdGUgYSBuZXcgUGFydG5lciBvYmplY3RcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBib29sZWFuXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0bmVyUmVnaXN0cmF0aW9uVmFsaWRhdGlvbkFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PGJvb2xlYW4+IHtcblxuICAgIHBhcnRuZXIgOiBLYWx0dXJhUGFydG5lcjtcblx0Y21zUGFzc3dvcmQgOiBzdHJpbmc7XG5cdHRlbXBsYXRlUGFydG5lcklkIDogbnVtYmVyO1xuXHRzaWxlbnQgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBhcnRuZXJSZWdpc3RyYXRpb25WYWxpZGF0aW9uQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnYicsIHJlc3BvbnNlU3ViVHlwZSA6ICcnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogbnVsbCB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNpbGVudCA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuc2lsZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncGFydG5lcicgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3JlZ2lzdHJhdGlvblZhbGlkYXRpb24nIH0sXG5cdFx0XHRcdHBhcnRuZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFQYXJ0bmVyLCBzdWJUeXBlIDogJ0thbHR1cmFQYXJ0bmVyJyB9LFxuXHRcdFx0XHRjbXNQYXNzd29yZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0ZW1wbGF0ZVBhcnRuZXJJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzaWxlbnQgOiB7IHR5cGUgOiAnYicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
