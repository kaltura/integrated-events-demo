"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDrmPolicy = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDrmProviderType_1 = require("./KalturaDrmProviderType");
var KalturaDrmPolicyStatus_1 = require("./KalturaDrmPolicyStatus");
var KalturaDrmLicenseScenario_1 = require("./KalturaDrmLicenseScenario");
var KalturaDrmLicenseType_1 = require("./KalturaDrmLicenseType");
var KalturaDrmLicenseExpirationPolicy_1 = require("./KalturaDrmLicenseExpirationPolicy");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaDrmPolicy = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDrmPolicy, _super);
    function KalturaDrmPolicy(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.licenseParams === 'undefined')
            _this.licenseParams = [];
        return _this;
    }
    KalturaDrmPolicy.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDrmPolicy' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n' },
            name: { type: 's' },
            systemName: { type: 's' },
            description: { type: 's' },
            provider: { type: 'es', subTypeConstructor: KalturaDrmProviderType_1.KalturaDrmProviderType, subType: 'KalturaDrmProviderType' },
            status: { type: 'en', subTypeConstructor: KalturaDrmPolicyStatus_1.KalturaDrmPolicyStatus, subType: 'KalturaDrmPolicyStatus' },
            scenario: { type: 'es', subTypeConstructor: KalturaDrmLicenseScenario_1.KalturaDrmLicenseScenario, subType: 'KalturaDrmLicenseScenario' },
            licenseType: { type: 'es', subTypeConstructor: KalturaDrmLicenseType_1.KalturaDrmLicenseType, subType: 'KalturaDrmLicenseType' },
            licenseExpirationPolicy: { type: 'en', subTypeConstructor: KalturaDrmLicenseExpirationPolicy_1.KalturaDrmLicenseExpirationPolicy, subType: 'KalturaDrmLicenseExpirationPolicy' },
            duration: { type: 'n' },
            createdAt: { type: 'n', readOnly: true },
            updatedAt: { type: 'n', readOnly: true },
            licenseParams: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaDrmPolicy;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaDrmPolicy = KalturaDrmPolicy;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDrmPolicy', KalturaDrmPolicy);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRHJtUG9saWN5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUVBQWtFO0FBQ2xFLG1FQUFrRTtBQUNsRSx5RUFBd0U7QUFDeEUsaUVBQWdFO0FBQ2hFLHlGQUF3RjtBQUN4RixxREFBb0Q7QUFDcEQsOERBQWtGO0FBaUJsRjtJQUFzQyw0Q0FBaUI7SUFpQm5ELDBCQUFZLElBQTRCO1FBQXhDLFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBRWQ7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLGFBQWEsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7O0lBQzNFLENBQUM7SUFFUyx1Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxrQkFBa0IsRUFBRTtZQUNyRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMzRyxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUN6RyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUNqSCxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUM1Ryx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscUVBQWlDLEVBQUUsT0FBTyxFQUFHLG1DQUFtQyxFQUFFO1lBQ2hKLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1NBQ3hGLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx1QkFBQztBQUFELENBaERBLEFBZ0RDLENBaERxQyx1Q0FBaUIsR0FnRHREO0FBaERZLDRDQUFnQjtBQWtEN0IsMkNBQW1CLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFDLGdCQUFnQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFEcm1Qb2xpY3kuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRHJtUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9LYWx0dXJhRHJtUHJvdmlkZXJUeXBlJztcbmltcG9ydCB7IEthbHR1cmFEcm1Qb2xpY3lTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFEcm1Qb2xpY3lTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYURybUxpY2Vuc2VTY2VuYXJpbyB9IGZyb20gJy4vS2FsdHVyYURybUxpY2Vuc2VTY2VuYXJpbyc7XG5pbXBvcnQgeyBLYWx0dXJhRHJtTGljZW5zZVR5cGUgfSBmcm9tICcuL0thbHR1cmFEcm1MaWNlbnNlVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhRHJtTGljZW5zZUV4cGlyYXRpb25Qb2xpY3kgfSBmcm9tICcuL0thbHR1cmFEcm1MaWNlbnNlRXhwaXJhdGlvblBvbGljeSc7XG5pbXBvcnQgeyBLYWx0dXJhS2V5VmFsdWUgfSBmcm9tICcuL0thbHR1cmFLZXlWYWx1ZSc7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYURybVBvbGljeUFyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBwYXJ0bmVySWQ/IDogbnVtYmVyO1xuXHRuYW1lPyA6IHN0cmluZztcblx0c3lzdGVtTmFtZT8gOiBzdHJpbmc7XG5cdGRlc2NyaXB0aW9uPyA6IHN0cmluZztcblx0cHJvdmlkZXI/IDogS2FsdHVyYURybVByb3ZpZGVyVHlwZTtcblx0c3RhdHVzPyA6IEthbHR1cmFEcm1Qb2xpY3lTdGF0dXM7XG5cdHNjZW5hcmlvPyA6IEthbHR1cmFEcm1MaWNlbnNlU2NlbmFyaW87XG5cdGxpY2Vuc2VUeXBlPyA6IEthbHR1cmFEcm1MaWNlbnNlVHlwZTtcblx0bGljZW5zZUV4cGlyYXRpb25Qb2xpY3k/IDogS2FsdHVyYURybUxpY2Vuc2VFeHBpcmF0aW9uUG9saWN5O1xuXHRkdXJhdGlvbj8gOiBudW1iZXI7XG5cdGxpY2Vuc2VQYXJhbXM/IDogS2FsdHVyYUtleVZhbHVlW107XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFEcm1Qb2xpY3kgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICByZWFkb25seSBpZCA6IG51bWJlcjtcblx0cGFydG5lcklkIDogbnVtYmVyO1xuXHRuYW1lIDogc3RyaW5nO1xuXHRzeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbiA6IHN0cmluZztcblx0cHJvdmlkZXIgOiBLYWx0dXJhRHJtUHJvdmlkZXJUeXBlO1xuXHRzdGF0dXMgOiBLYWx0dXJhRHJtUG9saWN5U3RhdHVzO1xuXHRzY2VuYXJpbyA6IEthbHR1cmFEcm1MaWNlbnNlU2NlbmFyaW87XG5cdGxpY2Vuc2VUeXBlIDogS2FsdHVyYURybUxpY2Vuc2VUeXBlO1xuXHRsaWNlbnNlRXhwaXJhdGlvblBvbGljeSA6IEthbHR1cmFEcm1MaWNlbnNlRXhwaXJhdGlvblBvbGljeTtcblx0ZHVyYXRpb24gOiBudW1iZXI7XG5cdHJlYWRvbmx5IGNyZWF0ZWRBdCA6IG51bWJlcjtcblx0cmVhZG9ubHkgdXBkYXRlZEF0IDogbnVtYmVyO1xuXHRsaWNlbnNlUGFyYW1zIDogS2FsdHVyYUtleVZhbHVlW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFEcm1Qb2xpY3lBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5saWNlbnNlUGFyYW1zID09PSAndW5kZWZpbmVkJykgdGhpcy5saWNlbnNlUGFyYW1zID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYURybVBvbGljeScgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRwYXJ0bmVySWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0bmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzeXN0ZW1OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGRlc2NyaXB0aW9uIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHByb3ZpZGVyIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURybVByb3ZpZGVyVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhRHJtUHJvdmlkZXJUeXBlJyB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRHJtUG9saWN5U3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFEcm1Qb2xpY3lTdGF0dXMnIH0sXG5cdFx0XHRcdHNjZW5hcmlvIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURybUxpY2Vuc2VTY2VuYXJpbywgc3ViVHlwZSA6ICdLYWx0dXJhRHJtTGljZW5zZVNjZW5hcmlvJyB9LFxuXHRcdFx0XHRsaWNlbnNlVHlwZSA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEcm1MaWNlbnNlVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhRHJtTGljZW5zZVR5cGUnIH0sXG5cdFx0XHRcdGxpY2Vuc2VFeHBpcmF0aW9uUG9saWN5IDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURybUxpY2Vuc2VFeHBpcmF0aW9uUG9saWN5LCBzdWJUeXBlIDogJ0thbHR1cmFEcm1MaWNlbnNlRXhwaXJhdGlvblBvbGljeScgfSxcblx0XHRcdFx0ZHVyYXRpb24gOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0bGljZW5zZVBhcmFtcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUtleVZhbHVlLCBzdWJUeXBlIDogJ0thbHR1cmFLZXlWYWx1ZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFEcm1Qb2xpY3knLEthbHR1cmFEcm1Qb2xpY3kpO1xuIl19
