"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBulkUpload = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBatchJobStatus_1 = require("./KalturaBatchJobStatus");
var KalturaBulkUploadType_1 = require("./KalturaBulkUploadType");
var KalturaBulkUploadResult_1 = require("./KalturaBulkUploadResult");
var KalturaBatchJobErrorTypes_1 = require("./KalturaBatchJobErrorTypes");
var KalturaBulkUploadObjectType_1 = require("./KalturaBulkUploadObjectType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaBulkUpload = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBulkUpload, _super);
    function KalturaBulkUpload(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.results === 'undefined')
            _this.results = [];
        return _this;
    }
    KalturaBulkUpload.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBulkUpload' },
            id: { type: 'n' },
            uploadedBy: { type: 's' },
            uploadedByUserId: { type: 's' },
            uploadedOn: { type: 'd' },
            numOfEntries: { type: 'n' },
            status: { type: 'en', subTypeConstructor: KalturaBatchJobStatus_1.KalturaBatchJobStatus, subType: 'KalturaBatchJobStatus' },
            logFileUrl: { type: 's' },
            csvFileUrl: { type: 's' },
            bulkFileUrl: { type: 's' },
            bulkUploadType: { type: 'es', subTypeConstructor: KalturaBulkUploadType_1.KalturaBulkUploadType, subType: 'KalturaBulkUploadType' },
            results: { type: 'a', subTypeConstructor: KalturaBulkUploadResult_1.KalturaBulkUploadResult, subType: 'KalturaBulkUploadResult' },
            error: { type: 's' },
            errorType: { type: 'en', subTypeConstructor: KalturaBatchJobErrorTypes_1.KalturaBatchJobErrorTypes, subType: 'KalturaBatchJobErrorTypes' },
            errorNumber: { type: 'n' },
            fileName: { type: 's' },
            description: { type: 's' },
            numOfObjects: { type: 'n' },
            bulkUploadObjectType: { type: 'es', subTypeConstructor: KalturaBulkUploadObjectType_1.KalturaBulkUploadObjectType, subType: 'KalturaBulkUploadObjectType' }
        });
        return result;
    };
    return KalturaBulkUpload;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaBulkUpload = KalturaBulkUpload;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBulkUpload', KalturaBulkUpload);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQnVsa1VwbG9hZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELGlFQUFnRTtBQUNoRSxpRUFBZ0U7QUFDaEUscUVBQW9FO0FBQ3BFLHlFQUF3RTtBQUN4RSw2RUFBNEU7QUFDNUUsOERBQWtGO0FBd0JsRjtJQUF1Qyw2Q0FBaUI7SUFxQnBELDJCQUFZLElBQTZCO1FBQXpDLFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBRWQ7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLE9BQU8sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7O0lBQy9ELENBQUM7SUFFUyx3Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUN0RSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUN2RyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUMvRyxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlEQUF1QixFQUFFLE9BQU8sRUFBRyx5QkFBeUIsRUFBRTtZQUMzRyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQ2xILFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0Isb0JBQW9CLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlEQUEyQixFQUFFLE9BQU8sRUFBRyw2QkFBNkIsRUFBRTtTQUN4SCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsd0JBQUM7QUFBRCxDQXhEQSxBQXdEQyxDQXhEc0MsdUNBQWlCLEdBd0R2RDtBQXhEWSw4Q0FBaUI7QUEwRDlCLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBQyxpQkFBaUIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQnVsa1VwbG9hZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFCYXRjaEpvYlN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYUJhdGNoSm9iU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFCdWxrVXBsb2FkVHlwZSB9IGZyb20gJy4vS2FsdHVyYUJ1bGtVcGxvYWRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFCdWxrVXBsb2FkUmVzdWx0IH0gZnJvbSAnLi9LYWx0dXJhQnVsa1VwbG9hZFJlc3VsdCc7XG5pbXBvcnQgeyBLYWx0dXJhQmF0Y2hKb2JFcnJvclR5cGVzIH0gZnJvbSAnLi9LYWx0dXJhQmF0Y2hKb2JFcnJvclR5cGVzJztcbmltcG9ydCB7IEthbHR1cmFCdWxrVXBsb2FkT2JqZWN0VHlwZSB9IGZyb20gJy4vS2FsdHVyYUJ1bGtVcGxvYWRPYmplY3RUeXBlJztcbmltcG9ydCB7IEthbHR1cmFPYmplY3RCYXNlLCBLYWx0dXJhT2JqZWN0QmFzZUFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhQnVsa1VwbG9hZEFyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBpZD8gOiBudW1iZXI7XG5cdHVwbG9hZGVkQnk/IDogc3RyaW5nO1xuXHR1cGxvYWRlZEJ5VXNlcklkPyA6IHN0cmluZztcblx0dXBsb2FkZWRPbj8gOiBEYXRlO1xuXHRudW1PZkVudHJpZXM/IDogbnVtYmVyO1xuXHRzdGF0dXM/IDogS2FsdHVyYUJhdGNoSm9iU3RhdHVzO1xuXHRsb2dGaWxlVXJsPyA6IHN0cmluZztcblx0Y3N2RmlsZVVybD8gOiBzdHJpbmc7XG5cdGJ1bGtGaWxlVXJsPyA6IHN0cmluZztcblx0YnVsa1VwbG9hZFR5cGU/IDogS2FsdHVyYUJ1bGtVcGxvYWRUeXBlO1xuXHRyZXN1bHRzPyA6IEthbHR1cmFCdWxrVXBsb2FkUmVzdWx0W107XG5cdGVycm9yPyA6IHN0cmluZztcblx0ZXJyb3JUeXBlPyA6IEthbHR1cmFCYXRjaEpvYkVycm9yVHlwZXM7XG5cdGVycm9yTnVtYmVyPyA6IG51bWJlcjtcblx0ZmlsZU5hbWU/IDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj8gOiBzdHJpbmc7XG5cdG51bU9mT2JqZWN0cz8gOiBudW1iZXI7XG5cdGJ1bGtVcGxvYWRPYmplY3RUeXBlPyA6IEthbHR1cmFCdWxrVXBsb2FkT2JqZWN0VHlwZTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUJ1bGtVcGxvYWQgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICBpZCA6IG51bWJlcjtcblx0dXBsb2FkZWRCeSA6IHN0cmluZztcblx0dXBsb2FkZWRCeVVzZXJJZCA6IHN0cmluZztcblx0dXBsb2FkZWRPbiA6IERhdGU7XG5cdG51bU9mRW50cmllcyA6IG51bWJlcjtcblx0c3RhdHVzIDogS2FsdHVyYUJhdGNoSm9iU3RhdHVzO1xuXHRsb2dGaWxlVXJsIDogc3RyaW5nO1xuXHRjc3ZGaWxlVXJsIDogc3RyaW5nO1xuXHRidWxrRmlsZVVybCA6IHN0cmluZztcblx0YnVsa1VwbG9hZFR5cGUgOiBLYWx0dXJhQnVsa1VwbG9hZFR5cGU7XG5cdHJlc3VsdHMgOiBLYWx0dXJhQnVsa1VwbG9hZFJlc3VsdFtdO1xuXHRlcnJvciA6IHN0cmluZztcblx0ZXJyb3JUeXBlIDogS2FsdHVyYUJhdGNoSm9iRXJyb3JUeXBlcztcblx0ZXJyb3JOdW1iZXIgOiBudW1iZXI7XG5cdGZpbGVOYW1lIDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbiA6IHN0cmluZztcblx0bnVtT2ZPYmplY3RzIDogbnVtYmVyO1xuXHRidWxrVXBsb2FkT2JqZWN0VHlwZSA6IEthbHR1cmFCdWxrVXBsb2FkT2JqZWN0VHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUJ1bGtVcGxvYWRBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5yZXN1bHRzID09PSAndW5kZWZpbmVkJykgdGhpcy5yZXN1bHRzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUJ1bGtVcGxvYWQnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHVwbG9hZGVkQnkgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXBsb2FkZWRCeVVzZXJJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR1cGxvYWRlZE9uIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdG51bU9mRW50cmllcyA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmF0Y2hKb2JTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUJhdGNoSm9iU3RhdHVzJyB9LFxuXHRcdFx0XHRsb2dGaWxlVXJsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNzdkZpbGVVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0YnVsa0ZpbGVVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0YnVsa1VwbG9hZFR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1VwbG9hZFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUJ1bGtVcGxvYWRUeXBlJyB9LFxuXHRcdFx0XHRyZXN1bHRzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1VwbG9hZFJlc3VsdCwgc3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZFJlc3VsdCcgfSxcblx0XHRcdFx0ZXJyb3IgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZXJyb3JUeXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJhdGNoSm9iRXJyb3JUeXBlcywgc3ViVHlwZSA6ICdLYWx0dXJhQmF0Y2hKb2JFcnJvclR5cGVzJyB9LFxuXHRcdFx0XHRlcnJvck51bWJlciA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRmaWxlTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkZXNjcmlwdGlvbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRudW1PZk9iamVjdHMgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YnVsa1VwbG9hZE9iamVjdFR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1VwbG9hZE9iamVjdFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUJ1bGtVcGxvYWRPYmplY3RUeXBlJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUJ1bGtVcGxvYWQnLEthbHR1cmFCdWxrVXBsb2FkKTtcbiJdfQ==
