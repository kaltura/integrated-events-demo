"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaAddFromSearchResultAction = void 0;
var tslib_1 = require("tslib");
var KalturaMediaEntry_1 = require("./KalturaMediaEntry");
var KalturaSearchResult_1 = require("./KalturaSearchResult");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'media' action 'addFromSearchResult'.
 *
 * Usage: Adds new media entry by importing the media file from a search provider.
 * This action should be used with the search service result
 *
 * Server response type:         KalturaMediaEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var MediaAddFromSearchResultAction = /** @class */ (function (_super) {
    tslib_1.__extends(MediaAddFromSearchResultAction, _super);
    function MediaAddFromSearchResultAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaMediaEntry', responseConstructor: KalturaMediaEntry_1.KalturaMediaEntry }) || this;
    }
    MediaAddFromSearchResultAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'media' },
            action: { type: 'c', default: 'addFromSearchResult' },
            mediaEntry: { type: 'o', subTypeConstructor: KalturaMediaEntry_1.KalturaMediaEntry, subType: 'KalturaMediaEntry' },
            searchResult: { type: 'o', subTypeConstructor: KalturaSearchResult_1.KalturaSearchResult, subType: 'KalturaSearchResult' }
        });
        return result;
    };
    return MediaAddFromSearchResultAction;
}(kaltura_request_1.KalturaRequest));
exports.MediaAddFromSearchResultAction = MediaAddFromSearchResultAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZWRpYUFkZEZyb21TZWFyY2hSZXN1bHRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHlEQUF3RDtBQUV4RCw2REFBNEQ7QUFDNUQsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7O0dBVUc7QUFDSDtJQUFvRCwwREFBaUM7SUFLakYsd0NBQVksSUFBMEM7ZUFFbEQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUcscUNBQWlCLEVBQUcsQ0FBQztJQUN2SCxDQUFDO0lBRVMscURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsT0FBTyxFQUFFO1lBQ3ZELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1lBQ3hELFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcscUNBQWlCLEVBQUUsT0FBTyxFQUFHLG1CQUFtQixFQUFFO1lBQ2xHLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1NBQy9GLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxxQ0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJtRCxnQ0FBYyxHQXdCakU7QUF4Qlksd0VBQThCIiwiZmlsZSI6ImFwaS90eXBlcy9NZWRpYUFkZEZyb21TZWFyY2hSZXN1bHRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYU1lZGlhRW50cnkgfSBmcm9tICcuL0thbHR1cmFNZWRpYUVudHJ5JztcblxuaW1wb3J0IHsgS2FsdHVyYVNlYXJjaFJlc3VsdCB9IGZyb20gJy4vS2FsdHVyYVNlYXJjaFJlc3VsdCc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBNZWRpYUFkZEZyb21TZWFyY2hSZXN1bHRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgbWVkaWFFbnRyeT8gOiBLYWx0dXJhTWVkaWFFbnRyeTtcblx0c2VhcmNoUmVzdWx0PyA6IEthbHR1cmFTZWFyY2hSZXN1bHQ7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdtZWRpYScgYWN0aW9uICdhZGRGcm9tU2VhcmNoUmVzdWx0Jy5cbiAqXG4gKiBVc2FnZTogQWRkcyBuZXcgbWVkaWEgZW50cnkgYnkgaW1wb3J0aW5nIHRoZSBtZWRpYSBmaWxlIGZyb20gYSBzZWFyY2ggcHJvdmlkZXIuXG4gKiBUaGlzIGFjdGlvbiBzaG91bGQgYmUgdXNlZCB3aXRoIHRoZSBzZWFyY2ggc2VydmljZSByZXN1bHRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhTWVkaWFFbnRyeVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgTWVkaWFBZGRGcm9tU2VhcmNoUmVzdWx0QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYU1lZGlhRW50cnk+IHtcblxuICAgIG1lZGlhRW50cnkgOiBLYWx0dXJhTWVkaWFFbnRyeTtcblx0c2VhcmNoUmVzdWx0IDogS2FsdHVyYVNlYXJjaFJlc3VsdDtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogTWVkaWFBZGRGcm9tU2VhcmNoUmVzdWx0QWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhTWVkaWFFbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWVkaWFFbnRyeSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbWVkaWEnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZGRGcm9tU2VhcmNoUmVzdWx0JyB9LFxuXHRcdFx0XHRtZWRpYUVudHJ5IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWVkaWFFbnRyeSwgc3ViVHlwZSA6ICdLYWx0dXJhTWVkaWFFbnRyeScgfSxcblx0XHRcdFx0c2VhcmNoUmVzdWx0IDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU2VhcmNoUmVzdWx0LCBzdWJUeXBlIDogJ0thbHR1cmFTZWFyY2hSZXN1bHQnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
