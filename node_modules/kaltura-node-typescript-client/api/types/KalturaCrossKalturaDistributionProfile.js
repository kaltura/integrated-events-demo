"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCrossKalturaDistributionProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaStringValue_1 = require("./KalturaStringValue");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaConfigurableDistributionProfile_1 = require("./KalturaConfigurableDistributionProfile");
var KalturaCrossKalturaDistributionProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCrossKalturaDistributionProfile, _super);
    function KalturaCrossKalturaDistributionProfile(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.metadataXpathsTriggerUpdate === 'undefined')
            _this.metadataXpathsTriggerUpdate = [];
        if (typeof _this.mapAccessControlProfileIds === 'undefined')
            _this.mapAccessControlProfileIds = [];
        if (typeof _this.mapConversionProfileIds === 'undefined')
            _this.mapConversionProfileIds = [];
        if (typeof _this.mapMetadataProfileIds === 'undefined')
            _this.mapMetadataProfileIds = [];
        if (typeof _this.mapStorageProfileIds === 'undefined')
            _this.mapStorageProfileIds = [];
        if (typeof _this.mapFlavorParamsIds === 'undefined')
            _this.mapFlavorParamsIds = [];
        if (typeof _this.mapThumbParamsIds === 'undefined')
            _this.mapThumbParamsIds = [];
        if (typeof _this.mapCaptionParamsIds === 'undefined')
            _this.mapCaptionParamsIds = [];
        return _this;
    }
    KalturaCrossKalturaDistributionProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCrossKalturaDistributionProfile' },
            targetServiceUrl: { type: 's' },
            targetAccountId: { type: 'n' },
            targetLoginId: { type: 's' },
            targetLoginPassword: { type: 's' },
            metadataXslt: { type: 's' },
            metadataXpathsTriggerUpdate: { type: 'a', subTypeConstructor: KalturaStringValue_1.KalturaStringValue, subType: 'KalturaStringValue' },
            distributeCaptions: { type: 'b' },
            distributeCuePoints: { type: 'b' },
            distributeRemoteFlavorAssetContent: { type: 'b' },
            distributeRemoteThumbAssetContent: { type: 'b' },
            distributeRemoteCaptionAssetContent: { type: 'b' },
            mapAccessControlProfileIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapConversionProfileIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapMetadataProfileIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapStorageProfileIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapFlavorParamsIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapThumbParamsIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            mapCaptionParamsIds: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaCrossKalturaDistributionProfile;
}(KalturaConfigurableDistributionProfile_1.KalturaConfigurableDistributionProfile));
exports.KalturaCrossKalturaDistributionProfile = KalturaCrossKalturaDistributionProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCrossKalturaDistributionProfile', KalturaCrossKalturaDistributionProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
