"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaResponseProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaResponseProfileStatus_1 = require("./KalturaResponseProfileStatus");
var KalturaDetachedResponseProfile_1 = require("./KalturaDetachedResponseProfile");
var KalturaResponseProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaResponseProfile, _super);
    function KalturaResponseProfile(data) {
        return _super.call(this, data) || this;
    }
    KalturaResponseProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaResponseProfile' },
            id: { type: 'n', readOnly: true },
            systemName: { type: 's' },
            partnerId: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaResponseProfileStatus_1.KalturaResponseProfileStatus, subType: 'KalturaResponseProfileStatus' },
            version: { type: 'n', readOnly: true }
        });
        return result;
    };
    return KalturaResponseProfile;
}(KalturaDetachedResponseProfile_1.KalturaDetachedResponseProfile));
exports.KalturaResponseProfile = KalturaResponseProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaResponseProfile', KalturaResponseProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUmVzcG9uc2VQcm9maWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsK0VBQThFO0FBQzlFLG1GQUFzSDtBQU90SDtJQUE0QyxrREFBOEI7SUFVdEUsZ0NBQVksSUFBa0M7ZUFFMUMsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLDZDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzNFLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUNwQyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7WUFDdEksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1NBQ2hDLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2QkFBQztBQUFELENBakNBLEFBaUNDLENBakMyQywrREFBOEIsR0FpQ3pFO0FBakNZLHdEQUFzQjtBQW1DbkMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFDLHNCQUFzQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFSZXNwb25zZVByb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVzcG9uc2VQcm9maWxlU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhUmVzcG9uc2VQcm9maWxlU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFEZXRhY2hlZFJlc3BvbnNlUHJvZmlsZSwgS2FsdHVyYURldGFjaGVkUmVzcG9uc2VQcm9maWxlQXJncyB9IGZyb20gJy4vS2FsdHVyYURldGFjaGVkUmVzcG9uc2VQcm9maWxlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQXJncyAgZXh0ZW5kcyBLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGVBcmdzIHtcbiAgICBzeXN0ZW1OYW1lPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVJlc3BvbnNlUHJvZmlsZSBleHRlbmRzIEthbHR1cmFEZXRhY2hlZFJlc3BvbnNlUHJvZmlsZSB7XG5cbiAgICByZWFkb25seSBpZCA6IG51bWJlcjtcblx0c3lzdGVtTmFtZSA6IHN0cmluZztcblx0cmVhZG9ubHkgcGFydG5lcklkIDogbnVtYmVyO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSB1cGRhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSBzdGF0dXMgOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlU3RhdHVzO1xuXHRyZWFkb25seSB2ZXJzaW9uIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFSZXNwb25zZVByb2ZpbGUnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c3lzdGVtTmFtZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwYXJ0bmVySWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRjcmVhdGVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHR1cGRhdGVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXNwb25zZVByb2ZpbGVTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYVJlc3BvbnNlUHJvZmlsZVN0YXR1cycgfSxcblx0XHRcdFx0dmVyc2lvbiA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhUmVzcG9uc2VQcm9maWxlJyxLYWx0dXJhUmVzcG9uc2VQcm9maWxlKTtcbiJdfQ==
