"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MediaExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaMediaEsearchExportToCsvJobData_1 = require("./KalturaMediaEsearchExportToCsvJobData");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'media' action 'exportToCsv'.
 *
 * Usage: Creates a batch job that sends an email with a link to download a CSV containing a list of entries
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var MediaExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(MediaExportToCsvAction, _super);
    function MediaExportToCsvAction(data) {
        return _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
    }
    MediaExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'media' },
            action: { type: 'c', default: 'exportToCsv' },
            data: { type: 'o', subTypeConstructor: KalturaMediaEsearchExportToCsvJobData_1.KalturaMediaEsearchExportToCsvJobData, subType: 'KalturaMediaEsearchExportToCsvJobData' }
        });
        return result;
    };
    return MediaExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.MediaExportToCsvAction = MediaExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZWRpYUV4cG9ydFRvQ3N2QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxpR0FBZ0c7QUFDaEcsc0RBQXdFO0FBTXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTRDLGtEQUFzQjtJQUk5RCxnQ0FBWSxJQUFpQztlQUV6QyxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxFQUFFLEVBQUUsbUJBQW1CLEVBQUcsSUFBSSxFQUFFLENBQUM7SUFDeEYsQ0FBQztJQUVTLDZDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLE9BQU8sRUFBRTtZQUN2RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxhQUFhLEVBQUU7WUFDaEQsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2RUFBcUMsRUFBRSxPQUFPLEVBQUcsdUNBQXVDLEVBQUU7U0FDM0gsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QjJDLGdDQUFjLEdBc0J6RDtBQXRCWSx3REFBc0IiLCJmaWxlIjoiYXBpL3R5cGVzL01lZGlhRXhwb3J0VG9Dc3ZBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGEgfSBmcm9tICcuL0thbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGEnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVkaWFFeHBvcnRUb0NzdkFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBkYXRhIDogS2FsdHVyYU1lZGlhRXNlYXJjaEV4cG9ydFRvQ3N2Sm9iRGF0YTtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ21lZGlhJyBhY3Rpb24gJ2V4cG9ydFRvQ3N2Jy5cbiAqXG4gKiBVc2FnZTogQ3JlYXRlcyBhIGJhdGNoIGpvYiB0aGF0IHNlbmRzIGFuIGVtYWlsIHdpdGggYSBsaW5rIHRvIGRvd25sb2FkIGEgQ1NWIGNvbnRhaW5pbmcgYSBsaXN0IG9mIGVudHJpZXNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIE1lZGlhRXhwb3J0VG9Dc3ZBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxzdHJpbmc+IHtcblxuICAgIGRhdGEgOiBLYWx0dXJhTWVkaWFFc2VhcmNoRXhwb3J0VG9Dc3ZKb2JEYXRhO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IE1lZGlhRXhwb3J0VG9Dc3ZBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdzJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ21lZGlhJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhwb3J0VG9Dc3YnIH0sXG5cdFx0XHRcdGRhdGEgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFNZWRpYUVzZWFyY2hFeHBvcnRUb0NzdkpvYkRhdGEsIHN1YlR5cGUgOiAnS2FsdHVyYU1lZGlhRXNlYXJjaEV4cG9ydFRvQ3N2Sm9iRGF0YScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
