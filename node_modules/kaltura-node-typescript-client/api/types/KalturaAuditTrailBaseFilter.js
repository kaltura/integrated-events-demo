"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAuditTrailBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAuditTrailStatus_1 = require("./KalturaAuditTrailStatus");
var KalturaAuditTrailObjectType_1 = require("./KalturaAuditTrailObjectType");
var KalturaAuditTrailAction_1 = require("./KalturaAuditTrailAction");
var KalturaAuditTrailContext_1 = require("./KalturaAuditTrailContext");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaAuditTrailBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAuditTrailBaseFilter, _super);
    function KalturaAuditTrailBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaAuditTrailBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAuditTrailBaseFilter' },
            idEqual: { type: 'n' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            parsedAtGreaterThanOrEqual: { type: 'n' },
            parsedAtLessThanOrEqual: { type: 'n' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaAuditTrailStatus_1.KalturaAuditTrailStatus, subType: 'KalturaAuditTrailStatus' },
            statusIn: { type: 's' },
            auditObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaAuditTrailObjectType_1.KalturaAuditTrailObjectType, subType: 'KalturaAuditTrailObjectType' },
            auditObjectTypeIn: { type: 's' },
            objectIdEqual: { type: 's' },
            objectIdIn: { type: 's' },
            relatedObjectIdEqual: { type: 's' },
            relatedObjectIdIn: { type: 's' },
            relatedObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaAuditTrailObjectType_1.KalturaAuditTrailObjectType, subType: 'KalturaAuditTrailObjectType' },
            relatedObjectTypeIn: { type: 's' },
            entryIdEqual: { type: 's' },
            entryIdIn: { type: 's' },
            masterPartnerIdEqual: { type: 'n' },
            masterPartnerIdIn: { type: 's' },
            partnerIdEqual: { type: 'n' },
            partnerIdIn: { type: 's' },
            requestIdEqual: { type: 's' },
            requestIdIn: { type: 's' },
            userIdEqual: { type: 's' },
            userIdIn: { type: 's' },
            actionEqual: { type: 'es', subTypeConstructor: KalturaAuditTrailAction_1.KalturaAuditTrailAction, subType: 'KalturaAuditTrailAction' },
            actionIn: { type: 's' },
            ksEqual: { type: 's' },
            contextEqual: { type: 'en', subTypeConstructor: KalturaAuditTrailContext_1.KalturaAuditTrailContext, subType: 'KalturaAuditTrailContext' },
            contextIn: { type: 's' },
            entryPointEqual: { type: 's' },
            entryPointIn: { type: 's' },
            serverNameEqual: { type: 's' },
            serverNameIn: { type: 's' },
            ipAddressEqual: { type: 's' },
            ipAddressIn: { type: 's' },
            clientTagEqual: { type: 's' }
        });
        return result;
    };
    return KalturaAuditTrailBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaAuditTrailBaseFilter = KalturaAuditTrailBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAuditTrailBaseFilter', KalturaAuditTrailBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
