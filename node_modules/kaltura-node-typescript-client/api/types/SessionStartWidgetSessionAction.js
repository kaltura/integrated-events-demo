"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionStartWidgetSessionAction = void 0;
var tslib_1 = require("tslib");
var KalturaStartWidgetSessionResponse_1 = require("./KalturaStartWidgetSessionResponse");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'session' action 'startWidgetSession'.
 *
 * Usage: Start a session for Kaltura's flash widgets
 *
 * Server response type:         KalturaStartWidgetSessionResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var SessionStartWidgetSessionAction = /** @class */ (function (_super) {
    tslib_1.__extends(SessionStartWidgetSessionAction, _super);
    function SessionStartWidgetSessionAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaStartWidgetSessionResponse', responseConstructor: KalturaStartWidgetSessionResponse_1.KalturaStartWidgetSessionResponse }) || this;
        if (typeof _this.expiry === 'undefined')
            _this.expiry = 86400;
        return _this;
    }
    SessionStartWidgetSessionAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'session' },
            action: { type: 'c', default: 'startWidgetSession' },
            widgetId: { type: 's' },
            expiry: { type: 'n' }
        });
        return result;
    };
    return SessionStartWidgetSessionAction;
}(kaltura_request_1.KalturaRequest));
exports.SessionStartWidgetSessionAction = SessionStartWidgetSessionAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TZXNzaW9uU3RhcnRXaWRnZXRTZXNzaW9uQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx5RkFBd0Y7QUFFeEYsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXFELDJEQUFpRDtJQUtsRyx5Q0FBWSxJQUEwQztRQUF0RCxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG1DQUFtQyxFQUFFLG1CQUFtQixFQUFHLHFFQUFpQyxFQUFHLENBQUMsU0FFdEo7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLE1BQU0sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ2hFLENBQUM7SUFFUyxzREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxTQUFTLEVBQUU7WUFDekQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDdkQsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2QsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHNDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsQ0F6Qm9ELGdDQUFjLEdBeUJsRTtBQXpCWSwwRUFBK0IiLCJmaWxlIjoiYXBpL3R5cGVzL1Nlc3Npb25TdGFydFdpZGdldFNlc3Npb25BY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVN0YXJ0V2lkZ2V0U2Vzc2lvblJlc3BvbnNlIH0gZnJvbSAnLi9LYWx0dXJhU3RhcnRXaWRnZXRTZXNzaW9uUmVzcG9uc2UnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uU3RhcnRXaWRnZXRTZXNzaW9uQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHdpZGdldElkIDogc3RyaW5nO1xuXHRleHBpcnk/IDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2Vzc2lvbicgYWN0aW9uICdzdGFydFdpZGdldFNlc3Npb24nLlxuICpcbiAqIFVzYWdlOiBTdGFydCBhIHNlc3Npb24gZm9yIEthbHR1cmEncyBmbGFzaCB3aWRnZXRzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVN0YXJ0V2lkZ2V0U2Vzc2lvblJlc3BvbnNlXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXNzaW9uU3RhcnRXaWRnZXRTZXNzaW9uQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVN0YXJ0V2lkZ2V0U2Vzc2lvblJlc3BvbnNlPiB7XG5cbiAgICB3aWRnZXRJZCA6IHN0cmluZztcblx0ZXhwaXJ5IDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFNlc3Npb25TdGFydFdpZGdldFNlc3Npb25BY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTdGFydFdpZGdldFNlc3Npb25SZXNwb25zZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RhcnRXaWRnZXRTZXNzaW9uUmVzcG9uc2UgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuZXhwaXJ5ID09PSAndW5kZWZpbmVkJykgdGhpcy5leHBpcnkgPSA4NjQwMDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzZXNzaW9uJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc3RhcnRXaWRnZXRTZXNzaW9uJyB9LFxuXHRcdFx0XHR3aWRnZXRJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRleHBpcnkgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
