"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventNotificationTemplateRegisterAction = void 0;
var tslib_1 = require("tslib");
var KalturaPushNotificationData_1 = require("./KalturaPushNotificationData");
var KalturaPushNotificationParams_1 = require("./KalturaPushNotificationParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'eventNotificationTemplate' action 'register'.
 *
 * Usage: Register to a queue from which event messages will be provided according to given template. Queue will be created if not already exists
 *
 * Server response type:         KalturaPushNotificationData
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EventNotificationTemplateRegisterAction = /** @class */ (function (_super) {
    tslib_1.__extends(EventNotificationTemplateRegisterAction, _super);
    function EventNotificationTemplateRegisterAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPushNotificationData', responseConstructor: KalturaPushNotificationData_1.KalturaPushNotificationData }) || this;
    }
    EventNotificationTemplateRegisterAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'eventnotification_eventnotificationtemplate' },
            action: { type: 'c', default: 'register' },
            notificationTemplateSystemName: { type: 's' },
            pushNotificationParams: { type: 'o', subTypeConstructor: KalturaPushNotificationParams_1.KalturaPushNotificationParams, subType: 'KalturaPushNotificationParams' }
        });
        return result;
    };
    return EventNotificationTemplateRegisterAction;
}(kaltura_request_1.KalturaRequest));
exports.EventNotificationTemplateRegisterAction = EventNotificationTemplateRegisterAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlUmVnaXN0ZXJBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZFQUE0RTtBQUU1RSxpRkFBZ0Y7QUFDaEYsc0RBQXdFO0FBT3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTZELG1FQUEyQztJQUtwRyxpREFBWSxJQUFrRDtlQUUxRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyw2QkFBNkIsRUFBRSxtQkFBbUIsRUFBRyx5REFBMkIsRUFBRyxDQUFDO0lBQzNJLENBQUM7SUFFUyw4REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw2Q0FBNkMsRUFBRTtZQUM3RixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxVQUFVLEVBQUU7WUFDN0MsOEJBQThCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9DLHNCQUFzQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2REFBNkIsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7U0FDN0gsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDhDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QjRELGdDQUFjLEdBd0IxRTtBQXhCWSwwRkFBdUMiLCJmaWxlIjoiYXBpL3R5cGVzL0V2ZW50Tm90aWZpY2F0aW9uVGVtcGxhdGVSZWdpc3RlckFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhUHVzaE5vdGlmaWNhdGlvbkRhdGEgfSBmcm9tICcuL0thbHR1cmFQdXNoTm90aWZpY2F0aW9uRGF0YSc7XG5cbmltcG9ydCB7IEthbHR1cmFQdXNoTm90aWZpY2F0aW9uUGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhUHVzaE5vdGlmaWNhdGlvblBhcmFtcyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlUmVnaXN0ZXJBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgbm90aWZpY2F0aW9uVGVtcGxhdGVTeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRwdXNoTm90aWZpY2F0aW9uUGFyYW1zIDogS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdldmVudE5vdGlmaWNhdGlvblRlbXBsYXRlJyBhY3Rpb24gJ3JlZ2lzdGVyJy5cbiAqXG4gKiBVc2FnZTogUmVnaXN0ZXIgdG8gYSBxdWV1ZSBmcm9tIHdoaWNoIGV2ZW50IG1lc3NhZ2VzIHdpbGwgYmUgcHJvdmlkZWQgYWNjb3JkaW5nIHRvIGdpdmVuIHRlbXBsYXRlLiBRdWV1ZSB3aWxsIGJlIGNyZWF0ZWQgaWYgbm90IGFscmVhZHkgZXhpc3RzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVB1c2hOb3RpZmljYXRpb25EYXRhXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlUmVnaXN0ZXJBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUHVzaE5vdGlmaWNhdGlvbkRhdGE+IHtcblxuICAgIG5vdGlmaWNhdGlvblRlbXBsYXRlU3lzdGVtTmFtZSA6IHN0cmluZztcblx0cHVzaE5vdGlmaWNhdGlvblBhcmFtcyA6IEthbHR1cmFQdXNoTm90aWZpY2F0aW9uUGFyYW1zO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IEV2ZW50Tm90aWZpY2F0aW9uVGVtcGxhdGVSZWdpc3RlckFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVB1c2hOb3RpZmljYXRpb25EYXRhJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFQdXNoTm90aWZpY2F0aW9uRGF0YSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXZlbnRub3RpZmljYXRpb25fZXZlbnRub3RpZmljYXRpb250ZW1wbGF0ZScgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3JlZ2lzdGVyJyB9LFxuXHRcdFx0XHRub3RpZmljYXRpb25UZW1wbGF0ZVN5c3RlbU5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHVzaE5vdGlmaWNhdGlvblBhcmFtcyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXMsIHN1YlR5cGUgOiAnS2FsdHVyYVB1c2hOb3RpZmljYXRpb25QYXJhbXMnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
