"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaReportInputFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaReportInterval_1 = require("./KalturaReportInterval");
var KalturaESearchEntryOperator_1 = require("./KalturaESearchEntryOperator");
var KalturaReportInputBaseFilter_1 = require("./KalturaReportInputBaseFilter");
var KalturaReportInputFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaReportInputFilter, _super);
    function KalturaReportInputFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaReportInputFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaReportInputFilter' },
            keywords: { type: 's' },
            searchInTags: { type: 'b' },
            searchInAdminTags: { type: 'b' },
            categories: { type: 's' },
            categoriesIdsIn: { type: 's' },
            customVar1In: { type: 's' },
            customVar2In: { type: 's' },
            customVar3In: { type: 's' },
            deviceIn: { type: 's' },
            countryIn: { type: 's' },
            regionIn: { type: 's' },
            citiesIn: { type: 's' },
            operatingSystemFamilyIn: { type: 's' },
            operatingSystemIn: { type: 's' },
            browserFamilyIn: { type: 's' },
            browserIn: { type: 's' },
            timeZoneOffset: { type: 'n' },
            interval: { type: 'es', subTypeConstructor: KalturaReportInterval_1.KalturaReportInterval, subType: 'KalturaReportInterval' },
            mediaTypeIn: { type: 's' },
            sourceTypeIn: { type: 's' },
            ownerIdsIn: { type: 's' },
            entryOperator: { type: 'o', subTypeConstructor: KalturaESearchEntryOperator_1.KalturaESearchEntryOperator, subType: 'KalturaESearchEntryOperator' },
            entryCreatedAtGreaterThanOrEqual: { type: 'd' },
            entryCreatedAtLessThanOrEqual: { type: 'd' },
            entryIdIn: { type: 's' },
            playbackTypeIn: { type: 's' },
            playbackContextIdsIn: { type: 's' },
            rootEntryIdIn: { type: 's' },
            errorCodeIn: { type: 's' },
            playerVersionIn: { type: 's' },
            ispIn: { type: 's' },
            applicationVersionIn: { type: 's' },
            nodeIdsIn: { type: 's' },
            categoriesAncestorIdIn: { type: 's' },
            hotspotIdIn: { type: 's' },
            crmIdIn: { type: 's' },
            playlistIdIn: { type: 's' },
            domainIn: { type: 's' },
            canonicalUrlIn: { type: 's' },
            virtualEventIdIn: { type: 's' },
            originIn: { type: 's' },
            uiConfIdIn: { type: 's' },
            cuePointIdIn: { type: 's' },
            contextIdIn: { type: 's' },
            roleIn: { type: 's' },
            industryIn: { type: 's' },
            playbackModeIn: { type: 's' },
            companyIn: { type: 's' },
            eventSessionContextIdIn: { type: 's' }
        });
        return result;
    };
    return KalturaReportInputFilter;
}(KalturaReportInputBaseFilter_1.KalturaReportInputBaseFilter));
exports.KalturaReportInputFilter = KalturaReportInputFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaReportInputFilter', KalturaReportInputFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
