"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaKafkaNotificationTemplate = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaKafkaNotificationFormat_1 = require("./KalturaKafkaNotificationFormat");
var KalturaEventNotificationTemplate_1 = require("./KalturaEventNotificationTemplate");
var KalturaKafkaNotificationTemplate = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaKafkaNotificationTemplate, _super);
    function KalturaKafkaNotificationTemplate(data) {
        return _super.call(this, data) || this;
    }
    KalturaKafkaNotificationTemplate.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaKafkaNotificationTemplate' },
            topicName: { type: 's' },
            partitionKey: { type: 's' },
            messageFormat: { type: 'en', subTypeConstructor: KalturaKafkaNotificationFormat_1.KalturaKafkaNotificationFormat, subType: 'KalturaKafkaNotificationFormat' },
            apiObjectType: { type: 's' },
            responseProfileSystemName: { type: 's' },
            requiresPermissions: { type: 's' }
        });
        return result;
    };
    return KalturaKafkaNotificationTemplate;
}(KalturaEventNotificationTemplate_1.KalturaEventNotificationTemplate));
exports.KalturaKafkaNotificationTemplate = KalturaKafkaNotificationTemplate;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaKafkaNotificationTemplate', KalturaKafkaNotificationTemplate);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhS2Fma2FOb3RpZmljYXRpb25UZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1GQUFrRjtBQUNsRix1RkFBNEg7QUFZNUg7SUFBc0QsNERBQWdDO0lBU2xGLDBDQUFZLElBQTRDO2VBRXBELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxrQ0FBa0MsRUFBRTtZQUNyRixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrREFBOEIsRUFBRSxPQUFPLEVBQUcsZ0NBQWdDLEVBQUU7WUFDaEksYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5Qix5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQzNCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx1Q0FBQztBQUFELENBL0JBLEFBK0JDLENBL0JxRCxtRUFBZ0MsR0ErQnJGO0FBL0JZLDRFQUFnQztBQWlDN0MsMkNBQW1CLENBQUMsWUFBWSxDQUFDLGtDQUFrQyxFQUFDLGdDQUFnQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFLYWZrYU5vdGlmaWNhdGlvblRlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUthZmthTm90aWZpY2F0aW9uRm9ybWF0IH0gZnJvbSAnLi9LYWx0dXJhS2Fma2FOb3RpZmljYXRpb25Gb3JtYXQnO1xuaW1wb3J0IHsgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uVGVtcGxhdGUsIEthbHR1cmFFdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlQXJncyB9IGZyb20gJy4vS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uVGVtcGxhdGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFLYWZrYU5vdGlmaWNhdGlvblRlbXBsYXRlQXJncyAgZXh0ZW5kcyBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25UZW1wbGF0ZUFyZ3Mge1xuICAgIHRvcGljTmFtZT8gOiBzdHJpbmc7XG5cdHBhcnRpdGlvbktleT8gOiBzdHJpbmc7XG5cdG1lc3NhZ2VGb3JtYXQ/IDogS2FsdHVyYUthZmthTm90aWZpY2F0aW9uRm9ybWF0O1xuXHRhcGlPYmplY3RUeXBlPyA6IHN0cmluZztcblx0cmVzcG9uc2VQcm9maWxlU3lzdGVtTmFtZT8gOiBzdHJpbmc7XG5cdHJlcXVpcmVzUGVybWlzc2lvbnM/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhS2Fma2FOb3RpZmljYXRpb25UZW1wbGF0ZSBleHRlbmRzIEthbHR1cmFFdmVudE5vdGlmaWNhdGlvblRlbXBsYXRlIHtcblxuICAgIHRvcGljTmFtZSA6IHN0cmluZztcblx0cGFydGl0aW9uS2V5IDogc3RyaW5nO1xuXHRtZXNzYWdlRm9ybWF0IDogS2FsdHVyYUthZmthTm90aWZpY2F0aW9uRm9ybWF0O1xuXHRhcGlPYmplY3RUeXBlIDogc3RyaW5nO1xuXHRyZXNwb25zZVByb2ZpbGVTeXN0ZW1OYW1lIDogc3RyaW5nO1xuXHRyZXF1aXJlc1Blcm1pc3Npb25zIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhS2Fma2FOb3RpZmljYXRpb25UZW1wbGF0ZUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhS2Fma2FOb3RpZmljYXRpb25UZW1wbGF0ZScgfSxcblx0XHRcdFx0dG9waWNOYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhcnRpdGlvbktleSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRtZXNzYWdlRm9ybWF0IDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUthZmthTm90aWZpY2F0aW9uRm9ybWF0LCBzdWJUeXBlIDogJ0thbHR1cmFLYWZrYU5vdGlmaWNhdGlvbkZvcm1hdCcgfSxcblx0XHRcdFx0YXBpT2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXNwb25zZVByb2ZpbGVTeXN0ZW1OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlcXVpcmVzUGVybWlzc2lvbnMgOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFLYWZrYU5vdGlmaWNhdGlvblRlbXBsYXRlJyxLYWx0dXJhS2Fma2FOb3RpZmljYXRpb25UZW1wbGF0ZSk7XG4iXX0=
