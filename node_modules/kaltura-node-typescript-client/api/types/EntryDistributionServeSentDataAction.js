"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryDistributionServeSentDataAction = void 0;
var tslib_1 = require("tslib");
var KalturaDistributionAction_1 = require("./KalturaDistributionAction");
var kaltura_file_request_1 = require("../kaltura-file-request");
/**
 * Build request payload for service 'entryDistribution' action 'serveSentData'.
 *
 * Usage: Serves entry distribution sent data
 *
 * Server response type:         { url: string }
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaFileRequest
 */
var EntryDistributionServeSentDataAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryDistributionServeSentDataAction, _super);
    function EntryDistributionServeSentDataAction(data) {
        return _super.call(this, data) || this;
    }
    EntryDistributionServeSentDataAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'contentdistribution_entrydistribution' },
            action: { type: 'c', default: 'serveSentData' },
            id: { type: 'n' },
            actionType: { type: 'en', subTypeConstructor: KalturaDistributionAction_1.KalturaDistributionAction, subType: 'KalturaDistributionAction' }
        });
        return result;
    };
    return EntryDistributionServeSentDataAction;
}(kaltura_file_request_1.KalturaFileRequest));
exports.EntryDistributionServeSentDataAction = EntryDistributionServeSentDataAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeURpc3RyaWJ1dGlvblNlcnZlU2VudERhdGFBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHlFQUF3RTtBQUN4RSxnRUFBcUY7QUFPckY7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMEQsZ0VBQWtCO0lBS3hFLDhDQUFZLElBQStDO2VBRXZELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUywyREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1Q0FBdUMsRUFBRTtZQUN2RixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDbEQsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtTQUMxRyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCeUQseUNBQWtCLEdBd0IzRTtBQXhCWSxvRkFBb0MiLCJmaWxlIjoiYXBpL3R5cGVzL0VudHJ5RGlzdHJpYnV0aW9uU2VydmVTZW50RGF0YUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbiB9IGZyb20gJy4vS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbic7XG5pbXBvcnQgeyBLYWx0dXJhRmlsZVJlcXVlc3QsIEthbHR1cmFGaWxlUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLWZpbGUtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnlEaXN0cmlidXRpb25TZXJ2ZVNlbnREYXRhQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhRmlsZVJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IG51bWJlcjtcblx0YWN0aW9uVHlwZSA6IEthbHR1cmFEaXN0cmlidXRpb25BY3Rpb247XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdlbnRyeURpc3RyaWJ1dGlvbicgYWN0aW9uICdzZXJ2ZVNlbnREYXRhJy5cbiAqXG4gKiBVc2FnZTogU2VydmVzIGVudHJ5IGRpc3RyaWJ1dGlvbiBzZW50IGRhdGFcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICB7IHVybDogc3RyaW5nIH1cbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYUZpbGVSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRyeURpc3RyaWJ1dGlvblNlcnZlU2VudERhdGFBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhRmlsZVJlcXVlc3Qge1xuXG4gICAgaWQgOiBudW1iZXI7XG5cdGFjdGlvblR5cGUgOiBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IEVudHJ5RGlzdHJpYnV0aW9uU2VydmVTZW50RGF0YUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdjb250ZW50ZGlzdHJpYnV0aW9uX2VudHJ5ZGlzdHJpYnV0aW9uJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VydmVTZW50RGF0YScgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YWN0aW9uVHlwZSA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEaXN0cmlidXRpb25BY3Rpb24sIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
