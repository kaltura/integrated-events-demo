"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PexipGenerateSipUrlAction = void 0;
var tslib_1 = require("tslib");
var KalturaSipSourceType_1 = require("./KalturaSipSourceType");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'pexip' action 'generateSipUrl'.
 *
 *
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PexipGenerateSipUrlAction = /** @class */ (function (_super) {
    tslib_1.__extends(PexipGenerateSipUrlAction, _super);
    function PexipGenerateSipUrlAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.regenerate === 'undefined')
            _this.regenerate = false;
        if (typeof _this.sourceType === 'undefined')
            _this.sourceType = 1;
        return _this;
    }
    PexipGenerateSipUrlAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'sip_pexip' },
            action: { type: 'c', default: 'generateSipUrl' },
            entryId: { type: 's' },
            regenerate: { type: 'b' },
            sourceType: { type: 'en', subTypeConstructor: KalturaSipSourceType_1.KalturaSipSourceType, subType: 'KalturaSipSourceType' }
        });
        return result;
    };
    return PexipGenerateSipUrlAction;
}(kaltura_request_1.KalturaRequest));
exports.PexipGenerateSipUrlAction = PexipGenerateSipUrlAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QZXhpcEdlbmVyYXRlU2lwVXJsQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSwrREFBOEQ7QUFDOUQsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQStDLHFEQUFzQjtJQU1qRSxtQ0FBWSxJQUFvQztRQUFoRCxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQyxTQUd2RjtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsVUFBVSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztRQUMxRSxJQUFJLE9BQU8sS0FBSSxDQUFDLFVBQVUsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7O0lBQzlELENBQUM7SUFFUyxnREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxXQUFXLEVBQUU7WUFDM0QsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsZ0JBQWdCLEVBQUU7WUFDbkQsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsMkNBQW9CLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1NBQ2hHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxnQ0FBQztBQUFELENBNUJBLEFBNEJDLENBNUI4QyxnQ0FBYyxHQTRCNUQ7QUE1QlksOERBQXlCIiwiZmlsZSI6ImFwaS90eXBlcy9QZXhpcEdlbmVyYXRlU2lwVXJsQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuXG5pbXBvcnQgeyBLYWx0dXJhU2lwU291cmNlVHlwZSB9IGZyb20gJy4vS2FsdHVyYVNpcFNvdXJjZVR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGV4aXBHZW5lcmF0ZVNpcFVybEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRyZWdlbmVyYXRlPyA6IGJvb2xlYW47XG5cdHNvdXJjZVR5cGU/IDogS2FsdHVyYVNpcFNvdXJjZVR5cGU7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwZXhpcCcgYWN0aW9uICdnZW5lcmF0ZVNpcFVybCcuXG4gKlxuICogXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgc3RyaW5nXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBQZXhpcEdlbmVyYXRlU2lwVXJsQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8c3RyaW5nPiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRyZWdlbmVyYXRlIDogYm9vbGVhbjtcblx0c291cmNlVHlwZSA6IEthbHR1cmFTaXBTb3VyY2VUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBleGlwR2VuZXJhdGVTaXBVcmxBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdzJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVnZW5lcmF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMucmVnZW5lcmF0ZSA9IGZhbHNlO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5zb3VyY2VUeXBlID09PSAndW5kZWZpbmVkJykgdGhpcy5zb3VyY2VUeXBlID0gMTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzaXBfcGV4aXAnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZW5lcmF0ZVNpcFVybCcgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZWdlbmVyYXRlIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdHNvdXJjZVR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU2lwU291cmNlVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhU2lwU291cmNlVHlwZScgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
