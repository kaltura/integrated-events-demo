"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaSchedulerWorker = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBatchJobType_1 = require("./KalturaBatchJobType");
var KalturaSchedulerStatus_1 = require("./KalturaSchedulerStatus");
var KalturaSchedulerConfig_1 = require("./KalturaSchedulerConfig");
var KalturaBatchJob_1 = require("./KalturaBatchJob");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaSchedulerWorker = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaSchedulerWorker, _super);
    function KalturaSchedulerWorker(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.statuses === 'undefined')
            _this.statuses = [];
        if (typeof _this.configs === 'undefined')
            _this.configs = [];
        if (typeof _this.lockedJobs === 'undefined')
            _this.lockedJobs = [];
        return _this;
    }
    KalturaSchedulerWorker.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaSchedulerWorker' },
            id: { type: 'n', readOnly: true },
            configuredId: { type: 'n' },
            schedulerId: { type: 'n' },
            schedulerConfiguredId: { type: 'n' },
            type: { type: 'es', subTypeConstructor: KalturaBatchJobType_1.KalturaBatchJobType, subType: 'KalturaBatchJobType' },
            typeName: { type: 's' },
            name: { type: 's' },
            statuses: { type: 'a', subTypeConstructor: KalturaSchedulerStatus_1.KalturaSchedulerStatus, subType: 'KalturaSchedulerStatus' },
            configs: { type: 'a', subTypeConstructor: KalturaSchedulerConfig_1.KalturaSchedulerConfig, subType: 'KalturaSchedulerConfig' },
            lockedJobs: { type: 'a', subTypeConstructor: KalturaBatchJob_1.KalturaBatchJob, subType: 'KalturaBatchJob' },
            avgWait: { type: 'n' },
            avgWork: { type: 'n' },
            lastStatus: { type: 'n' },
            lastStatusStr: { type: 's' }
        });
        return result;
    };
    return KalturaSchedulerWorker;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaSchedulerWorker = KalturaSchedulerWorker;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaSchedulerWorker', KalturaSchedulerWorker);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhU2NoZWR1bGVyV29ya2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsNkRBQTREO0FBQzVELG1FQUFrRTtBQUNsRSxtRUFBa0U7QUFDbEUscURBQW9EO0FBQ3BELDhEQUFrRjtBQW1CbEY7SUFBNEMsa0RBQWlCO0lBaUJ6RCxnQ0FBWSxJQUFrQztRQUE5QyxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUlkO1FBSEcsSUFBSSxPQUFPLEtBQUksQ0FBQyxRQUFRLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ25FLElBQUksT0FBTyxLQUFJLENBQUMsT0FBTyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUMzRCxJQUFJLE9BQU8sS0FBSSxDQUFDLFVBQVUsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7O0lBQy9ELENBQUM7SUFFUyw2Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMzRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLHFCQUFxQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QyxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUNqRyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDMUcsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywrQ0FBc0IsRUFBRSxPQUFPLEVBQUcsd0JBQXdCLEVBQUU7WUFDekcsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpQ0FBZSxFQUFFLE9BQU8sRUFBRyxpQkFBaUIsRUFBRTtZQUM5RixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3JCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw2QkFBQztBQUFELENBbERBLEFBa0RDLENBbEQyQyx1Q0FBaUIsR0FrRDVEO0FBbERZLHdEQUFzQjtBQW9EbkMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLHdCQUF3QixFQUFDLHNCQUFzQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFTY2hlZHVsZXJXb3JrZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQmF0Y2hKb2JUeXBlIH0gZnJvbSAnLi9LYWx0dXJhQmF0Y2hKb2JUeXBlJztcbmltcG9ydCB7IEthbHR1cmFTY2hlZHVsZXJTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFTY2hlZHVsZXJTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlckNvbmZpZyB9IGZyb20gJy4vS2FsdHVyYVNjaGVkdWxlckNvbmZpZyc7XG5pbXBvcnQgeyBLYWx0dXJhQmF0Y2hKb2IgfSBmcm9tICcuL0thbHR1cmFCYXRjaEpvYic7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVNjaGVkdWxlcldvcmtlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBjb25maWd1cmVkSWQ/IDogbnVtYmVyO1xuXHRzY2hlZHVsZXJJZD8gOiBudW1iZXI7XG5cdHNjaGVkdWxlckNvbmZpZ3VyZWRJZD8gOiBudW1iZXI7XG5cdHR5cGU/IDogS2FsdHVyYUJhdGNoSm9iVHlwZTtcblx0dHlwZU5hbWU/IDogc3RyaW5nO1xuXHRuYW1lPyA6IHN0cmluZztcblx0c3RhdHVzZXM/IDogS2FsdHVyYVNjaGVkdWxlclN0YXR1c1tdO1xuXHRjb25maWdzPyA6IEthbHR1cmFTY2hlZHVsZXJDb25maWdbXTtcblx0bG9ja2VkSm9icz8gOiBLYWx0dXJhQmF0Y2hKb2JbXTtcblx0YXZnV2FpdD8gOiBudW1iZXI7XG5cdGF2Z1dvcms/IDogbnVtYmVyO1xuXHRsYXN0U3RhdHVzPyA6IG51bWJlcjtcblx0bGFzdFN0YXR1c1N0cj8gOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFTY2hlZHVsZXJXb3JrZXIgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICByZWFkb25seSBpZCA6IG51bWJlcjtcblx0Y29uZmlndXJlZElkIDogbnVtYmVyO1xuXHRzY2hlZHVsZXJJZCA6IG51bWJlcjtcblx0c2NoZWR1bGVyQ29uZmlndXJlZElkIDogbnVtYmVyO1xuXHR0eXBlIDogS2FsdHVyYUJhdGNoSm9iVHlwZTtcblx0dHlwZU5hbWUgOiBzdHJpbmc7XG5cdG5hbWUgOiBzdHJpbmc7XG5cdHN0YXR1c2VzIDogS2FsdHVyYVNjaGVkdWxlclN0YXR1c1tdO1xuXHRjb25maWdzIDogS2FsdHVyYVNjaGVkdWxlckNvbmZpZ1tdO1xuXHRsb2NrZWRKb2JzIDogS2FsdHVyYUJhdGNoSm9iW107XG5cdGF2Z1dhaXQgOiBudW1iZXI7XG5cdGF2Z1dvcmsgOiBudW1iZXI7XG5cdGxhc3RTdGF0dXMgOiBudW1iZXI7XG5cdGxhc3RTdGF0dXNTdHIgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFTY2hlZHVsZXJXb3JrZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zdGF0dXNlcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuc3RhdHVzZXMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMuY29uZmlncyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuY29uZmlncyA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5sb2NrZWRKb2JzID09PSAndW5kZWZpbmVkJykgdGhpcy5sb2NrZWRKb2JzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVNjaGVkdWxlcldvcmtlcicgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRjb25maWd1cmVkSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2NoZWR1bGVySWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0c2NoZWR1bGVyQ29uZmlndXJlZElkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmF0Y2hKb2JUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFCYXRjaEpvYlR5cGUnIH0sXG5cdFx0XHRcdHR5cGVOYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3RhdHVzZXMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTY2hlZHVsZXJTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYVNjaGVkdWxlclN0YXR1cycgfSxcblx0XHRcdFx0Y29uZmlncyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlckNvbmZpZywgc3ViVHlwZSA6ICdLYWx0dXJhU2NoZWR1bGVyQ29uZmlnJyB9LFxuXHRcdFx0XHRsb2NrZWRKb2JzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmF0Y2hKb2IsIHN1YlR5cGUgOiAnS2FsdHVyYUJhdGNoSm9iJyB9LFxuXHRcdFx0XHRhdmdXYWl0IDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGF2Z1dvcmsgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0bGFzdFN0YXR1cyA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRsYXN0U3RhdHVzU3RyIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhU2NoZWR1bGVyV29ya2VyJyxLYWx0dXJhU2NoZWR1bGVyV29ya2VyKTtcbiJdfQ==
