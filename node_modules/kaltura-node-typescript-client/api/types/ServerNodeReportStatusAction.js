"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerNodeReportStatusAction = void 0;
var tslib_1 = require("tslib");
var KalturaServerNode_1 = require("./KalturaServerNode");
var KalturaServerNodeStatus_1 = require("./KalturaServerNodeStatus");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'serverNode' action 'reportStatus'.
 *
 * Usage: Update server node status
 *
 * Server response type:         KalturaServerNode
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ServerNodeReportStatusAction = /** @class */ (function (_super) {
    tslib_1.__extends(ServerNodeReportStatusAction, _super);
    function ServerNodeReportStatusAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaServerNode', responseConstructor: KalturaServerNode_1.KalturaServerNode }) || this;
        if (typeof _this.serverNodeStatus === 'undefined')
            _this.serverNodeStatus = 1;
        return _this;
    }
    ServerNodeReportStatusAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'servernode' },
            action: { type: 'c', default: 'reportStatus' },
            hostName: { type: 's' },
            serverNode: { type: 'o', subTypeConstructor: KalturaServerNode_1.KalturaServerNode, subType: 'KalturaServerNode' },
            serverNodeStatus: { type: 'en', subTypeConstructor: KalturaServerNodeStatus_1.KalturaServerNodeStatus, subType: 'KalturaServerNodeStatus' }
        });
        return result;
    };
    return ServerNodeReportStatusAction;
}(kaltura_request_1.KalturaRequest));
exports.ServerNodeReportStatusAction = ServerNodeReportStatusAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9TZXJ2ZXJOb2RlUmVwb3J0U3RhdHVzQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx5REFBd0Q7QUFFeEQscUVBQW9FO0FBQ3BFLHNEQUF3RTtBQVF4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFrRCx3REFBaUM7SUFNL0Usc0NBQVksSUFBdUM7UUFBbkQsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxtQkFBbUIsRUFBRSxtQkFBbUIsRUFBRyxxQ0FBaUIsRUFBRyxDQUFDLFNBRXRIO1FBREcsSUFBSSxPQUFPLEtBQUksQ0FBQyxnQkFBZ0IsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQzs7SUFDaEYsQ0FBQztJQUVTLG1EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFlBQVksRUFBRTtZQUM1RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxjQUFjLEVBQUU7WUFDakQsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHFDQUFpQixFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUNsRyxnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsaURBQXVCLEVBQUUsT0FBTyxFQUFHLHlCQUF5QixFQUFFO1NBQzVHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxtQ0FBQztBQUFELENBM0JBLEFBMkJDLENBM0JpRCxnQ0FBYyxHQTJCL0Q7QUEzQlksb0VBQTRCIiwiZmlsZSI6ImFwaS90eXBlcy9TZXJ2ZXJOb2RlUmVwb3J0U3RhdHVzQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFTZXJ2ZXJOb2RlIH0gZnJvbSAnLi9LYWx0dXJhU2VydmVyTm9kZSc7XG5cbmltcG9ydCB7IEthbHR1cmFTZXJ2ZXJOb2RlU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhU2VydmVyTm9kZVN0YXR1cyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBTZXJ2ZXJOb2RlUmVwb3J0U3RhdHVzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGhvc3ROYW1lIDogc3RyaW5nO1xuXHRzZXJ2ZXJOb2RlPyA6IEthbHR1cmFTZXJ2ZXJOb2RlO1xuXHRzZXJ2ZXJOb2RlU3RhdHVzPyA6IEthbHR1cmFTZXJ2ZXJOb2RlU3RhdHVzO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnc2VydmVyTm9kZScgYWN0aW9uICdyZXBvcnRTdGF0dXMnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgc2VydmVyIG5vZGUgc3RhdHVzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYVNlcnZlck5vZGVcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZlck5vZGVSZXBvcnRTdGF0dXNBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhU2VydmVyTm9kZT4ge1xuXG4gICAgaG9zdE5hbWUgOiBzdHJpbmc7XG5cdHNlcnZlck5vZGUgOiBLYWx0dXJhU2VydmVyTm9kZTtcblx0c2VydmVyTm9kZVN0YXR1cyA6IEthbHR1cmFTZXJ2ZXJOb2RlU3RhdHVzO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFNlcnZlck5vZGVSZXBvcnRTdGF0dXNBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTZXJ2ZXJOb2RlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFTZXJ2ZXJOb2RlICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlcnZlck5vZGVTdGF0dXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnNlcnZlck5vZGVTdGF0dXMgPSAxO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3NlcnZlcm5vZGUnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdyZXBvcnRTdGF0dXMnIH0sXG5cdFx0XHRcdGhvc3ROYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNlcnZlck5vZGUgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTZXJ2ZXJOb2RlLCBzdWJUeXBlIDogJ0thbHR1cmFTZXJ2ZXJOb2RlJyB9LFxuXHRcdFx0XHRzZXJ2ZXJOb2RlU3RhdHVzIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNlcnZlck5vZGVTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYVNlcnZlck5vZGVTdGF0dXMnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
