"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBulkUploadBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBatchJobStatus_1 = require("./KalturaBatchJobStatus");
var KalturaBulkUploadObjectType_1 = require("./KalturaBulkUploadObjectType");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaBulkUploadBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBulkUploadBaseFilter, _super);
    function KalturaBulkUploadBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaBulkUploadBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBulkUploadBaseFilter' },
            uploadedOnGreaterThanOrEqual: { type: 'd' },
            uploadedOnLessThanOrEqual: { type: 'd' },
            uploadedOnEqual: { type: 'd' },
            statusIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaBatchJobStatus_1.KalturaBatchJobStatus, subType: 'KalturaBatchJobStatus' },
            bulkUploadObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaBulkUploadObjectType_1.KalturaBulkUploadObjectType, subType: 'KalturaBulkUploadObjectType' },
            bulkUploadObjectTypeIn: { type: 's' }
        });
        return result;
    };
    return KalturaBulkUploadBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaBulkUploadBaseFilter = KalturaBulkUploadBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBulkUploadBaseFilter', KalturaBulkUploadBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQnVsa1VwbG9hZEJhc2VGaWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxpRUFBZ0U7QUFDaEUsNkVBQTRFO0FBQzVFLGlEQUFtRTtBQWFuRTtJQUFpRCx1REFBYTtJQVUxRCxxQ0FBWSxJQUF1QztlQUUvQyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsa0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDaEYsNEJBQTRCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzdDLHlCQUF5QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2hDLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2Q0FBcUIsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDNUcseUJBQXlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlEQUEyQixFQUFFLE9BQU8sRUFBRyw2QkFBNkIsRUFBRTtZQUN0SSxzQkFBc0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDOUIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtDQUFDO0FBQUQsQ0FqQ0EsQUFpQ0MsQ0FqQ2dELDZCQUFhLEdBaUM3RDtBQWpDWSxrRUFBMkI7QUFtQ3hDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyw2QkFBNkIsRUFBQywyQkFBMkIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQnVsa1VwbG9hZEJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQmF0Y2hKb2JTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFCYXRjaEpvYlN0YXR1cyc7XG5pbXBvcnQgeyBLYWx0dXJhQnVsa1VwbG9hZE9iamVjdFR5cGUgfSBmcm9tICcuL0thbHR1cmFCdWxrVXBsb2FkT2JqZWN0VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyLCBLYWx0dXJhRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYUZpbHRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUJ1bGtVcGxvYWRCYXNlRmlsdGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhRmlsdGVyQXJncyB7XG4gICAgdXBsb2FkZWRPbkdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHR1cGxvYWRlZE9uTGVzc1RoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwbG9hZGVkT25FcXVhbD8gOiBEYXRlO1xuXHRzdGF0dXNJbj8gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsPyA6IEthbHR1cmFCYXRjaEpvYlN0YXR1cztcblx0YnVsa1VwbG9hZE9iamVjdFR5cGVFcXVhbD8gOiBLYWx0dXJhQnVsa1VwbG9hZE9iamVjdFR5cGU7XG5cdGJ1bGtVcGxvYWRPYmplY3RUeXBlSW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQnVsa1VwbG9hZEJhc2VGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhRmlsdGVyIHtcblxuICAgIHVwbG9hZGVkT25HcmVhdGVyVGhhbk9yRXF1YWwgOiBEYXRlO1xuXHR1cGxvYWRlZE9uTGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBsb2FkZWRPbkVxdWFsIDogRGF0ZTtcblx0c3RhdHVzSW4gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsIDogS2FsdHVyYUJhdGNoSm9iU3RhdHVzO1xuXHRidWxrVXBsb2FkT2JqZWN0VHlwZUVxdWFsIDogS2FsdHVyYUJ1bGtVcGxvYWRPYmplY3RUeXBlO1xuXHRidWxrVXBsb2FkT2JqZWN0VHlwZUluIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQnVsa1VwbG9hZEJhc2VGaWx0ZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUJ1bGtVcGxvYWRCYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHR1cGxvYWRlZE9uR3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHVwbG9hZGVkT25MZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dXBsb2FkZWRPbkVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHN0YXR1c0luIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJhdGNoSm9iU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFCYXRjaEpvYlN0YXR1cycgfSxcblx0XHRcdFx0YnVsa1VwbG9hZE9iamVjdFR5cGVFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFCdWxrVXBsb2FkT2JqZWN0VHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZE9iamVjdFR5cGUnIH0sXG5cdFx0XHRcdGJ1bGtVcGxvYWRPYmplY3RUeXBlSW4gOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFCdWxrVXBsb2FkQmFzZUZpbHRlcicsS2FsdHVyYUJ1bGtVcGxvYWRCYXNlRmlsdGVyKTtcbiJdfQ==
