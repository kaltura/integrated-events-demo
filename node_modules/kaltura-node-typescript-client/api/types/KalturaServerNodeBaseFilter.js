"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaServerNodeBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaServerNodeStatus_1 = require("./KalturaServerNodeStatus");
var KalturaServerNodeType_1 = require("./KalturaServerNodeType");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaServerNodeBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaServerNodeBaseFilter, _super);
    function KalturaServerNodeBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaServerNodeBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaServerNodeBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            heartbeatTimeGreaterThanOrEqual: { type: 'd' },
            heartbeatTimeLessThanOrEqual: { type: 'd' },
            nameEqual: { type: 's' },
            nameIn: { type: 's' },
            systemNameEqual: { type: 's' },
            systemNameIn: { type: 's' },
            hostNameLike: { type: 's' },
            hostNameMultiLikeOr: { type: 's' },
            hostNameMultiLikeAnd: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaServerNodeStatus_1.KalturaServerNodeStatus, subType: 'KalturaServerNodeStatus' },
            statusIn: { type: 's' },
            typeEqual: { type: 'es', subTypeConstructor: KalturaServerNodeType_1.KalturaServerNodeType, subType: 'KalturaServerNodeType' },
            typeIn: { type: 's' },
            tagsLike: { type: 's' },
            tagsMultiLikeOr: { type: 's' },
            tagsMultiLikeAnd: { type: 's' },
            dcEqual: { type: 'n' },
            dcIn: { type: 's' },
            parentIdLike: { type: 's' },
            parentIdMultiLikeOr: { type: 's' },
            parentIdMultiLikeAnd: { type: 's' },
            environmentEqual: { type: 's' },
            environmentIn: { type: 's' }
        });
        return result;
    };
    return KalturaServerNodeBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaServerNodeBaseFilter = KalturaServerNodeBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaServerNodeBaseFilter', KalturaServerNodeBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
