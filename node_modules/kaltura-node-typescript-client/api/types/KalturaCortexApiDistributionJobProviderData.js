"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCortexApiDistributionJobProviderData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaCortexApiCaptionDistributionInfo_1 = require("./KalturaCortexApiCaptionDistributionInfo");
var KalturaConfigurableDistributionJobProviderData_1 = require("./KalturaConfigurableDistributionJobProviderData");
var KalturaCortexApiDistributionJobProviderData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCortexApiDistributionJobProviderData, _super);
    function KalturaCortexApiDistributionJobProviderData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.captionsInfo === 'undefined')
            _this.captionsInfo = [];
        return _this;
    }
    KalturaCortexApiDistributionJobProviderData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCortexApiDistributionJobProviderData' },
            videoAssetFilePath: { type: 's' },
            thumbAssetFilePath: { type: 's' },
            captionsInfo: { type: 'a', subTypeConstructor: KalturaCortexApiCaptionDistributionInfo_1.KalturaCortexApiCaptionDistributionInfo, subType: 'KalturaCortexApiCaptionDistributionInfo' }
        });
        return result;
    };
    return KalturaCortexApiDistributionJobProviderData;
}(KalturaConfigurableDistributionJobProviderData_1.KalturaConfigurableDistributionJobProviderData));
exports.KalturaCortexApiDistributionJobProviderData = KalturaCortexApiDistributionJobProviderData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCortexApiDistributionJobProviderData', KalturaCortexApiDistributionJobProviderData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ29ydGV4QXBpRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QscUdBQW9HO0FBQ3BHLG1IQUFzSztBQVN0SztJQUFpRSx1RUFBOEM7SUFNM0cscURBQVksSUFBdUQ7UUFBbkUsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsWUFBWSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQzs7SUFDekUsQ0FBQztJQUVTLGtFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDZDQUE2QyxFQUFFO1lBQ2hHLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQyxrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbkMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpRkFBdUMsRUFBRSxPQUFPLEVBQUcseUNBQXlDLEVBQUU7U0FDdkksQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGtEQUFDO0FBQUQsQ0ExQkEsQUEwQkMsQ0ExQmdFLCtGQUE4QyxHQTBCOUc7QUExQlksa0dBQTJDO0FBNEJ4RCwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNkNBQTZDLEVBQUMsMkNBQTJDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUNvcnRleEFwaURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFDb3J0ZXhBcGlDYXB0aW9uRGlzdHJpYnV0aW9uSW5mbyB9IGZyb20gJy4vS2FsdHVyYUNvcnRleEFwaUNhcHRpb25EaXN0cmlidXRpb25JbmZvJztcbmltcG9ydCB7IEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEsIEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhQ29ydGV4QXBpRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhQXJncyB7XG4gICAgdmlkZW9Bc3NldEZpbGVQYXRoPyA6IHN0cmluZztcblx0dGh1bWJBc3NldEZpbGVQYXRoPyA6IHN0cmluZztcblx0Y2FwdGlvbnNJbmZvPyA6IEthbHR1cmFDb3J0ZXhBcGlDYXB0aW9uRGlzdHJpYnV0aW9uSW5mb1tdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ29ydGV4QXBpRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhIGV4dGVuZHMgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YSB7XG5cbiAgICB2aWRlb0Fzc2V0RmlsZVBhdGggOiBzdHJpbmc7XG5cdHRodW1iQXNzZXRGaWxlUGF0aCA6IHN0cmluZztcblx0Y2FwdGlvbnNJbmZvIDogS2FsdHVyYUNvcnRleEFwaUNhcHRpb25EaXN0cmlidXRpb25JbmZvW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5jYXB0aW9uc0luZm8gPT09ICd1bmRlZmluZWQnKSB0aGlzLmNhcHRpb25zSW5mbyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFDb3J0ZXhBcGlEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEnIH0sXG5cdFx0XHRcdHZpZGVvQXNzZXRGaWxlUGF0aCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0aHVtYkFzc2V0RmlsZVBhdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y2FwdGlvbnNJbmZvIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ29ydGV4QXBpQ2FwdGlvbkRpc3RyaWJ1dGlvbkluZm8sIHN1YlR5cGUgOiAnS2FsdHVyYUNvcnRleEFwaUNhcHRpb25EaXN0cmlidXRpb25JbmZvJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUNvcnRleEFwaURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YScsS2FsdHVyYUNvcnRleEFwaURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YSk7XG4iXX0=
