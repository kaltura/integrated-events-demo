"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CaptionAssetServeWebVTTAction = void 0;
var tslib_1 = require("tslib");
var kaltura_file_request_1 = require("../kaltura-file-request");
/**
 * Build request payload for service 'captionAsset' action 'serveWebVTT'.
 *
 * Usage: Serves caption by its id converting it to segmented WebVTT
 *
 * Server response type:         { url: string }
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaFileRequest
 */
var CaptionAssetServeWebVTTAction = /** @class */ (function (_super) {
    tslib_1.__extends(CaptionAssetServeWebVTTAction, _super);
    function CaptionAssetServeWebVTTAction(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.segmentDuration === 'undefined')
            _this.segmentDuration = 30;
        if (typeof _this.localTimestamp === 'undefined')
            _this.localTimestamp = 10000;
        return _this;
    }
    CaptionAssetServeWebVTTAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'caption_captionasset' },
            action: { type: 'c', default: 'serveWebVTT' },
            captionAssetId: { type: 's' },
            segmentDuration: { type: 'n' },
            segmentIndex: { type: 'n' },
            localTimestamp: { type: 'n' }
        });
        return result;
    };
    return CaptionAssetServeWebVTTAction;
}(kaltura_file_request_1.KalturaFileRequest));
exports.CaptionAssetServeWebVTTAction = CaptionAssetServeWebVTTAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9DYXB0aW9uQXNzZXRTZXJ2ZVdlYlZUVEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsZ0VBQXFGO0FBU3JGOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQW1ELHlEQUFrQjtJQU9qRSx1Q0FBWSxJQUF3QztRQUFwRCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUdkO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxlQUFlLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQ2pGLElBQUksT0FBTyxLQUFJLENBQUMsY0FBYyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQzs7SUFDMUUsQ0FBQztJQUVTLG9EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHNCQUFzQixFQUFFO1lBQ3RFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUNoRCxjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3RCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxvQ0FBQztBQUFELENBOUJBLEFBOEJDLENBOUJrRCx5Q0FBa0IsR0E4QnBFO0FBOUJZLHNFQUE2QiIsImZpbGUiOiJhcGkvdHlwZXMvQ2FwdGlvbkFzc2V0U2VydmVXZWJWVFRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFGaWxlUmVxdWVzdCwgS2FsdHVyYUZpbGVSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtZmlsZS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBDYXB0aW9uQXNzZXRTZXJ2ZVdlYlZUVEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYUZpbGVSZXF1ZXN0QXJncyB7XG4gICAgY2FwdGlvbkFzc2V0SWQgOiBzdHJpbmc7XG5cdHNlZ21lbnREdXJhdGlvbj8gOiBudW1iZXI7XG5cdHNlZ21lbnRJbmRleD8gOiBudW1iZXI7XG5cdGxvY2FsVGltZXN0YW1wPyA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2NhcHRpb25Bc3NldCcgYWN0aW9uICdzZXJ2ZVdlYlZUVCcuXG4gKlxuICogVXNhZ2U6IFNlcnZlcyBjYXB0aW9uIGJ5IGl0cyBpZCBjb252ZXJ0aW5nIGl0IHRvIHNlZ21lbnRlZCBXZWJWVFRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICB7IHVybDogc3RyaW5nIH1cbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYUZpbGVSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBDYXB0aW9uQXNzZXRTZXJ2ZVdlYlZUVEFjdGlvbiBleHRlbmRzIEthbHR1cmFGaWxlUmVxdWVzdCB7XG5cbiAgICBjYXB0aW9uQXNzZXRJZCA6IHN0cmluZztcblx0c2VnbWVudER1cmF0aW9uIDogbnVtYmVyO1xuXHRzZWdtZW50SW5kZXggOiBudW1iZXI7XG5cdGxvY2FsVGltZXN0YW1wIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IENhcHRpb25Bc3NldFNlcnZlV2ViVlRUQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VnbWVudER1cmF0aW9uID09PSAndW5kZWZpbmVkJykgdGhpcy5zZWdtZW50RHVyYXRpb24gPSAzMDtcblx0XHRpZiAodHlwZW9mIHRoaXMubG9jYWxUaW1lc3RhbXAgPT09ICd1bmRlZmluZWQnKSB0aGlzLmxvY2FsVGltZXN0YW1wID0gMTAwMDA7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnY2FwdGlvbl9jYXB0aW9uYXNzZXQnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzZXJ2ZVdlYlZUVCcgfSxcblx0XHRcdFx0Y2FwdGlvbkFzc2V0SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c2VnbWVudER1cmF0aW9uIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHNlZ21lbnRJbmRleCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRsb2NhbFRpbWVzdGFtcCA6IHsgdHlwZSA6ICduJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
