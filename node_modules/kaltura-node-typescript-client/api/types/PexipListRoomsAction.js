"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PexipListRoomsAction = void 0;
var tslib_1 = require("tslib");
var KalturaStringValue_1 = require("./KalturaStringValue");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'pexip' action 'listRooms'.
 *
 *
 *
 * Server response type:         KalturaStringValue[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PexipListRoomsAction = /** @class */ (function (_super) {
    tslib_1.__extends(PexipListRoomsAction, _super);
    function PexipListRoomsAction(data) {
        var _this = _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaStringValue', responseConstructor: KalturaStringValue_1.KalturaStringValue }) || this;
        if (typeof _this.pageSize === 'undefined')
            _this.pageSize = 500;
        if (typeof _this.activeOnly === 'undefined')
            _this.activeOnly = false;
        return _this;
    }
    PexipListRoomsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'sip_pexip' },
            action: { type: 'c', default: 'listRooms' },
            offset: { type: 'n' },
            pageSize: { type: 'n' },
            activeOnly: { type: 'b' }
        });
        return result;
    };
    return PexipListRoomsAction;
}(kaltura_request_1.KalturaRequest));
exports.PexipListRoomsAction = PexipListRoomsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QZXhpcExpc3RSb29tc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELHNEQUF3RTtBQVF4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUEwQyxnREFBb0M7SUFNMUUsOEJBQVksSUFBZ0M7UUFBNUMsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxvQkFBb0IsRUFBRSxtQkFBbUIsRUFBRyx1Q0FBa0IsRUFBRyxDQUFDLFNBR3hIO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxRQUFRLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ3BFLElBQUksT0FBTyxLQUFJLENBQUMsVUFBVSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQzs7SUFDbEUsQ0FBQztJQUVTLDJDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxXQUFXLEVBQUU7WUFDOUMsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDbEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0E1QkEsQUE0QkMsQ0E1QnlDLGdDQUFjLEdBNEJ2RDtBQTVCWSxvREFBb0IiLCJmaWxlIjoiYXBpL3R5cGVzL1BleGlwTGlzdFJvb21zQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFTdHJpbmdWYWx1ZSB9IGZyb20gJy4vS2FsdHVyYVN0cmluZ1ZhbHVlJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGV4aXBMaXN0Um9vbXNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgb2Zmc2V0PyA6IG51bWJlcjtcblx0cGFnZVNpemU/IDogbnVtYmVyO1xuXHRhY3RpdmVPbmx5PyA6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwZXhpcCcgYWN0aW9uICdsaXN0Um9vbXMnLlxuICpcbiAqIFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFTdHJpbmdWYWx1ZVtdXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBQZXhpcExpc3RSb29tc0FjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFTdHJpbmdWYWx1ZVtdPiB7XG5cbiAgICBvZmZzZXQgOiBudW1iZXI7XG5cdHBhZ2VTaXplIDogbnVtYmVyO1xuXHRhY3RpdmVPbmx5IDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogUGV4aXBMaXN0Um9vbXNBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdhJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFTdHJpbmdWYWx1ZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RyaW5nVmFsdWUgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucGFnZVNpemUgPT09ICd1bmRlZmluZWQnKSB0aGlzLnBhZ2VTaXplID0gNTAwO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5hY3RpdmVPbmx5ID09PSAndW5kZWZpbmVkJykgdGhpcy5hY3RpdmVPbmx5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2lwX3BleGlwJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbGlzdFJvb21zJyB9LFxuXHRcdFx0XHRvZmZzZXQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cGFnZVNpemUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YWN0aXZlT25seSA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
