"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaGenericDistributionProvider = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaGenericDistributionProviderStatus_1 = require("./KalturaGenericDistributionProviderStatus");
var KalturaDistributionThumbDimensions_1 = require("./KalturaDistributionThumbDimensions");
var KalturaDistributionProvider_1 = require("./KalturaDistributionProvider");
var KalturaGenericDistributionProvider = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaGenericDistributionProvider, _super);
    function KalturaGenericDistributionProvider(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.optionalThumbDimensions === 'undefined')
            _this.optionalThumbDimensions = [];
        if (typeof _this.requiredThumbDimensions === 'undefined')
            _this.requiredThumbDimensions = [];
        return _this;
    }
    KalturaGenericDistributionProvider.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaGenericDistributionProvider' },
            id: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            isDefault: { type: 'b' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaGenericDistributionProviderStatus_1.KalturaGenericDistributionProviderStatus, subType: 'KalturaGenericDistributionProviderStatus' },
            optionalFlavorParamsIds: { type: 's' },
            requiredFlavorParamsIds: { type: 's' },
            optionalThumbDimensions: { type: 'a', subTypeConstructor: KalturaDistributionThumbDimensions_1.KalturaDistributionThumbDimensions, subType: 'KalturaDistributionThumbDimensions' },
            requiredThumbDimensions: { type: 'a', subTypeConstructor: KalturaDistributionThumbDimensions_1.KalturaDistributionThumbDimensions, subType: 'KalturaDistributionThumbDimensions' },
            editableFields: { type: 's' },
            mandatoryFields: { type: 's' }
        });
        return result;
    };
    return KalturaGenericDistributionProvider;
}(KalturaDistributionProvider_1.KalturaDistributionProvider));
exports.KalturaGenericDistributionProvider = KalturaGenericDistributionProvider;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaGenericDistributionProvider', KalturaGenericDistributionProvider);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsdUdBQXNHO0FBQ3RHLDJGQUEwRjtBQUMxRiw2RUFBNkc7QUFhN0c7SUFBd0QsOERBQTJCO0lBZS9FLDRDQUFZLElBQThDO1FBQTFELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBR2Q7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLHVCQUF1QixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsdUJBQXVCLEdBQUcsRUFBRSxDQUFDO1FBQ2pHLElBQUksT0FBTyxLQUFJLENBQUMsdUJBQXVCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyx1QkFBdUIsR0FBRyxFQUFFLENBQUM7O0lBQ3pGLENBQUM7SUFFUyx5REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxvQ0FBb0MsRUFBRTtZQUN2RixFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsbUZBQXdDLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQzlKLHVCQUF1QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4Qyx1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEMsdUJBQXVCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVFQUFrQyxFQUFFLE9BQU8sRUFBRyxvQ0FBb0MsRUFBRTtZQUNqSix1QkFBdUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsdUVBQWtDLEVBQUUsT0FBTyxFQUFHLG9DQUFvQyxFQUFFO1lBQ2pKLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN2QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wseUNBQUM7QUFBRCxDQTdDQSxBQTZDQyxDQTdDdUQseURBQTJCLEdBNkNsRjtBQTdDWSxnRkFBa0M7QUErQy9DLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxvQ0FBb0MsRUFBQyxrQ0FBa0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclN0YXR1cyc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uVGh1bWJEaW1lbnNpb25zIH0gZnJvbSAnLi9LYWx0dXJhRGlzdHJpYnV0aW9uVGh1bWJEaW1lbnNpb25zJztcbmltcG9ydCB7IEthbHR1cmFEaXN0cmlidXRpb25Qcm92aWRlciwgS2FsdHVyYURpc3RyaWJ1dGlvblByb3ZpZGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYURpc3RyaWJ1dGlvblByb3ZpZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXJBcmdzIHtcbiAgICBpc0RlZmF1bHQ/IDogYm9vbGVhbjtcblx0b3B0aW9uYWxGbGF2b3JQYXJhbXNJZHM/IDogc3RyaW5nO1xuXHRyZXF1aXJlZEZsYXZvclBhcmFtc0lkcz8gOiBzdHJpbmc7XG5cdG9wdGlvbmFsVGh1bWJEaW1lbnNpb25zPyA6IEthbHR1cmFEaXN0cmlidXRpb25UaHVtYkRpbWVuc2lvbnNbXTtcblx0cmVxdWlyZWRUaHVtYkRpbWVuc2lvbnM/IDogS2FsdHVyYURpc3RyaWJ1dGlvblRodW1iRGltZW5zaW9uc1tdO1xuXHRlZGl0YWJsZUZpZWxkcz8gOiBzdHJpbmc7XG5cdG1hbmRhdG9yeUZpZWxkcz8gOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXIgZXh0ZW5kcyBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdmlkZXIge1xuXG4gICAgcmVhZG9ubHkgaWQgOiBudW1iZXI7XG5cdHJlYWRvbmx5IGNyZWF0ZWRBdCA6IERhdGU7XG5cdHJlYWRvbmx5IHVwZGF0ZWRBdCA6IERhdGU7XG5cdHJlYWRvbmx5IHBhcnRuZXJJZCA6IG51bWJlcjtcblx0aXNEZWZhdWx0IDogYm9vbGVhbjtcblx0cmVhZG9ubHkgc3RhdHVzIDogS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclN0YXR1cztcblx0b3B0aW9uYWxGbGF2b3JQYXJhbXNJZHMgOiBzdHJpbmc7XG5cdHJlcXVpcmVkRmxhdm9yUGFyYW1zSWRzIDogc3RyaW5nO1xuXHRvcHRpb25hbFRodW1iRGltZW5zaW9ucyA6IEthbHR1cmFEaXN0cmlidXRpb25UaHVtYkRpbWVuc2lvbnNbXTtcblx0cmVxdWlyZWRUaHVtYkRpbWVuc2lvbnMgOiBLYWx0dXJhRGlzdHJpYnV0aW9uVGh1bWJEaW1lbnNpb25zW107XG5cdGVkaXRhYmxlRmllbGRzIDogc3RyaW5nO1xuXHRtYW5kYXRvcnlGaWVsZHMgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25hbFRodW1iRGltZW5zaW9ucyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMub3B0aW9uYWxUaHVtYkRpbWVuc2lvbnMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMucmVxdWlyZWRUaHVtYkRpbWVuc2lvbnMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnJlcXVpcmVkVGh1bWJEaW1lbnNpb25zID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlcicgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRjcmVhdGVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHR1cGRhdGVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRwYXJ0bmVySWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRpc0RlZmF1bHQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0c3RhdHVzIDogeyB0eXBlIDogJ2VuJywgcmVhZE9ubHkgOiB0cnVlLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJTdGF0dXMnIH0sXG5cdFx0XHRcdG9wdGlvbmFsRmxhdm9yUGFyYW1zSWRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlcXVpcmVkRmxhdm9yUGFyYW1zSWRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG9wdGlvbmFsVGh1bWJEaW1lbnNpb25zIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uVGh1bWJEaW1lbnNpb25zLCBzdWJUeXBlIDogJ0thbHR1cmFEaXN0cmlidXRpb25UaHVtYkRpbWVuc2lvbnMnIH0sXG5cdFx0XHRcdHJlcXVpcmVkVGh1bWJEaW1lbnNpb25zIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uVGh1bWJEaW1lbnNpb25zLCBzdWJUeXBlIDogJ0thbHR1cmFEaXN0cmlidXRpb25UaHVtYkRpbWVuc2lvbnMnIH0sXG5cdFx0XHRcdGVkaXRhYmxlRmllbGRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG1hbmRhdG9yeUZpZWxkcyA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlcicsS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlcik7XG4iXX0=
