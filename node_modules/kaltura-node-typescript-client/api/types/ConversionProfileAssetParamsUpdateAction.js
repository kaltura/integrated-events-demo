"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversionProfileAssetParamsUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaConversionProfileAssetParams_1 = require("./KalturaConversionProfileAssetParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'conversionProfileAssetParams' action 'update'.
 *
 * Usage: Update asset parmas of conversion profile by ID
 *
 * Server response type:         KalturaConversionProfileAssetParams
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ConversionProfileAssetParamsUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(ConversionProfileAssetParamsUpdateAction, _super);
    function ConversionProfileAssetParamsUpdateAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaConversionProfileAssetParams', responseConstructor: KalturaConversionProfileAssetParams_1.KalturaConversionProfileAssetParams }) || this;
    }
    ConversionProfileAssetParamsUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'conversionprofileassetparams' },
            action: { type: 'c', default: 'update' },
            conversionProfileId: { type: 'n' },
            assetParamsId: { type: 'n' },
            conversionProfileAssetParams: { type: 'o', subTypeConstructor: KalturaConversionProfileAssetParams_1.KalturaConversionProfileAssetParams, subType: 'KalturaConversionProfileAssetParams' }
        });
        return result;
    };
    return ConversionProfileAssetParamsUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.ConversionProfileAssetParamsUpdateAction = ConversionProfileAssetParamsUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Db252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zVXBkYXRlQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSw2RkFBNEY7QUFFNUYsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQThELG9FQUFtRDtJQU03RyxrREFBWSxJQUFtRDtlQUUzRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxxQ0FBcUMsRUFBRSxtQkFBbUIsRUFBRyx5RUFBbUMsRUFBRyxDQUFDO0lBQzNKLENBQUM7SUFFUywrREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUM5RSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDM0MsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3BDLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsNEJBQTRCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHlFQUFtQyxFQUFFLE9BQU8sRUFBRyxxQ0FBcUMsRUFBRTtTQUMvSSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0NBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCNkQsZ0NBQWMsR0EwQjNFO0FBMUJZLDRGQUF3QyIsImZpbGUiOiJhcGkvdHlwZXMvQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtc1VwZGF0ZUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcyB9IGZyb20gJy4vS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBDb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zVXBkYXRlQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGNvbnZlcnNpb25Qcm9maWxlSWQgOiBudW1iZXI7XG5cdGFzc2V0UGFyYW1zSWQgOiBudW1iZXI7XG5cdGNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMgOiBLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2NvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMnIGFjdGlvbiAndXBkYXRlJy5cbiAqXG4gKiBVc2FnZTogVXBkYXRlIGFzc2V0IHBhcm1hcyBvZiBjb252ZXJzaW9uIHByb2ZpbGUgYnkgSURcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtc1xuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtc1VwZGF0ZUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFDb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zPiB7XG5cbiAgICBjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xuXHRhc3NldFBhcmFtc0lkIDogbnVtYmVyO1xuXHRjb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zIDogS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXM7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtc1VwZGF0ZUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNvbnZlcnNpb25Qcm9maWxlQXNzZXRQYXJhbXMgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2NvbnZlcnNpb25wcm9maWxlYXNzZXRwYXJhbXMnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGUnIH0sXG5cdFx0XHRcdGNvbnZlcnNpb25Qcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YXNzZXRQYXJhbXNJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjb252ZXJzaW9uUHJvZmlsZUFzc2V0UGFyYW1zIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcywgc3ViVHlwZSA6ICdLYWx0dXJhQ29udmVyc2lvblByb2ZpbGVBc3NldFBhcmFtcycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
