"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaGenericDistributionProviderAction = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionAction_1 = require("./KalturaDistributionAction");
var KalturaGenericDistributionProviderStatus_1 = require("./KalturaGenericDistributionProviderStatus");
var KalturaGenericDistributionProviderParser_1 = require("./KalturaGenericDistributionProviderParser");
var KalturaDistributionProtocol_1 = require("./KalturaDistributionProtocol");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaGenericDistributionProviderAction = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaGenericDistributionProviderAction, _super);
    function KalturaGenericDistributionProviderAction(data) {
        return _super.call(this, data) || this;
    }
    KalturaGenericDistributionProviderAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaGenericDistributionProviderAction' },
            id: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            genericDistributionProviderId: { type: 'n' },
            action: { type: 'en', subTypeConstructor: KalturaDistributionAction_1.KalturaDistributionAction, subType: 'KalturaDistributionAction' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaGenericDistributionProviderStatus_1.KalturaGenericDistributionProviderStatus, subType: 'KalturaGenericDistributionProviderStatus' },
            resultsParser: { type: 'en', subTypeConstructor: KalturaGenericDistributionProviderParser_1.KalturaGenericDistributionProviderParser, subType: 'KalturaGenericDistributionProviderParser' },
            protocol: { type: 'en', subTypeConstructor: KalturaDistributionProtocol_1.KalturaDistributionProtocol, subType: 'KalturaDistributionProtocol' },
            serverAddress: { type: 's' },
            remotePath: { type: 's' },
            remoteUsername: { type: 's' },
            remotePassword: { type: 's' },
            editableFields: { type: 's' },
            mandatoryFields: { type: 's' },
            mrssTransformer: { type: 's', readOnly: true },
            mrssValidator: { type: 's', readOnly: true },
            resultsTransformer: { type: 's', readOnly: true }
        });
        return result;
    };
    return KalturaGenericDistributionProviderAction;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaGenericDistributionProviderAction = KalturaGenericDistributionProviderAction;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaGenericDistributionProviderAction', KalturaGenericDistributionProviderAction);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QseUVBQXdFO0FBQ3hFLHVHQUFzRztBQUN0Ryx1R0FBc0c7QUFDdEcsNkVBQTRFO0FBQzVFLDhEQUFrRjtBQWdCbEY7SUFBOEQsb0VBQWlCO0lBb0IzRSxrREFBWSxJQUFvRDtlQUU1RCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsK0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMENBQTBDLEVBQUU7WUFDN0YsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3BDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsNkJBQTZCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlDLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQy9HLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxtRkFBd0MsRUFBRSxPQUFPLEVBQUcsMENBQTBDLEVBQUU7WUFDOUosYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxtRkFBd0MsRUFBRSxPQUFPLEVBQUcsMENBQTBDLEVBQUU7WUFDcEosUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx5REFBMkIsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDckgsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ2pELGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMvQyxrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtTQUMzQyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0NBQUM7QUFBRCxDQXJEQSxBQXFEQyxDQXJENkQsdUNBQWlCLEdBcUQ5RTtBQXJEWSw0RkFBd0M7QUF1RHJELDJDQUFtQixDQUFDLFlBQVksQ0FBQywwQ0FBMEMsRUFBQyx3Q0FBd0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbiB9IGZyb20gJy4vS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbic7XG5pbXBvcnQgeyBLYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJQYXJzZXIgfSBmcm9tICcuL0thbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJQYXJzZXInO1xuaW1wb3J0IHsgS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sIH0gZnJvbSAnLi9LYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgZ2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVySWQ/IDogbnVtYmVyO1xuXHRhY3Rpb24/IDogS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbjtcblx0cmVzdWx0c1BhcnNlcj8gOiBLYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyUGFyc2VyO1xuXHRwcm90b2NvbD8gOiBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2w7XG5cdHNlcnZlckFkZHJlc3M/IDogc3RyaW5nO1xuXHRyZW1vdGVQYXRoPyA6IHN0cmluZztcblx0cmVtb3RlVXNlcm5hbWU/IDogc3RyaW5nO1xuXHRyZW1vdGVQYXNzd29yZD8gOiBzdHJpbmc7XG5cdGVkaXRhYmxlRmllbGRzPyA6IHN0cmluZztcblx0bWFuZGF0b3J5RmllbGRzPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlckFjdGlvbiBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IGlkIDogbnVtYmVyO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSB1cGRhdGVkQXQgOiBEYXRlO1xuXHRnZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJJZCA6IG51bWJlcjtcblx0YWN0aW9uIDogS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbjtcblx0cmVhZG9ubHkgc3RhdHVzIDogS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclN0YXR1cztcblx0cmVzdWx0c1BhcnNlciA6IEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJQYXJzZXI7XG5cdHByb3RvY29sIDogS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sO1xuXHRzZXJ2ZXJBZGRyZXNzIDogc3RyaW5nO1xuXHRyZW1vdGVQYXRoIDogc3RyaW5nO1xuXHRyZW1vdGVVc2VybmFtZSA6IHN0cmluZztcblx0cmVtb3RlUGFzc3dvcmQgOiBzdHJpbmc7XG5cdGVkaXRhYmxlRmllbGRzIDogc3RyaW5nO1xuXHRtYW5kYXRvcnlGaWVsZHMgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IG1yc3NUcmFuc2Zvcm1lciA6IHN0cmluZztcblx0cmVhZG9ubHkgbXJzc1ZhbGlkYXRvciA6IHN0cmluZztcblx0cmVhZG9ubHkgcmVzdWx0c1RyYW5zZm9ybWVyIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJBY3Rpb24nIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Z2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVySWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbiwgc3ViVHlwZSA6ICdLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uJyB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclN0YXR1cycgfSxcblx0XHRcdFx0cmVzdWx0c1BhcnNlciA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFHZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJQYXJzZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlclBhcnNlcicgfSxcblx0XHRcdFx0cHJvdG9jb2wgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wsIHN1YlR5cGUgOiAnS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sJyB9LFxuXHRcdFx0XHRzZXJ2ZXJBZGRyZXNzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlbW90ZVBhdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVtb3RlVXNlcm5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVtb3RlUGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZWRpdGFibGVGaWVsZHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bWFuZGF0b3J5RmllbGRzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG1yc3NUcmFuc2Zvcm1lciA6IHsgdHlwZSA6ICdzJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdG1yc3NWYWxpZGF0b3IgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRyZXN1bHRzVHJhbnNmb3JtZXIgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlckFjdGlvbicsS2FsdHVyYUdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlckFjdGlvbik7XG4iXX0=
