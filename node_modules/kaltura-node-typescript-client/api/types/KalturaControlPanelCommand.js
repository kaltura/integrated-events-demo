"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaControlPanelCommand = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaControlPanelCommandType_1 = require("./KalturaControlPanelCommandType");
var KalturaControlPanelCommandTargetType_1 = require("./KalturaControlPanelCommandTargetType");
var KalturaControlPanelCommandStatus_1 = require("./KalturaControlPanelCommandStatus");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaControlPanelCommand = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaControlPanelCommand, _super);
    function KalturaControlPanelCommand(data) {
        return _super.call(this, data) || this;
    }
    KalturaControlPanelCommand.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaControlPanelCommand' },
            id: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            createdBy: { type: 's' },
            updatedAt: { type: 'd', readOnly: true },
            updatedBy: { type: 's' },
            createdById: { type: 'n' },
            schedulerId: { type: 'n' },
            workerId: { type: 'n' },
            workerConfiguredId: { type: 'n' },
            workerName: { type: 'n' },
            batchIndex: { type: 'n' },
            type: { type: 'en', subTypeConstructor: KalturaControlPanelCommandType_1.KalturaControlPanelCommandType, subType: 'KalturaControlPanelCommandType' },
            targetType: { type: 'en', subTypeConstructor: KalturaControlPanelCommandTargetType_1.KalturaControlPanelCommandTargetType, subType: 'KalturaControlPanelCommandTargetType' },
            status: { type: 'en', subTypeConstructor: KalturaControlPanelCommandStatus_1.KalturaControlPanelCommandStatus, subType: 'KalturaControlPanelCommandStatus' },
            cause: { type: 's' },
            description: { type: 's' },
            errorDescription: { type: 's' }
        });
        return result;
    };
    return KalturaControlPanelCommand;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaControlPanelCommand = KalturaControlPanelCommand;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaControlPanelCommand', KalturaControlPanelCommand);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELG1GQUFrRjtBQUNsRiwrRkFBOEY7QUFDOUYsdUZBQXNGO0FBQ3RGLDhEQUFrRjtBQW9CbEY7SUFBZ0Qsc0RBQWlCO0lBb0I3RCxvQ0FBWSxJQUFzQztlQUU5QyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsaURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0UsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3BDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrREFBOEIsRUFBRSxPQUFPLEVBQUcsZ0NBQWdDLEVBQUU7WUFDdkgsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyRUFBb0MsRUFBRSxPQUFPLEVBQUcsc0NBQXNDLEVBQUU7WUFDekksTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyxtRUFBZ0MsRUFBRSxPQUFPLEVBQUcsa0NBQWtDLEVBQUU7WUFDN0gsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN4QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsaUNBQUM7QUFBRCxDQXJEQSxBQXFEQyxDQXJEK0MsdUNBQWlCLEdBcURoRTtBQXJEWSxnRUFBMEI7QUF1RHZDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyw0QkFBNEIsRUFBQywwQkFBMEIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kVHlwZSB9IGZyb20gJy4vS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kVGFyZ2V0VHlwZSB9IGZyb20gJy4vS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRUYXJnZXRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFN0YXR1cyc7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgY3JlYXRlZEJ5PyA6IHN0cmluZztcblx0dXBkYXRlZEJ5PyA6IHN0cmluZztcblx0Y3JlYXRlZEJ5SWQ/IDogbnVtYmVyO1xuXHRzY2hlZHVsZXJJZD8gOiBudW1iZXI7XG5cdHdvcmtlcklkPyA6IG51bWJlcjtcblx0d29ya2VyQ29uZmlndXJlZElkPyA6IG51bWJlcjtcblx0d29ya2VyTmFtZT8gOiBudW1iZXI7XG5cdGJhdGNoSW5kZXg/IDogbnVtYmVyO1xuXHR0eXBlPyA6IEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kVHlwZTtcblx0dGFyZ2V0VHlwZT8gOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFRhcmdldFR5cGU7XG5cdHN0YXR1cz8gOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFN0YXR1cztcblx0Y2F1c2U/IDogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj8gOiBzdHJpbmc7XG5cdGVycm9yRGVzY3JpcHRpb24/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZCBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IGlkIDogbnVtYmVyO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRjcmVhdGVkQnkgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHVwZGF0ZWRBdCA6IERhdGU7XG5cdHVwZGF0ZWRCeSA6IHN0cmluZztcblx0Y3JlYXRlZEJ5SWQgOiBudW1iZXI7XG5cdHNjaGVkdWxlcklkIDogbnVtYmVyO1xuXHR3b3JrZXJJZCA6IG51bWJlcjtcblx0d29ya2VyQ29uZmlndXJlZElkIDogbnVtYmVyO1xuXHR3b3JrZXJOYW1lIDogbnVtYmVyO1xuXHRiYXRjaEluZGV4IDogbnVtYmVyO1xuXHR0eXBlIDogS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRUeXBlO1xuXHR0YXJnZXRUeXBlIDogS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRUYXJnZXRUeXBlO1xuXHRzdGF0dXMgOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFN0YXR1cztcblx0Y2F1c2UgOiBzdHJpbmc7XG5cdGRlc2NyaXB0aW9uIDogc3RyaW5nO1xuXHRlcnJvckRlc2NyaXB0aW9uIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZEFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZCcgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRjcmVhdGVkQXQgOiB7IHR5cGUgOiAnZCcsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRjcmVhdGVkQnkgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEJ5IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNyZWF0ZWRCeUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHNjaGVkdWxlcklkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHdvcmtlcklkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHdvcmtlckNvbmZpZ3VyZWRJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR3b3JrZXJOYW1lIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGJhdGNoSW5kZXggOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0dHlwZSA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFR5cGUnIH0sXG5cdFx0XHRcdHRhcmdldFR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFRhcmdldFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmRUYXJnZXRUeXBlJyB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhQ29udHJvbFBhbmVsQ29tbWFuZFN0YXR1cycgfSxcblx0XHRcdFx0Y2F1c2UgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZGVzY3JpcHRpb24gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZXJyb3JEZXNjcmlwdGlvbiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUNvbnRyb2xQYW5lbENvbW1hbmQnLEthbHR1cmFDb250cm9sUGFuZWxDb21tYW5kKTtcbiJdfQ==
