"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaSchedulerStatus = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaBatchJobType_1 = require("./KalturaBatchJobType");
var KalturaSchedulerStatusType_1 = require("./KalturaSchedulerStatusType");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaSchedulerStatus = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaSchedulerStatus, _super);
    function KalturaSchedulerStatus(data) {
        return _super.call(this, data) || this;
    }
    KalturaSchedulerStatus.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaSchedulerStatus' },
            id: { type: 'n', readOnly: true },
            schedulerConfiguredId: { type: 'n' },
            workerConfiguredId: { type: 'n' },
            workerType: { type: 'es', subTypeConstructor: KalturaBatchJobType_1.KalturaBatchJobType, subType: 'KalturaBatchJobType' },
            type: { type: 'en', subTypeConstructor: KalturaSchedulerStatusType_1.KalturaSchedulerStatusType, subType: 'KalturaSchedulerStatusType' },
            value: { type: 'n' },
            schedulerId: { type: 'n', readOnly: true },
            workerId: { type: 'n', readOnly: true }
        });
        return result;
    };
    return KalturaSchedulerStatus;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaSchedulerStatus = KalturaSchedulerStatus;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaSchedulerStatus', KalturaSchedulerStatus);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhU2NoZWR1bGVyU3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsNkRBQTREO0FBQzVELDJFQUEwRTtBQUMxRSw4REFBa0Y7QUFXbEY7SUFBNEMsa0RBQWlCO0lBV3pELGdDQUFZLElBQWtDO2VBRTFDLGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyw2Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUMzRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDcEMscUJBQXFCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RDLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUN2RyxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHVEQUEwQixFQUFFLE9BQU8sRUFBRyw0QkFBNEIsRUFBRTtZQUMvRyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUM3QyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7U0FDakMsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDZCQUFDO0FBQUQsQ0FuQ0EsQUFtQ0MsQ0FuQzJDLHVDQUFpQixHQW1DNUQ7QUFuQ1ksd0RBQXNCO0FBcUNuQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsd0JBQXdCLEVBQUMsc0JBQXNCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVNjaGVkdWxlclN0YXR1cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFCYXRjaEpvYlR5cGUgfSBmcm9tICcuL0thbHR1cmFCYXRjaEpvYlR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVNjaGVkdWxlclN0YXR1c1R5cGUgfSBmcm9tICcuL0thbHR1cmFTY2hlZHVsZXJTdGF0dXNUeXBlJztcbmltcG9ydCB7IEthbHR1cmFPYmplY3RCYXNlLCBLYWx0dXJhT2JqZWN0QmFzZUFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhU2NoZWR1bGVyU3RhdHVzQXJncyAgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZUFyZ3Mge1xuICAgIHNjaGVkdWxlckNvbmZpZ3VyZWRJZD8gOiBudW1iZXI7XG5cdHdvcmtlckNvbmZpZ3VyZWRJZD8gOiBudW1iZXI7XG5cdHdvcmtlclR5cGU/IDogS2FsdHVyYUJhdGNoSm9iVHlwZTtcblx0dHlwZT8gOiBLYWx0dXJhU2NoZWR1bGVyU3RhdHVzVHlwZTtcblx0dmFsdWU/IDogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhU2NoZWR1bGVyU3RhdHVzIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2Uge1xuXG4gICAgcmVhZG9ubHkgaWQgOiBudW1iZXI7XG5cdHNjaGVkdWxlckNvbmZpZ3VyZWRJZCA6IG51bWJlcjtcblx0d29ya2VyQ29uZmlndXJlZElkIDogbnVtYmVyO1xuXHR3b3JrZXJUeXBlIDogS2FsdHVyYUJhdGNoSm9iVHlwZTtcblx0dHlwZSA6IEthbHR1cmFTY2hlZHVsZXJTdGF0dXNUeXBlO1xuXHR2YWx1ZSA6IG51bWJlcjtcblx0cmVhZG9ubHkgc2NoZWR1bGVySWQgOiBudW1iZXI7XG5cdHJlYWRvbmx5IHdvcmtlcklkIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhU2NoZWR1bGVyU3RhdHVzQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFTY2hlZHVsZXJTdGF0dXMnIH0sXG5cdFx0XHRcdGlkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c2NoZWR1bGVyQ29uZmlndXJlZElkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHdvcmtlckNvbmZpZ3VyZWRJZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR3b3JrZXJUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJhdGNoSm9iVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQmF0Y2hKb2JUeXBlJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNjaGVkdWxlclN0YXR1c1R5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVNjaGVkdWxlclN0YXR1c1R5cGUnIH0sXG5cdFx0XHRcdHZhbHVlIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHNjaGVkdWxlcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0d29ya2VySWQgOiB7IHR5cGUgOiAnbicsIHJlYWRPbmx5IDogdHJ1ZSB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVNjaGVkdWxlclN0YXR1cycsS2FsdHVyYVNjaGVkdWxlclN0YXR1cyk7XG4iXX0=
