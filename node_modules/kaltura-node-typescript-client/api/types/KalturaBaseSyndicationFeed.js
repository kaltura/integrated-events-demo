"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBaseSyndicationFeed = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaSyndicationFeedStatus_1 = require("./KalturaSyndicationFeedStatus");
var KalturaSyndicationFeedType_1 = require("./KalturaSyndicationFeedType");
var KalturaSyndicationFeedEntriesOrderBy_1 = require("./KalturaSyndicationFeedEntriesOrderBy");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaBaseSyndicationFeed = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBaseSyndicationFeed, _super);
    function KalturaBaseSyndicationFeed(data) {
        return _super.call(this, data) || this;
    }
    KalturaBaseSyndicationFeed.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBaseSyndicationFeed' },
            id: { type: 's', readOnly: true },
            feedUrl: { type: 's', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            playlistId: { type: 's' },
            name: { type: 's' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaSyndicationFeedStatus_1.KalturaSyndicationFeedStatus, subType: 'KalturaSyndicationFeedStatus' },
            type: { type: 'en', subTypeConstructor: KalturaSyndicationFeedType_1.KalturaSyndicationFeedType, subType: 'KalturaSyndicationFeedType' },
            landingPage: { type: 's' },
            createdAt: { type: 'd', readOnly: true },
            allowEmbed: { type: 'b' },
            playerUiconfId: { type: 'n' },
            flavorParamId: { type: 'n' },
            transcodeExistingContent: { type: 'b' },
            addToDefaultConversionProfile: { type: 'b' },
            categories: { type: 's' },
            storageId: { type: 'n' },
            entriesOrderBy: { type: 'es', subTypeConstructor: KalturaSyndicationFeedEntriesOrderBy_1.KalturaSyndicationFeedEntriesOrderBy, subType: 'KalturaSyndicationFeedEntriesOrderBy' },
            enforceEntitlement: { type: 'b' },
            privacyContext: { type: 's' },
            updatedAt: { type: 'd', readOnly: true },
            useCategoryEntries: { type: 'b' },
            feedContentTypeHeader: { type: 's' }
        });
        return result;
    };
    return KalturaBaseSyndicationFeed;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaBaseSyndicationFeed = KalturaBaseSyndicationFeed;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBaseSyndicationFeed', KalturaBaseSyndicationFeed);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQmFzZVN5bmRpY2F0aW9uRmVlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELCtFQUE4RTtBQUM5RSwyRUFBMEU7QUFDMUUsK0ZBQThGO0FBQzlGLDhEQUFrRjtBQXNCbEY7SUFBZ0Qsc0RBQWlCO0lBeUI3RCxvQ0FBWSxJQUFzQztlQUU5QyxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsaURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0UsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQ3BDLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUN6QyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7WUFDdEksSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1REFBMEIsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0csV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDZCQUE2QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyRUFBb0MsRUFBRSxPQUFPLEVBQUcsc0NBQXNDLEVBQUU7WUFDN0ksa0JBQWtCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25DLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLGtCQUFrQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQyxxQkFBcUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDN0IsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGlDQUFDO0FBQUQsQ0EvREEsQUErREMsQ0EvRCtDLHVDQUFpQixHQStEaEU7QUEvRFksZ0VBQTBCO0FBaUV2QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNEJBQTRCLEVBQUMsMEJBQTBCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUJhc2VTeW5kaWNhdGlvbkZlZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhU3luZGljYXRpb25GZWVkU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhU3luZGljYXRpb25GZWVkU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFTeW5kaWNhdGlvbkZlZWRUeXBlIH0gZnJvbSAnLi9LYWx0dXJhU3luZGljYXRpb25GZWVkVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhU3luZGljYXRpb25GZWVkRW50cmllc09yZGVyQnkgfSBmcm9tICcuL0thbHR1cmFTeW5kaWNhdGlvbkZlZWRFbnRyaWVzT3JkZXJCeSc7XG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0QmFzZSwgS2FsdHVyYU9iamVjdEJhc2VBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUJhc2VTeW5kaWNhdGlvbkZlZWRBcmdzICBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlQXJncyB7XG4gICAgcGxheWxpc3RJZD8gOiBzdHJpbmc7XG5cdG5hbWU/IDogc3RyaW5nO1xuXHR0eXBlPyA6IEthbHR1cmFTeW5kaWNhdGlvbkZlZWRUeXBlO1xuXHRsYW5kaW5nUGFnZT8gOiBzdHJpbmc7XG5cdGFsbG93RW1iZWQ/IDogYm9vbGVhbjtcblx0cGxheWVyVWljb25mSWQ/IDogbnVtYmVyO1xuXHRmbGF2b3JQYXJhbUlkPyA6IG51bWJlcjtcblx0dHJhbnNjb2RlRXhpc3RpbmdDb250ZW50PyA6IGJvb2xlYW47XG5cdGFkZFRvRGVmYXVsdENvbnZlcnNpb25Qcm9maWxlPyA6IGJvb2xlYW47XG5cdGNhdGVnb3JpZXM/IDogc3RyaW5nO1xuXHRzdG9yYWdlSWQ/IDogbnVtYmVyO1xuXHRlbnRyaWVzT3JkZXJCeT8gOiBLYWx0dXJhU3luZGljYXRpb25GZWVkRW50cmllc09yZGVyQnk7XG5cdGVuZm9yY2VFbnRpdGxlbWVudD8gOiBib29sZWFuO1xuXHRwcml2YWN5Q29udGV4dD8gOiBzdHJpbmc7XG5cdHVzZUNhdGVnb3J5RW50cmllcz8gOiBib29sZWFuO1xuXHRmZWVkQ29udGVudFR5cGVIZWFkZXI/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQmFzZVN5bmRpY2F0aW9uRmVlZCBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIHJlYWRvbmx5IGlkIDogc3RyaW5nO1xuXHRyZWFkb25seSBmZWVkVXJsIDogc3RyaW5nO1xuXHRyZWFkb25seSBwYXJ0bmVySWQgOiBudW1iZXI7XG5cdHBsYXlsaXN0SWQgOiBzdHJpbmc7XG5cdG5hbWUgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHN0YXR1cyA6IEthbHR1cmFTeW5kaWNhdGlvbkZlZWRTdGF0dXM7XG5cdHR5cGUgOiBLYWx0dXJhU3luZGljYXRpb25GZWVkVHlwZTtcblx0bGFuZGluZ1BhZ2UgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IGNyZWF0ZWRBdCA6IERhdGU7XG5cdGFsbG93RW1iZWQgOiBib29sZWFuO1xuXHRwbGF5ZXJVaWNvbmZJZCA6IG51bWJlcjtcblx0Zmxhdm9yUGFyYW1JZCA6IG51bWJlcjtcblx0dHJhbnNjb2RlRXhpc3RpbmdDb250ZW50IDogYm9vbGVhbjtcblx0YWRkVG9EZWZhdWx0Q29udmVyc2lvblByb2ZpbGUgOiBib29sZWFuO1xuXHRjYXRlZ29yaWVzIDogc3RyaW5nO1xuXHRzdG9yYWdlSWQgOiBudW1iZXI7XG5cdGVudHJpZXNPcmRlckJ5IDogS2FsdHVyYVN5bmRpY2F0aW9uRmVlZEVudHJpZXNPcmRlckJ5O1xuXHRlbmZvcmNlRW50aXRsZW1lbnQgOiBib29sZWFuO1xuXHRwcml2YWN5Q29udGV4dCA6IHN0cmluZztcblx0cmVhZG9ubHkgdXBkYXRlZEF0IDogRGF0ZTtcblx0dXNlQ2F0ZWdvcnlFbnRyaWVzIDogYm9vbGVhbjtcblx0ZmVlZENvbnRlbnRUeXBlSGVhZGVyIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQmFzZVN5bmRpY2F0aW9uRmVlZEFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQmFzZVN5bmRpY2F0aW9uRmVlZCcgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRmZWVkVXJsIDogeyB0eXBlIDogJ3MnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0cGxheWxpc3RJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRuYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN0YXR1cyA6IHsgdHlwZSA6ICdlbicsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVN5bmRpY2F0aW9uRmVlZFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhU3luZGljYXRpb25GZWVkU3RhdHVzJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVN5bmRpY2F0aW9uRmVlZFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVN5bmRpY2F0aW9uRmVlZFR5cGUnIH0sXG5cdFx0XHRcdGxhbmRpbmdQYWdlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdCA6IHsgdHlwZSA6ICdkJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGFsbG93RW1iZWQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cGxheWVyVWljb25mSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Zmxhdm9yUGFyYW1JZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR0cmFuc2NvZGVFeGlzdGluZ0NvbnRlbnQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0YWRkVG9EZWZhdWx0Q29udmVyc2lvblByb2ZpbGUgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0Y2F0ZWdvcmllcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdG9yYWdlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0ZW50cmllc09yZGVyQnkgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3luZGljYXRpb25GZWVkRW50cmllc09yZGVyQnksIHN1YlR5cGUgOiAnS2FsdHVyYVN5bmRpY2F0aW9uRmVlZEVudHJpZXNPcmRlckJ5JyB9LFxuXHRcdFx0XHRlbmZvcmNlRW50aXRsZW1lbnQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cHJpdmFjeUNvbnRleHQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXNlQ2F0ZWdvcnlFbnRyaWVzIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdGZlZWRDb250ZW50VHlwZUhlYWRlciA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUJhc2VTeW5kaWNhdGlvbkZlZWQnLEthbHR1cmFCYXNlU3luZGljYXRpb25GZWVkKTtcbiJdfQ==
