"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaQuickPlayDistributionJobProviderData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaString_1 = require("./KalturaString");
var KalturaConfigurableDistributionJobProviderData_1 = require("./KalturaConfigurableDistributionJobProviderData");
var KalturaQuickPlayDistributionJobProviderData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaQuickPlayDistributionJobProviderData, _super);
    function KalturaQuickPlayDistributionJobProviderData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.videoFilePaths === 'undefined')
            _this.videoFilePaths = [];
        if (typeof _this.thumbnailFilePaths === 'undefined')
            _this.thumbnailFilePaths = [];
        return _this;
    }
    KalturaQuickPlayDistributionJobProviderData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaQuickPlayDistributionJobProviderData' },
            xml: { type: 's' },
            videoFilePaths: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            thumbnailFilePaths: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' }
        });
        return result;
    };
    return KalturaQuickPlayDistributionJobProviderData;
}(KalturaConfigurableDistributionJobProviderData_1.KalturaConfigurableDistributionJobProviderData));
exports.KalturaQuickPlayDistributionJobProviderData = KalturaQuickPlayDistributionJobProviderData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaQuickPlayDistributionJobProviderData', KalturaQuickPlayDistributionJobProviderData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsaURBQWdEO0FBQ2hELG1IQUFzSztBQVN0SztJQUFpRSx1RUFBOEM7SUFNM0cscURBQVksSUFBdUQ7UUFBbkUsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FHZDtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsY0FBYyxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUMvRSxJQUFJLE9BQU8sS0FBSSxDQUFDLGtCQUFrQixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDOztJQUMvRSxDQUFDO0lBRVMsa0VBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNkNBQTZDLEVBQUU7WUFDaEcsR0FBRyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNwQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZCQUFhLEVBQUUsT0FBTyxFQUFHLGVBQWUsRUFBRTtZQUM5RixrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkJBQWEsRUFBRSxPQUFPLEVBQUcsZUFBZSxFQUFFO1NBQ3pGLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxrREFBQztBQUFELENBM0JBLEFBMkJDLENBM0JnRSwrRkFBOEMsR0EyQjlHO0FBM0JZLGtHQUEyQztBQTZCeEQsMkNBQW1CLENBQUMsWUFBWSxDQUFDLDZDQUE2QyxFQUFDLDJDQUEyQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFRdWlja1BsYXlEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhU3RyaW5nIH0gZnJvbSAnLi9LYWx0dXJhU3RyaW5nJztcbmltcG9ydCB7IEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGEsIEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhQXJncyB7XG4gICAgeG1sPyA6IHN0cmluZztcblx0dmlkZW9GaWxlUGF0aHM/IDogS2FsdHVyYVN0cmluZ1tdO1xuXHR0aHVtYm5haWxGaWxlUGF0aHM/IDogS2FsdHVyYVN0cmluZ1tdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhIGV4dGVuZHMgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvbkpvYlByb3ZpZGVyRGF0YSB7XG5cbiAgICB4bWwgOiBzdHJpbmc7XG5cdHZpZGVvRmlsZVBhdGhzIDogS2FsdHVyYVN0cmluZ1tdO1xuXHR0aHVtYm5haWxGaWxlUGF0aHMgOiBLYWx0dXJhU3RyaW5nW107XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFRdWlja1BsYXlEaXN0cmlidXRpb25Kb2JQcm92aWRlckRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy52aWRlb0ZpbGVQYXRocyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMudmlkZW9GaWxlUGF0aHMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMudGh1bWJuYWlsRmlsZVBhdGhzID09PSAndW5kZWZpbmVkJykgdGhpcy50aHVtYm5haWxGaWxlUGF0aHMgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJyB9LFxuXHRcdFx0XHR4bWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dmlkZW9GaWxlUGF0aHMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFTdHJpbmcsIHN1YlR5cGUgOiAnS2FsdHVyYVN0cmluZycgfSxcblx0XHRcdFx0dGh1bWJuYWlsRmlsZVBhdGhzIDogeyB0eXBlIDogJ2EnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhU3RyaW5nLCBzdWJUeXBlIDogJ0thbHR1cmFTdHJpbmcnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhJyxLYWx0dXJhUXVpY2tQbGF5RGlzdHJpYnV0aW9uSm9iUHJvdmlkZXJEYXRhKTtcbiJdfQ==
