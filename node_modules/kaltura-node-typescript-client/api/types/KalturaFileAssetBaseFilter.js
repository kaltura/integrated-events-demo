"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaFileAssetBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaFileAssetObjectType_1 = require("./KalturaFileAssetObjectType");
var KalturaFileAssetStatus_1 = require("./KalturaFileAssetStatus");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaFileAssetBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaFileAssetBaseFilter, _super);
    function KalturaFileAssetBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaFileAssetBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaFileAssetBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            partnerIdEqual: { type: 'n' },
            fileAssetObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaFileAssetObjectType_1.KalturaFileAssetObjectType, subType: 'KalturaFileAssetObjectType' },
            objectIdEqual: { type: 's' },
            objectIdIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'n' },
            createdAtLessThanOrEqual: { type: 'n' },
            updatedAtGreaterThanOrEqual: { type: 'n' },
            updatedAtLessThanOrEqual: { type: 'n' },
            statusEqual: { type: 'es', subTypeConstructor: KalturaFileAssetStatus_1.KalturaFileAssetStatus, subType: 'KalturaFileAssetStatus' },
            statusIn: { type: 's' }
        });
        return result;
    };
    return KalturaFileAssetBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaFileAssetBaseFilter = KalturaFileAssetBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaFileAssetBaseFilter', KalturaFileAssetBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRmlsZUFzc2V0QmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELDJFQUEwRTtBQUMxRSxtRUFBa0U7QUFDbEUsK0RBQXdGO0FBa0J4RjtJQUFnRCxzREFBb0I7SUFlaEUsb0NBQVksSUFBc0M7ZUFFOUMsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLGlEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDRCQUE0QixFQUFFO1lBQy9FLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1REFBMEIsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDbkksYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVDLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUM5RyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2hCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxpQ0FBQztBQUFELENBM0NBLEFBMkNDLENBM0MrQywyQ0FBb0IsR0EyQ25FO0FBM0NZLGdFQUEwQjtBQTZDdkMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLDRCQUE0QixFQUFDLDBCQUEwQixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFGaWxlQXNzZXRCYXNlRmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUZpbGVBc3NldE9iamVjdFR5cGUgfSBmcm9tICcuL0thbHR1cmFGaWxlQXNzZXRPYmplY3RUeXBlJztcbmltcG9ydCB7IEthbHR1cmFGaWxlQXNzZXRTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFGaWxlQXNzZXRTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlbGF0ZWRGaWx0ZXIsIEthbHR1cmFSZWxhdGVkRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYVJlbGF0ZWRGaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFGaWxlQXNzZXRCYXNlRmlsdGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVsYXRlZEZpbHRlckFyZ3Mge1xuICAgIGlkRXF1YWw/IDogbnVtYmVyO1xuXHRpZEluPyA6IHN0cmluZztcblx0cGFydG5lcklkRXF1YWw/IDogbnVtYmVyO1xuXHRmaWxlQXNzZXRPYmplY3RUeXBlRXF1YWw/IDogS2FsdHVyYUZpbGVBc3NldE9iamVjdFR5cGU7XG5cdG9iamVjdElkRXF1YWw/IDogc3RyaW5nO1xuXHRvYmplY3RJZEluPyA6IHN0cmluZztcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IG51bWJlcjtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IG51bWJlcjtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IG51bWJlcjtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsPyA6IG51bWJlcjtcblx0c3RhdHVzRXF1YWw/IDogS2FsdHVyYUZpbGVBc3NldFN0YXR1cztcblx0c3RhdHVzSW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRmlsZUFzc2V0QmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFSZWxhdGVkRmlsdGVyIHtcblxuICAgIGlkRXF1YWwgOiBudW1iZXI7XG5cdGlkSW4gOiBzdHJpbmc7XG5cdHBhcnRuZXJJZEVxdWFsIDogbnVtYmVyO1xuXHRmaWxlQXNzZXRPYmplY3RUeXBlRXF1YWwgOiBLYWx0dXJhRmlsZUFzc2V0T2JqZWN0VHlwZTtcblx0b2JqZWN0SWRFcXVhbCA6IHN0cmluZztcblx0b2JqZWN0SWRJbiA6IHN0cmluZztcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogbnVtYmVyO1xuXHRjcmVhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiBudW1iZXI7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IG51bWJlcjtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogbnVtYmVyO1xuXHRzdGF0dXNFcXVhbCA6IEthbHR1cmFGaWxlQXNzZXRTdGF0dXM7XG5cdHN0YXR1c0luIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRmlsZUFzc2V0QmFzZUZpbHRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRmlsZUFzc2V0QmFzZUZpbHRlcicgfSxcblx0XHRcdFx0aWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRpZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhcnRuZXJJZEVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGZpbGVBc3NldE9iamVjdFR5cGVFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFGaWxlQXNzZXRPYmplY3RUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFGaWxlQXNzZXRPYmplY3RUeXBlJyB9LFxuXHRcdFx0XHRvYmplY3RJZEVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG9iamVjdElkSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGNyZWF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUZpbGVBc3NldFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhRmlsZUFzc2V0U3RhdHVzJyB9LFxuXHRcdFx0XHRzdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUZpbGVBc3NldEJhc2VGaWx0ZXInLEthbHR1cmFGaWxlQXNzZXRCYXNlRmlsdGVyKTtcbiJdfQ==
