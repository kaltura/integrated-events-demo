"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VendorIntegrationAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaIntegrationSetting_1 = require("./KalturaIntegrationSetting");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'vendorIntegration' action 'add'.
 *
 * Usage: Add new integration setting object
 *
 * Server response type:         KalturaIntegrationSetting
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var VendorIntegrationAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(VendorIntegrationAddAction, _super);
    function VendorIntegrationAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaIntegrationSetting', responseConstructor: KalturaIntegrationSetting_1.KalturaIntegrationSetting }) || this;
    }
    VendorIntegrationAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'vendor_vendorintegration' },
            action: { type: 'c', default: 'add' },
            integration: { type: 'o', subTypeConstructor: KalturaIntegrationSetting_1.KalturaIntegrationSetting, subType: 'KalturaIntegrationSetting' },
            remoteId: { type: 's' }
        });
        return result;
    };
    return VendorIntegrationAddAction;
}(kaltura_request_1.KalturaRequest));
exports.VendorIntegrationAddAction = VendorIntegrationAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9WZW5kb3JJbnRlZ3JhdGlvbkFkZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEseUVBQXdFO0FBRXhFLHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFnRCxzREFBeUM7SUFLckYsb0NBQVksSUFBcUM7ZUFFN0Msa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsMkJBQTJCLEVBQUUsbUJBQW1CLEVBQUcscURBQXlCLEVBQUcsQ0FBQztJQUN2SSxDQUFDO0lBRVMsaURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMEJBQTBCLEVBQUU7WUFDMUUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsS0FBSyxFQUFFO1lBQ3hDLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQ25ILFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDaEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGlDQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QitDLGdDQUFjLEdBd0I3RDtBQXhCWSxnRUFBMEIiLCJmaWxlIjoiYXBpL3R5cGVzL1ZlbmRvckludGVncmF0aW9uQWRkQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFJbnRlZ3JhdGlvblNldHRpbmcgfSBmcm9tICcuL0thbHR1cmFJbnRlZ3JhdGlvblNldHRpbmcnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBWZW5kb3JJbnRlZ3JhdGlvbkFkZEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBpbnRlZ3JhdGlvbiA6IEthbHR1cmFJbnRlZ3JhdGlvblNldHRpbmc7XG5cdHJlbW90ZUlkIDogc3RyaW5nO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAndmVuZG9ySW50ZWdyYXRpb24nIGFjdGlvbiAnYWRkJy5cbiAqXG4gKiBVc2FnZTogQWRkIG5ldyBpbnRlZ3JhdGlvbiBzZXR0aW5nIG9iamVjdFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFJbnRlZ3JhdGlvblNldHRpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFZlbmRvckludGVncmF0aW9uQWRkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUludGVncmF0aW9uU2V0dGluZz4ge1xuXG4gICAgaW50ZWdyYXRpb24gOiBLYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nO1xuXHRyZW1vdGVJZCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBWZW5kb3JJbnRlZ3JhdGlvbkFkZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUludGVncmF0aW9uU2V0dGluZycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd2ZW5kb3JfdmVuZG9yaW50ZWdyYXRpb24nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZGQnIH0sXG5cdFx0XHRcdGludGVncmF0aW9uIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhSW50ZWdyYXRpb25TZXR0aW5nLCBzdWJUeXBlIDogJ0thbHR1cmFJbnRlZ3JhdGlvblNldHRpbmcnIH0sXG5cdFx0XHRcdHJlbW90ZUlkIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
