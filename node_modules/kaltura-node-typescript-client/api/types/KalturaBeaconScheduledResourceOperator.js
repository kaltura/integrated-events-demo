"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaBeaconScheduledResourceOperator = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaESearchOperatorType_1 = require("./KalturaESearchOperatorType");
var KalturaBeaconScheduledResourceBaseItem_1 = require("./KalturaBeaconScheduledResourceBaseItem");
var KalturaBeaconScheduledResourceOperator = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaBeaconScheduledResourceOperator, _super);
    function KalturaBeaconScheduledResourceOperator(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.searchItems === 'undefined')
            _this.searchItems = [];
        return _this;
    }
    KalturaBeaconScheduledResourceOperator.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaBeaconScheduledResourceOperator' },
            operator: { type: 'en', subTypeConstructor: KalturaESearchOperatorType_1.KalturaESearchOperatorType, subType: 'KalturaESearchOperatorType' },
            searchItems: { type: 'a', subTypeConstructor: KalturaBeaconScheduledResourceBaseItem_1.KalturaBeaconScheduledResourceBaseItem, subType: 'KalturaBeaconScheduledResourceBaseItem' }
        });
        return result;
    };
    return KalturaBeaconScheduledResourceOperator;
}(KalturaBeaconScheduledResourceBaseItem_1.KalturaBeaconScheduledResourceBaseItem));
exports.KalturaBeaconScheduledResourceOperator = KalturaBeaconScheduledResourceOperator;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaBeaconScheduledResourceOperator', KalturaBeaconScheduledResourceOperator);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VPcGVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELDJFQUEwRTtBQUMxRSxtR0FBOEk7QUFROUk7SUFBNEQsa0VBQXNDO0lBSzlGLGdEQUFZLElBQWtEO1FBQTlELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBRWQ7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLFdBQVcsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7O0lBQ3ZFLENBQUM7SUFFUyw2REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx3Q0FBd0MsRUFBRTtZQUMzRixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHVEQUEwQixFQUFFLE9BQU8sRUFBRyw0QkFBNEIsRUFBRTtZQUNuSCxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLCtFQUFzQyxFQUFFLE9BQU8sRUFBRyx3Q0FBd0MsRUFBRTtTQUNwSSxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNkNBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCMkQsK0VBQXNDLEdBd0JqRztBQXhCWSx3RkFBc0M7QUEwQm5ELDJDQUFtQixDQUFDLFlBQVksQ0FBQyx3Q0FBd0MsRUFBQyxzQ0FBc0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VPcGVyYXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFFU2VhcmNoT3BlcmF0b3JUeXBlIH0gZnJvbSAnLi9LYWx0dXJhRVNlYXJjaE9wZXJhdG9yVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VCYXNlSXRlbSwgS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlQmFzZUl0ZW1BcmdzIH0gZnJvbSAnLi9LYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VCYXNlSXRlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlT3BlcmF0b3JBcmdzICBleHRlbmRzIEthbHR1cmFCZWFjb25TY2hlZHVsZWRSZXNvdXJjZUJhc2VJdGVtQXJncyB7XG4gICAgb3BlcmF0b3I/IDogS2FsdHVyYUVTZWFyY2hPcGVyYXRvclR5cGU7XG5cdHNlYXJjaEl0ZW1zPyA6IEthbHR1cmFCZWFjb25TY2hlZHVsZWRSZXNvdXJjZUJhc2VJdGVtW107XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFCZWFjb25TY2hlZHVsZWRSZXNvdXJjZU9wZXJhdG9yIGV4dGVuZHMgS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlQmFzZUl0ZW0ge1xuXG4gICAgb3BlcmF0b3IgOiBLYWx0dXJhRVNlYXJjaE9wZXJhdG9yVHlwZTtcblx0c2VhcmNoSXRlbXMgOiBLYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VCYXNlSXRlbVtdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VPcGVyYXRvckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnNlYXJjaEl0ZW1zID09PSAndW5kZWZpbmVkJykgdGhpcy5zZWFyY2hJdGVtcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFCZWFjb25TY2hlZHVsZWRSZXNvdXJjZU9wZXJhdG9yJyB9LFxuXHRcdFx0XHRvcGVyYXRvciA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFU2VhcmNoT3BlcmF0b3JUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoT3BlcmF0b3JUeXBlJyB9LFxuXHRcdFx0XHRzZWFyY2hJdGVtcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlQmFzZUl0ZW0sIHN1YlR5cGUgOiAnS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlQmFzZUl0ZW0nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQmVhY29uU2NoZWR1bGVkUmVzb3VyY2VPcGVyYXRvcicsS2FsdHVyYUJlYWNvblNjaGVkdWxlZFJlc291cmNlT3BlcmF0b3IpO1xuIl19
