"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlavorAssetGetFlavorAssetsWithParamsAction = void 0;
var tslib_1 = require("tslib");
var KalturaFlavorAssetWithParams_1 = require("./KalturaFlavorAssetWithParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'flavorAsset' action 'getFlavorAssetsWithParams'.
 *
 * Usage: Get Flavor Asset with the relevant Flavor Params (Flavor Params can exist without Flavor Asset & vice versa)
 *
 * Server response type:         KalturaFlavorAssetWithParams[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var FlavorAssetGetFlavorAssetsWithParamsAction = /** @class */ (function (_super) {
    tslib_1.__extends(FlavorAssetGetFlavorAssetsWithParamsAction, _super);
    function FlavorAssetGetFlavorAssetsWithParamsAction(data) {
        return _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaFlavorAssetWithParams', responseConstructor: KalturaFlavorAssetWithParams_1.KalturaFlavorAssetWithParams }) || this;
    }
    FlavorAssetGetFlavorAssetsWithParamsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'flavorasset' },
            action: { type: 'c', default: 'getFlavorAssetsWithParams' },
            entryId: { type: 's' }
        });
        return result;
    };
    return FlavorAssetGetFlavorAssetsWithParamsAction;
}(kaltura_request_1.KalturaRequest));
exports.FlavorAssetGetFlavorAssetsWithParamsAction = FlavorAssetGetFlavorAssetsWithParamsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9GbGF2b3JBc3NldEdldEZsYXZvckFzc2V0c1dpdGhQYXJhbXNBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLCtFQUE4RTtBQUU5RSxzREFBd0U7QUFNeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBZ0Usc0VBQThDO0lBSTFHLG9EQUFZLElBQXFEO2VBRTdELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLDhCQUE4QixFQUFFLG1CQUFtQixFQUFHLDJEQUE0QixFQUFHLENBQUM7SUFDN0ksQ0FBQztJQUVTLGlFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUM3RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUM5RCxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLGlEQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QitELGdDQUFjLEdBc0I3RTtBQXRCWSxnR0FBMEMiLCJmaWxlIjoiYXBpL3R5cGVzL0ZsYXZvckFzc2V0R2V0Rmxhdm9yQXNzZXRzV2l0aFBhcmFtc0FjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhRmxhdm9yQXNzZXRXaXRoUGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhRmxhdm9yQXNzZXRXaXRoUGFyYW1zJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxhdm9yQXNzZXRHZXRGbGF2b3JBc3NldHNXaXRoUGFyYW1zQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdmbGF2b3JBc3NldCcgYWN0aW9uICdnZXRGbGF2b3JBc3NldHNXaXRoUGFyYW1zJy5cbiAqXG4gKiBVc2FnZTogR2V0IEZsYXZvciBBc3NldCB3aXRoIHRoZSByZWxldmFudCBGbGF2b3IgUGFyYW1zIChGbGF2b3IgUGFyYW1zIGNhbiBleGlzdCB3aXRob3V0IEZsYXZvciBBc3NldCAmIHZpY2UgdmVyc2EpXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUZsYXZvckFzc2V0V2l0aFBhcmFtc1tdXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBGbGF2b3JBc3NldEdldEZsYXZvckFzc2V0c1dpdGhQYXJhbXNBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRmxhdm9yQXNzZXRXaXRoUGFyYW1zW10+IHtcblxuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogRmxhdm9yQXNzZXRHZXRGbGF2b3JBc3NldHNXaXRoUGFyYW1zQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnYScsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhRmxhdm9yQXNzZXRXaXRoUGFyYW1zJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFGbGF2b3JBc3NldFdpdGhQYXJhbXMgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2ZsYXZvcmFzc2V0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0Rmxhdm9yQXNzZXRzV2l0aFBhcmFtcycgfSxcblx0XHRcdFx0ZW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
