"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportGetTotalAction = void 0;
var tslib_1 = require("tslib");
var KalturaReportTotal_1 = require("./KalturaReportTotal");
var KalturaReportType_1 = require("./KalturaReportType");
var KalturaReportInputFilter_1 = require("./KalturaReportInputFilter");
var KalturaReportResponseOptions_1 = require("./KalturaReportResponseOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'report' action 'getTotal'.
 *
 * Usage: report getTotal action allows to get a graph data for a specific report
 *
 * Server response type:         KalturaReportTotal
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ReportGetTotalAction = /** @class */ (function (_super) {
    tslib_1.__extends(ReportGetTotalAction, _super);
    function ReportGetTotalAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaReportTotal', responseConstructor: KalturaReportTotal_1.KalturaReportTotal }) || this;
    }
    ReportGetTotalAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'report' },
            action: { type: 'c', default: 'getTotal' },
            reportType: { type: 'es', subTypeConstructor: KalturaReportType_1.KalturaReportType, subType: 'KalturaReportType' },
            reportInputFilter: { type: 'o', subTypeConstructor: KalturaReportInputFilter_1.KalturaReportInputFilter, subType: 'KalturaReportInputFilter' },
            objectIds: { type: 's' },
            responseOptions: { type: 'o', subTypeConstructor: KalturaReportResponseOptions_1.KalturaReportResponseOptions, subType: 'KalturaReportResponseOptions' }
        });
        return result;
    };
    return ReportGetTotalAction;
}(kaltura_request_1.KalturaRequest));
exports.ReportGetTotalAction = ReportGetTotalAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9SZXBvcnRHZXRUb3RhbEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELHlEQUF3RDtBQUN4RCx1RUFBc0U7QUFDdEUsK0VBQThFO0FBQzlFLHNEQUF3RTtBQVN4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUEwQyxnREFBa0M7SUFPeEUsOEJBQVksSUFBK0I7ZUFFdkMsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUcsdUNBQWtCLEVBQUcsQ0FBQztJQUN6SCxDQUFDO0lBRVMsMkNBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsUUFBUSxFQUFFO1lBQ3hELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFVBQVUsRUFBRTtZQUM3QyxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFDQUFpQixFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUNuRyxpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsbURBQXdCLEVBQUUsT0FBTyxFQUFHLDBCQUEwQixFQUFFO1lBQ3ZILFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7U0FDcEgsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJCQUFDO0FBQUQsQ0E1QkEsQUE0QkMsQ0E1QnlDLGdDQUFjLEdBNEJ2RDtBQTVCWSxvREFBb0IiLCJmaWxlIjoiYXBpL3R5cGVzL1JlcG9ydEdldFRvdGFsQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRUb3RhbCB9IGZyb20gJy4vS2FsdHVyYVJlcG9ydFRvdGFsJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcG9ydFR5cGUgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlciB9IGZyb20gJy4vS2FsdHVyYVJlcG9ydElucHV0RmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVwb3J0R2V0VG90YWxBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgcmVwb3J0VHlwZSA6IEthbHR1cmFSZXBvcnRUeXBlO1xuXHRyZXBvcnRJbnB1dEZpbHRlciA6IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlcjtcblx0b2JqZWN0SWRzPyA6IHN0cmluZztcblx0cmVzcG9uc2VPcHRpb25zPyA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnM7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdyZXBvcnQnIGFjdGlvbiAnZ2V0VG90YWwnLlxuICpcbiAqIFVzYWdlOiByZXBvcnQgZ2V0VG90YWwgYWN0aW9uIGFsbG93cyB0byBnZXQgYSBncmFwaCBkYXRhIGZvciBhIHNwZWNpZmljIHJlcG9ydFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFSZXBvcnRUb3RhbFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUmVwb3J0R2V0VG90YWxBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhUmVwb3J0VG90YWw+IHtcblxuICAgIHJlcG9ydFR5cGUgOiBLYWx0dXJhUmVwb3J0VHlwZTtcblx0cmVwb3J0SW5wdXRGaWx0ZXIgOiBLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXI7XG5cdG9iamVjdElkcyA6IHN0cmluZztcblx0cmVzcG9uc2VPcHRpb25zIDogS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBSZXBvcnRHZXRUb3RhbEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFRvdGFsJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRUb3RhbCAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVwb3J0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZ2V0VG90YWwnIH0sXG5cdFx0XHRcdHJlcG9ydFR5cGUgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVwb3J0VHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhUmVwb3J0VHlwZScgfSxcblx0XHRcdFx0cmVwb3J0SW5wdXRGaWx0ZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRJbnB1dEZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhUmVwb3J0SW5wdXRGaWx0ZXInIH0sXG5cdFx0XHRcdG9iamVjdElkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXNwb25zZU9wdGlvbnMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRSZXNwb25zZU9wdGlvbnMsIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydFJlc3BvbnNlT3B0aW9ucycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
