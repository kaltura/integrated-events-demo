"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDropFolderBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDropFolderType_1 = require("./KalturaDropFolderType");
var KalturaDropFolderStatus_1 = require("./KalturaDropFolderStatus");
var KalturaDropFolderFileHandlerType_1 = require("./KalturaDropFolderFileHandlerType");
var KalturaDropFolderErrorCode_1 = require("./KalturaDropFolderErrorCode");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaDropFolderBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDropFolderBaseFilter, _super);
    function KalturaDropFolderBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaDropFolderBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDropFolderBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            partnerIdEqual: { type: 'n' },
            partnerIdIn: { type: 's' },
            nameLike: { type: 's' },
            typeEqual: { type: 'es', subTypeConstructor: KalturaDropFolderType_1.KalturaDropFolderType, subType: 'KalturaDropFolderType' },
            typeIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaDropFolderStatus_1.KalturaDropFolderStatus, subType: 'KalturaDropFolderStatus' },
            statusIn: { type: 's' },
            conversionProfileIdEqual: { type: 'n' },
            conversionProfileIdIn: { type: 's' },
            dcEqual: { type: 'n' },
            dcIn: { type: 's' },
            pathEqual: { type: 's' },
            pathLike: { type: 's' },
            fileHandlerTypeEqual: { type: 'es', subTypeConstructor: KalturaDropFolderFileHandlerType_1.KalturaDropFolderFileHandlerType, subType: 'KalturaDropFolderFileHandlerType' },
            fileHandlerTypeIn: { type: 's' },
            fileNamePatternsLike: { type: 's' },
            fileNamePatternsMultiLikeOr: { type: 's' },
            fileNamePatternsMultiLikeAnd: { type: 's' },
            tagsLike: { type: 's' },
            tagsMultiLikeOr: { type: 's' },
            tagsMultiLikeAnd: { type: 's' },
            errorCodeEqual: { type: 'es', subTypeConstructor: KalturaDropFolderErrorCode_1.KalturaDropFolderErrorCode, subType: 'KalturaDropFolderErrorCode' },
            errorCodeIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' }
        });
        return result;
    };
    return KalturaDropFolderBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaDropFolderBaseFilter = KalturaDropFolderBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDropFolderBaseFilter', KalturaDropFolderBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
