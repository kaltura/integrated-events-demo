"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryVendorTaskExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryVendorTaskFilter_1 = require("./KalturaEntryVendorTaskFilter");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'entryVendorTask' action 'exportToCsv'.
 *
 * Usage: add batch job that sends an email with a link to download an updated CSV that contains list of users
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EntryVendorTaskExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryVendorTaskExportToCsvAction, _super);
    function EntryVendorTaskExportToCsvAction(data) {
        return _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
    }
    EntryVendorTaskExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'reach_entryvendortask' },
            action: { type: 'c', default: 'exportToCsv' },
            filter: { type: 'o', subTypeConstructor: KalturaEntryVendorTaskFilter_1.KalturaEntryVendorTaskFilter, subType: 'KalturaEntryVendorTaskFilter' }
        });
        return result;
    };
    return EntryVendorTaskExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.EntryVendorTaskExportToCsvAction = EntryVendorTaskExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeVZlbmRvclRhc2tFeHBvcnRUb0NzdkFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBSUEsK0VBQThFO0FBQzlFLHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFzRCw0REFBc0I7SUFJeEUsMENBQVksSUFBMkM7ZUFFbkQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsRUFBRSxFQUFFLG1CQUFtQixFQUFHLElBQUksRUFBRSxDQUFDO0lBQ3hGLENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUN2RSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxhQUFhLEVBQUU7WUFDaEQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7U0FDM0csQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHVDQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QnFELGdDQUFjLEdBc0JuRTtBQXRCWSw0RUFBZ0MiLCJmaWxlIjoiYXBpL3R5cGVzL0VudHJ5VmVuZG9yVGFza0V4cG9ydFRvQ3N2QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuXG5pbXBvcnQgeyBLYWx0dXJhRW50cnlWZW5kb3JUYXNrRmlsdGVyIH0gZnJvbSAnLi9LYWx0dXJhRW50cnlWZW5kb3JUYXNrRmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudHJ5VmVuZG9yVGFza0V4cG9ydFRvQ3N2QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGZpbHRlciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2tGaWx0ZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdlbnRyeVZlbmRvclRhc2snIGFjdGlvbiAnZXhwb3J0VG9Dc3YnLlxuICpcbiAqIFVzYWdlOiBhZGQgYmF0Y2ggam9iIHRoYXQgc2VuZHMgYW4gZW1haWwgd2l0aCBhIGxpbmsgdG8gZG93bmxvYWQgYW4gdXBkYXRlZCBDU1YgdGhhdCBjb250YWlucyBsaXN0IG9mIHVzZXJzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgc3RyaW5nXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRyeVZlbmRvclRhc2tFeHBvcnRUb0NzdkFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PHN0cmluZz4ge1xuXG4gICAgZmlsdGVyIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFza0ZpbHRlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBFbnRyeVZlbmRvclRhc2tFeHBvcnRUb0NzdkFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ3MnLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVhY2hfZW50cnl2ZW5kb3J0YXNrJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhwb3J0VG9Dc3YnIH0sXG5cdFx0XHRcdGZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFza0ZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhRW50cnlWZW5kb3JUYXNrRmlsdGVyJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
