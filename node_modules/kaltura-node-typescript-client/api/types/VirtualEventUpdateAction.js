"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualEventUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaVirtualEvent_1 = require("./KalturaVirtualEvent");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'virtualEvent' action 'update'.
 *
 * Usage: Update an existing virtual event
 *
 * Server response type:         KalturaVirtualEvent
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var VirtualEventUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(VirtualEventUpdateAction, _super);
    function VirtualEventUpdateAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaVirtualEvent', responseConstructor: KalturaVirtualEvent_1.KalturaVirtualEvent }) || this;
    }
    VirtualEventUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'virtualevent_virtualevent' },
            action: { type: 'c', default: 'update' },
            id: { type: 'n' },
            virtualEvent: { type: 'o', subTypeConstructor: KalturaVirtualEvent_1.KalturaVirtualEvent, subType: 'KalturaVirtualEvent' }
        });
        return result;
    };
    return VirtualEventUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.VirtualEventUpdateAction = VirtualEventUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9WaXJ0dWFsRXZlbnRVcGRhdGVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBOEMsb0RBQW1DO0lBSzdFLGtDQUFZLElBQW1DO2VBRTNDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHFCQUFxQixFQUFFLG1CQUFtQixFQUFHLHlDQUFtQixFQUFHLENBQUM7SUFDM0gsQ0FBQztJQUVTLCtDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQzNFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBRTtZQUMzQyxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1NBQy9GLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwrQkFBQztBQUFELENBeEJBLEFBd0JDLENBeEI2QyxnQ0FBYyxHQXdCM0Q7QUF4QlksNERBQXdCIiwiZmlsZSI6ImFwaS90eXBlcy9WaXJ0dWFsRXZlbnRVcGRhdGVBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVZpcnR1YWxFdmVudCB9IGZyb20gJy4vS2FsdHVyYVZpcnR1YWxFdmVudCc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpcnR1YWxFdmVudFVwZGF0ZUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IG51bWJlcjtcblx0dmlydHVhbEV2ZW50IDogS2FsdHVyYVZpcnR1YWxFdmVudDtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3ZpcnR1YWxFdmVudCcgYWN0aW9uICd1cGRhdGUnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgYW4gZXhpc3RpbmcgdmlydHVhbCBldmVudFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFWaXJ0dWFsRXZlbnRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFZpcnR1YWxFdmVudFVwZGF0ZUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFWaXJ0dWFsRXZlbnQ+IHtcblxuICAgIGlkIDogbnVtYmVyO1xuXHR2aXJ0dWFsRXZlbnQgOiBLYWx0dXJhVmlydHVhbEV2ZW50O1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFZpcnR1YWxFdmVudFVwZGF0ZUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVZpcnR1YWxFdmVudCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhVmlydHVhbEV2ZW50ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd2aXJ0dWFsZXZlbnRfdmlydHVhbGV2ZW50JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlJyB9LFxuXHRcdFx0XHRpZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHR2aXJ0dWFsRXZlbnQgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFWaXJ0dWFsRXZlbnQsIHN1YlR5cGUgOiAnS2FsdHVyYVZpcnR1YWxFdmVudCcgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
