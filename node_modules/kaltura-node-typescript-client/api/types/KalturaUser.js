"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaUser = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaUserType_1 = require("./KalturaUserType");
var KalturaGender_1 = require("./KalturaGender");
var KalturaBaseUser_1 = require("./KalturaBaseUser");
var KalturaUser = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaUser, _super);
    function KalturaUser(data) {
        return _super.call(this, data) || this;
    }
    KalturaUser.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaUser' },
            type: { type: 'en', subTypeConstructor: KalturaUserType_1.KalturaUserType, subType: 'KalturaUserType' },
            dateOfBirth: { type: 'n' },
            gender: { type: 'en', subTypeConstructor: KalturaGender_1.KalturaGender, subType: 'KalturaGender' },
            isAdmin: { type: 'b' },
            isGuest: { type: 'b' },
            roleIds: { type: 's' },
            roleNames: { type: 's', readOnly: true },
            isAccountOwner: { type: 'b' },
            password: { type: 's' },
            firstName: { type: 's' },
            lastName: { type: 's' },
            loginEnabled: { type: 'b' },
            registrationInfo: { type: 's' },
            attendanceInfo: { type: 's' },
            title: { type: 's' },
            company: { type: 's' },
            ksPrivileges: { type: 's' },
            encryptedSeed: { type: 's', readOnly: true },
            isSsoExcluded: { type: 'b' },
            externalId: { type: 's' }
        });
        return result;
    };
    return KalturaUser;
}(KalturaBaseUser_1.KalturaBaseUser));
exports.KalturaUser = KalturaUser;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaUser', KalturaUser);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHFEQUFvRDtBQUNwRCxpREFBZ0Q7QUFDaEQscURBQXlFO0FBd0J6RTtJQUFpQyx1Q0FBZTtJQXVCNUMscUJBQVksSUFBdUI7ZUFFL0Isa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLGtDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUNoRSxJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ3pGLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2QkFBYSxFQUFFLE9BQU8sRUFBRyxlQUFlLEVBQUU7WUFDdkYsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixnQkFBZ0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDakMsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDL0MsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2xCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxrQkFBQztBQUFELENBM0RBLEFBMkRDLENBM0RnQyxpQ0FBZSxHQTJEL0M7QUEzRFksa0NBQVc7QUE2RHhCLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxhQUFhLEVBQUMsV0FBVyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFVc2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVVzZXJUeXBlIH0gZnJvbSAnLi9LYWx0dXJhVXNlclR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYUdlbmRlciB9IGZyb20gJy4vS2FsdHVyYUdlbmRlcic7XG5pbXBvcnQgeyBLYWx0dXJhQmFzZVVzZXIsIEthbHR1cmFCYXNlVXNlckFyZ3MgfSBmcm9tICcuL0thbHR1cmFCYXNlVXNlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVVzZXJBcmdzICBleHRlbmRzIEthbHR1cmFCYXNlVXNlckFyZ3Mge1xuICAgIHR5cGU/IDogS2FsdHVyYVVzZXJUeXBlO1xuXHRkYXRlT2ZCaXJ0aD8gOiBudW1iZXI7XG5cdGdlbmRlcj8gOiBLYWx0dXJhR2VuZGVyO1xuXHRpc0FkbWluPyA6IGJvb2xlYW47XG5cdGlzR3Vlc3Q/IDogYm9vbGVhbjtcblx0cm9sZUlkcz8gOiBzdHJpbmc7XG5cdGlzQWNjb3VudE93bmVyPyA6IGJvb2xlYW47XG5cdHBhc3N3b3JkPyA6IHN0cmluZztcblx0Zmlyc3ROYW1lPyA6IHN0cmluZztcblx0bGFzdE5hbWU/IDogc3RyaW5nO1xuXHRsb2dpbkVuYWJsZWQ/IDogYm9vbGVhbjtcblx0cmVnaXN0cmF0aW9uSW5mbz8gOiBzdHJpbmc7XG5cdGF0dGVuZGFuY2VJbmZvPyA6IHN0cmluZztcblx0dGl0bGU/IDogc3RyaW5nO1xuXHRjb21wYW55PyA6IHN0cmluZztcblx0a3NQcml2aWxlZ2VzPyA6IHN0cmluZztcblx0aXNTc29FeGNsdWRlZD8gOiBib29sZWFuO1xuXHRleHRlcm5hbElkPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYVVzZXIgZXh0ZW5kcyBLYWx0dXJhQmFzZVVzZXIge1xuXG4gICAgdHlwZSA6IEthbHR1cmFVc2VyVHlwZTtcblx0ZGF0ZU9mQmlydGggOiBudW1iZXI7XG5cdGdlbmRlciA6IEthbHR1cmFHZW5kZXI7XG5cdGlzQWRtaW4gOiBib29sZWFuO1xuXHRpc0d1ZXN0IDogYm9vbGVhbjtcblx0cm9sZUlkcyA6IHN0cmluZztcblx0cmVhZG9ubHkgcm9sZU5hbWVzIDogc3RyaW5nO1xuXHRpc0FjY291bnRPd25lciA6IGJvb2xlYW47XG5cdHBhc3N3b3JkIDogc3RyaW5nO1xuXHRmaXJzdE5hbWUgOiBzdHJpbmc7XG5cdGxhc3ROYW1lIDogc3RyaW5nO1xuXHRsb2dpbkVuYWJsZWQgOiBib29sZWFuO1xuXHRyZWdpc3RyYXRpb25JbmZvIDogc3RyaW5nO1xuXHRhdHRlbmRhbmNlSW5mbyA6IHN0cmluZztcblx0dGl0bGUgOiBzdHJpbmc7XG5cdGNvbXBhbnkgOiBzdHJpbmc7XG5cdGtzUHJpdmlsZWdlcyA6IHN0cmluZztcblx0cmVhZG9ubHkgZW5jcnlwdGVkU2VlZCA6IHN0cmluZztcblx0aXNTc29FeGNsdWRlZCA6IGJvb2xlYW47XG5cdGV4dGVybmFsSWQgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFVc2VyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFVc2VyJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVVzZXJUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFVc2VyVHlwZScgfSxcblx0XHRcdFx0ZGF0ZU9mQmlydGggOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Z2VuZGVyIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUdlbmRlciwgc3ViVHlwZSA6ICdLYWx0dXJhR2VuZGVyJyB9LFxuXHRcdFx0XHRpc0FkbWluIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdGlzR3Vlc3QgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0cm9sZUlkcyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyb2xlTmFtZXMgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRpc0FjY291bnRPd25lciA6IHsgdHlwZSA6ICdiJyB9LFxuXHRcdFx0XHRwYXNzd29yZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmaXJzdE5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bGFzdE5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bG9naW5FbmFibGVkIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdHJlZ2lzdHJhdGlvbkluZm8gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0YXR0ZW5kYW5jZUluZm8gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dGl0bGUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Y29tcGFueSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRrc1ByaXZpbGVnZXMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZW5jcnlwdGVkU2VlZCA6IHsgdHlwZSA6ICdzJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGlzU3NvRXhjbHVkZWQgOiB7IHR5cGUgOiAnYicgfSxcblx0XHRcdFx0ZXh0ZXJuYWxJZCA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYVVzZXInLEthbHR1cmFVc2VyKTtcbiJdfQ==
