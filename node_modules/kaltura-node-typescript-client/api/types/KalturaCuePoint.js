"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCuePoint = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaCuePointType_1 = require("./KalturaCuePointType");
var KalturaCuePointStatus_1 = require("./KalturaCuePointStatus");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaCuePoint = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCuePoint, _super);
    function KalturaCuePoint(data) {
        return _super.call(this, data) || this;
    }
    KalturaCuePoint.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCuePoint' },
            id: { type: 's', readOnly: true },
            intId: { type: 'n', readOnly: true },
            cuePointType: { type: 'es', readOnly: true, subTypeConstructor: KalturaCuePointType_1.KalturaCuePointType, subType: 'KalturaCuePointType' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaCuePointStatus_1.KalturaCuePointStatus, subType: 'KalturaCuePointStatus' },
            entryId: { type: 's' },
            partnerId: { type: 'n', readOnly: true },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            triggeredAt: { type: 'd' },
            tags: { type: 's' },
            startTime: { type: 'n' },
            userId: { type: 's' },
            partnerData: { type: 's' },
            partnerSortValue: { type: 'n' },
            forceStop: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            thumbOffset: { type: 'n' },
            systemName: { type: 's' },
            isMomentary: { type: 'b', readOnly: true },
            copiedFrom: { type: 's', readOnly: true }
        });
        return result;
    };
    return KalturaCuePoint;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaCuePoint = KalturaCuePoint;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCuePoint', KalturaCuePoint);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ3VlUG9pbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCw2REFBNEQ7QUFDNUQsaUVBQWdFO0FBQ2hFLG1FQUFrRTtBQUNsRSw4REFBa0Y7QUFnQmxGO0lBQXFDLDJDQUFpQjtJQXNCbEQseUJBQVksSUFBMkI7ZUFFbkMsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLHNDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ3BFLEVBQUUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUNwQyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDdkMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHlDQUFtQixFQUFFLE9BQU8sRUFBRyxxQkFBcUIsRUFBRTtZQUMxSCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsNkNBQXFCLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3hILE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzNDLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDM0MsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNqQyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtZQUM1RyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFO1lBQzdDLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtTQUNuQyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQXpEQSxBQXlEQyxDQXpEb0MsdUNBQWlCLEdBeURyRDtBQXpEWSwwQ0FBZTtBQTJENUIsMkNBQW1CLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFDLGVBQWUsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQ3VlUG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQ3VlUG9pbnRUeXBlIH0gZnJvbSAnLi9LYWx0dXJhQ3VlUG9pbnRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFDdWVQb2ludFN0YXR1cyB9IGZyb20gJy4vS2FsdHVyYUN1ZVBvaW50U3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFOdWxsYWJsZUJvb2xlYW4gfSBmcm9tICcuL0thbHR1cmFOdWxsYWJsZUJvb2xlYW4nO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFDdWVQb2ludEFyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBlbnRyeUlkPyA6IHN0cmluZztcblx0dHJpZ2dlcmVkQXQ/IDogRGF0ZTtcblx0dGFncz8gOiBzdHJpbmc7XG5cdHN0YXJ0VGltZT8gOiBudW1iZXI7XG5cdHVzZXJJZD8gOiBzdHJpbmc7XG5cdHBhcnRuZXJEYXRhPyA6IHN0cmluZztcblx0cGFydG5lclNvcnRWYWx1ZT8gOiBudW1iZXI7XG5cdGZvcmNlU3RvcD8gOiBLYWx0dXJhTnVsbGFibGVCb29sZWFuO1xuXHR0aHVtYk9mZnNldD8gOiBudW1iZXI7XG5cdHN5c3RlbU5hbWU/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ3VlUG9pbnQgZXh0ZW5kcyBLYWx0dXJhT2JqZWN0QmFzZSB7XG5cbiAgICByZWFkb25seSBpZCA6IHN0cmluZztcblx0cmVhZG9ubHkgaW50SWQgOiBudW1iZXI7XG5cdHJlYWRvbmx5IGN1ZVBvaW50VHlwZSA6IEthbHR1cmFDdWVQb2ludFR5cGU7XG5cdHJlYWRvbmx5IHN0YXR1cyA6IEthbHR1cmFDdWVQb2ludFN0YXR1cztcblx0ZW50cnlJZCA6IHN0cmluZztcblx0cmVhZG9ubHkgcGFydG5lcklkIDogbnVtYmVyO1xuXHRyZWFkb25seSBjcmVhdGVkQXQgOiBEYXRlO1xuXHRyZWFkb25seSB1cGRhdGVkQXQgOiBEYXRlO1xuXHR0cmlnZ2VyZWRBdCA6IERhdGU7XG5cdHRhZ3MgOiBzdHJpbmc7XG5cdHN0YXJ0VGltZSA6IG51bWJlcjtcblx0dXNlcklkIDogc3RyaW5nO1xuXHRwYXJ0bmVyRGF0YSA6IHN0cmluZztcblx0cGFydG5lclNvcnRWYWx1ZSA6IG51bWJlcjtcblx0Zm9yY2VTdG9wIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbjtcblx0dGh1bWJPZmZzZXQgOiBudW1iZXI7XG5cdHN5c3RlbU5hbWUgOiBzdHJpbmc7XG5cdHJlYWRvbmx5IGlzTW9tZW50YXJ5IDogYm9vbGVhbjtcblx0cmVhZG9ubHkgY29waWVkRnJvbSA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUN1ZVBvaW50QXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFDdWVQb2ludCcgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRpbnRJZCA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdGN1ZVBvaW50VHlwZSA6IHsgdHlwZSA6ICdlcycsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUN1ZVBvaW50VHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQ3VlUG9pbnRUeXBlJyB9LFxuXHRcdFx0XHRzdGF0dXMgOiB7IHR5cGUgOiAnZW4nLCByZWFkT25seSA6IHRydWUsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDdWVQb2ludFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhQ3VlUG9pbnRTdGF0dXMnIH0sXG5cdFx0XHRcdGVudHJ5SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFydG5lcklkIDogeyB0eXBlIDogJ24nLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y3JlYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dXBkYXRlZEF0IDogeyB0eXBlIDogJ2QnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0dHJpZ2dlcmVkQXQgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0dGFncyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGFydFRpbWUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0dXNlcklkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhcnRuZXJEYXRhIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhcnRuZXJTb3J0VmFsdWUgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Zm9yY2VTdG9wIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYU51bGxhYmxlQm9vbGVhbiwgc3ViVHlwZSA6ICdLYWx0dXJhTnVsbGFibGVCb29sZWFuJyB9LFxuXHRcdFx0XHR0aHVtYk9mZnNldCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRzeXN0ZW1OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGlzTW9tZW50YXJ5IDogeyB0eXBlIDogJ2InLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0Y29waWVkRnJvbSA6IHsgdHlwZSA6ICdzJywgcmVhZE9ubHkgOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQ3VlUG9pbnQnLEthbHR1cmFDdWVQb2ludCk7XG4iXX0=
