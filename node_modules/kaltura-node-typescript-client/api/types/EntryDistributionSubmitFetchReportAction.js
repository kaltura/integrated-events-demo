"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryDistributionSubmitFetchReportAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryDistribution_1 = require("./KalturaEntryDistribution");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'entryDistribution' action 'submitFetchReport'.
 *
 * Usage: Submits Entry Distribution report request
 *
 * Server response type:         KalturaEntryDistribution
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EntryDistributionSubmitFetchReportAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryDistributionSubmitFetchReportAction, _super);
    function EntryDistributionSubmitFetchReportAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEntryDistribution', responseConstructor: KalturaEntryDistribution_1.KalturaEntryDistribution }) || this;
    }
    EntryDistributionSubmitFetchReportAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'contentdistribution_entrydistribution' },
            action: { type: 'c', default: 'submitFetchReport' },
            id: { type: 'n' }
        });
        return result;
    };
    return EntryDistributionSubmitFetchReportAction;
}(kaltura_request_1.KalturaRequest));
exports.EntryDistributionSubmitFetchReportAction = EntryDistributionSubmitFetchReportAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeURpc3RyaWJ1dGlvblN1Ym1pdEZldGNoUmVwb3J0QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx1RUFBc0U7QUFFdEUsc0RBQXdFO0FBTXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQThELG9FQUF3QztJQUlsRyxrREFBWSxJQUFtRDtlQUUzRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRywwQkFBMEIsRUFBRSxtQkFBbUIsRUFBRyxtREFBd0IsRUFBRyxDQUFDO0lBQ3JJLENBQUM7SUFFUywrREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1Q0FBdUMsRUFBRTtZQUN2RixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUN0RCxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ1YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLCtDQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QjZELGdDQUFjLEdBc0IzRTtBQXRCWSw0RkFBd0MiLCJmaWxlIjoiYXBpL3R5cGVzL0VudHJ5RGlzdHJpYnV0aW9uU3VibWl0RmV0Y2hSZXBvcnRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uIH0gZnJvbSAnLi9LYWx0dXJhRW50cnlEaXN0cmlidXRpb24nO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFbnRyeURpc3RyaWJ1dGlvblN1Ym1pdEZldGNoUmVwb3J0QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGlkIDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnZW50cnlEaXN0cmlidXRpb24nIGFjdGlvbiAnc3VibWl0RmV0Y2hSZXBvcnQnLlxuICpcbiAqIFVzYWdlOiBTdWJtaXRzIEVudHJ5IERpc3RyaWJ1dGlvbiByZXBvcnQgcmVxdWVzdFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvblxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRW50cnlEaXN0cmlidXRpb25TdWJtaXRGZXRjaFJlcG9ydEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbj4ge1xuXG4gICAgaWQgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogRW50cnlEaXN0cmlidXRpb25TdWJtaXRGZXRjaFJlcG9ydEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5RGlzdHJpYnV0aW9uJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeURpc3RyaWJ1dGlvbiAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnY29udGVudGRpc3RyaWJ1dGlvbl9lbnRyeWRpc3RyaWJ1dGlvbicgfSxcblx0XHRcdFx0YWN0aW9uIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3N1Ym1pdEZldGNoUmVwb3J0JyB9LFxuXHRcdFx0XHRpZCA6IHsgdHlwZSA6ICduJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
