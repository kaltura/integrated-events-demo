"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenericDistributionProviderActionDeleteByProviderIdAction = void 0;
var tslib_1 = require("tslib");
var KalturaDistributionAction_1 = require("./KalturaDistributionAction");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'genericDistributionProviderAction' action 'deleteByProviderId'.
 *
 * Usage: Delete Generic Distribution Provider Action by provider id
 *
 * Server response type:         void
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var GenericDistributionProviderActionDeleteByProviderIdAction = /** @class */ (function (_super) {
    tslib_1.__extends(GenericDistributionProviderActionDeleteByProviderIdAction, _super);
    function GenericDistributionProviderActionDeleteByProviderIdAction(data) {
        return _super.call(this, data, { responseType: 'v', responseSubType: '', responseConstructor: null }) || this;
    }
    GenericDistributionProviderActionDeleteByProviderIdAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'contentdistribution_genericdistributionprovideraction' },
            action: { type: 'c', default: 'deleteByProviderId' },
            genericDistributionProviderId: { type: 'n' },
            actionType: { type: 'en', subTypeConstructor: KalturaDistributionAction_1.KalturaDistributionAction, subType: 'KalturaDistributionAction' }
        });
        return result;
    };
    return GenericDistributionProviderActionDeleteByProviderIdAction;
}(kaltura_request_1.KalturaRequest));
exports.GenericDistributionProviderActionDeleteByProviderIdAction = GenericDistributionProviderActionDeleteByProviderIdAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9HZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJBY3Rpb25EZWxldGVCeVByb3ZpZGVySWRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUlBLHlFQUF3RTtBQUN4RSxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBK0UscUZBQW9CO0lBSy9GLG1FQUFZLElBQW9FO2VBRTVFLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQztJQUN4RixDQUFDO0lBRVMsZ0ZBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdURBQXVELEVBQUU7WUFDdkcsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDdkQsNkJBQTZCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlDLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1NBQzFHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxnRUFBQztBQUFELENBeEJBLEFBd0JDLENBeEI4RSxnQ0FBYyxHQXdCNUY7QUF4QlksOEhBQXlEIiwiZmlsZSI6ImFwaS90eXBlcy9HZW5lcmljRGlzdHJpYnV0aW9uUHJvdmlkZXJBY3Rpb25EZWxldGVCeVByb3ZpZGVySWRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5cbmltcG9ydCB7IEthbHR1cmFEaXN0cmlidXRpb25BY3Rpb24gfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25BY3Rpb24nO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQWN0aW9uRGVsZXRlQnlQcm92aWRlcklkQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlcklkIDogbnVtYmVyO1xuXHRhY3Rpb25UeXBlIDogS2FsdHVyYURpc3RyaWJ1dGlvbkFjdGlvbjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2dlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlckFjdGlvbicgYWN0aW9uICdkZWxldGVCeVByb3ZpZGVySWQnLlxuICpcbiAqIFVzYWdlOiBEZWxldGUgR2VuZXJpYyBEaXN0cmlidXRpb24gUHJvdmlkZXIgQWN0aW9uIGJ5IHByb3ZpZGVyIGlkXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgdm9pZFxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVyQWN0aW9uRGVsZXRlQnlQcm92aWRlcklkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8dm9pZD4ge1xuXG4gICAgZ2VuZXJpY0Rpc3RyaWJ1dGlvblByb3ZpZGVySWQgOiBudW1iZXI7XG5cdGFjdGlvblR5cGUgOiBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IEdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlckFjdGlvbkRlbGV0ZUJ5UHJvdmlkZXJJZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ3YnLCByZXNwb25zZVN1YlR5cGUgOiAnJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IG51bGwgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnY29udGVudGRpc3RyaWJ1dGlvbl9nZW5lcmljZGlzdHJpYnV0aW9ucHJvdmlkZXJhY3Rpb24nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdkZWxldGVCeVByb3ZpZGVySWQnIH0sXG5cdFx0XHRcdGdlbmVyaWNEaXN0cmlidXRpb25Qcm92aWRlcklkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGFjdGlvblR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRGlzdHJpYnV0aW9uQWN0aW9uLCBzdWJUeXBlIDogJ0thbHR1cmFEaXN0cmlidXRpb25BY3Rpb24nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
