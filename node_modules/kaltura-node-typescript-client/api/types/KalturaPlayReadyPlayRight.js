"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaPlayReadyPlayRight = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaPlayReadyAnalogVideoOPL_1 = require("./KalturaPlayReadyAnalogVideoOPL");
var KalturaPlayReadyAnalogVideoOPIdHolder_1 = require("./KalturaPlayReadyAnalogVideoOPIdHolder");
var KalturaPlayReadyDigitalAudioOPL_1 = require("./KalturaPlayReadyDigitalAudioOPL");
var KalturaPlayReadyCompressedDigitalVideoOPL_1 = require("./KalturaPlayReadyCompressedDigitalVideoOPL");
var KalturaPlayReadyDigitalAudioOPIdHolder_1 = require("./KalturaPlayReadyDigitalAudioOPIdHolder");
var KalturaPlayReadyUncompressedDigitalVideoOPL_1 = require("./KalturaPlayReadyUncompressedDigitalVideoOPL");
var KalturaPlayReadyPlayEnablerHolder_1 = require("./KalturaPlayReadyPlayEnablerHolder");
var KalturaPlayReadyRight_1 = require("./KalturaPlayReadyRight");
var KalturaPlayReadyPlayRight = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaPlayReadyPlayRight, _super);
    function KalturaPlayReadyPlayRight(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.analogVideoOutputProtectionList === 'undefined')
            _this.analogVideoOutputProtectionList = [];
        if (typeof _this.digitalAudioOutputProtectionList === 'undefined')
            _this.digitalAudioOutputProtectionList = [];
        if (typeof _this.playEnablers === 'undefined')
            _this.playEnablers = [];
        return _this;
    }
    KalturaPlayReadyPlayRight.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaPlayReadyPlayRight' },
            analogVideoOPL: { type: 'en', subTypeConstructor: KalturaPlayReadyAnalogVideoOPL_1.KalturaPlayReadyAnalogVideoOPL, subType: 'KalturaPlayReadyAnalogVideoOPL' },
            analogVideoOutputProtectionList: { type: 'a', subTypeConstructor: KalturaPlayReadyAnalogVideoOPIdHolder_1.KalturaPlayReadyAnalogVideoOPIdHolder, subType: 'KalturaPlayReadyAnalogVideoOPIdHolder' },
            compressedDigitalAudioOPL: { type: 'en', subTypeConstructor: KalturaPlayReadyDigitalAudioOPL_1.KalturaPlayReadyDigitalAudioOPL, subType: 'KalturaPlayReadyDigitalAudioOPL' },
            compressedDigitalVideoOPL: { type: 'en', subTypeConstructor: KalturaPlayReadyCompressedDigitalVideoOPL_1.KalturaPlayReadyCompressedDigitalVideoOPL, subType: 'KalturaPlayReadyCompressedDigitalVideoOPL' },
            digitalAudioOutputProtectionList: { type: 'a', subTypeConstructor: KalturaPlayReadyDigitalAudioOPIdHolder_1.KalturaPlayReadyDigitalAudioOPIdHolder, subType: 'KalturaPlayReadyDigitalAudioOPIdHolder' },
            uncompressedDigitalAudioOPL: { type: 'en', subTypeConstructor: KalturaPlayReadyDigitalAudioOPL_1.KalturaPlayReadyDigitalAudioOPL, subType: 'KalturaPlayReadyDigitalAudioOPL' },
            uncompressedDigitalVideoOPL: { type: 'en', subTypeConstructor: KalturaPlayReadyUncompressedDigitalVideoOPL_1.KalturaPlayReadyUncompressedDigitalVideoOPL, subType: 'KalturaPlayReadyUncompressedDigitalVideoOPL' },
            firstPlayExpiration: { type: 'n' },
            playEnablers: { type: 'a', subTypeConstructor: KalturaPlayReadyPlayEnablerHolder_1.KalturaPlayReadyPlayEnablerHolder, subType: 'KalturaPlayReadyPlayEnablerHolder' }
        });
        return result;
    };
    return KalturaPlayReadyPlayRight;
}(KalturaPlayReadyRight_1.KalturaPlayReadyRight));
exports.KalturaPlayReadyPlayRight = KalturaPlayReadyPlayRight;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaPlayReadyPlayRight', KalturaPlayReadyPlayRight);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
