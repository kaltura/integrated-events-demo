"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaHttpNotificationObjectData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaResponseType_1 = require("./KalturaResponseType");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaHttpNotificationData_1 = require("./KalturaHttpNotificationData");
var KalturaHttpNotificationObjectData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaHttpNotificationObjectData, _super);
    function KalturaHttpNotificationObjectData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.dataStringReplacements === 'undefined')
            _this.dataStringReplacements = [];
        return _this;
    }
    KalturaHttpNotificationObjectData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaHttpNotificationObjectData' },
            apiObjectType: { type: 's' },
            format: { type: 'en', subTypeConstructor: KalturaResponseType_1.KalturaResponseType, subType: 'KalturaResponseType' },
            ignoreNull: { type: 'b' },
            code: { type: 's' },
            dataStringReplacements: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' }
        });
        return result;
    };
    return KalturaHttpNotificationObjectData;
}(KalturaHttpNotificationData_1.KalturaHttpNotificationData));
exports.KalturaHttpNotificationObjectData = KalturaHttpNotificationObjectData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaHttpNotificationObjectData', KalturaHttpNotificationObjectData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhSHR0cE5vdGlmaWNhdGlvbk9iamVjdERhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCw2REFBNEQ7QUFDNUQscURBQW9EO0FBQ3BELDZFQUE2RztBQVc3RztJQUF1RCw2REFBMkI7SUFROUUsMkNBQVksSUFBNkM7UUFBekQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsc0JBQXNCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxzQkFBc0IsR0FBRyxFQUFFLENBQUM7O0lBQzdGLENBQUM7SUFFUyx3REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQ0FBbUMsRUFBRTtZQUN0RixhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlCLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1lBQ25HLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixzQkFBc0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsaUNBQWUsRUFBRSxPQUFPLEVBQUcsaUJBQWlCLEVBQUU7U0FDakcsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHdDQUFDO0FBQUQsQ0E5QkEsQUE4QkMsQ0E5QnNELHlEQUEyQixHQThCakY7QUE5QlksOEVBQWlDO0FBZ0M5QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsbUNBQW1DLEVBQUMsaUNBQWlDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUh0dHBOb3RpZmljYXRpb25PYmplY3REYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVJlc3BvbnNlVHlwZSB9IGZyb20gJy4vS2FsdHVyYVJlc3BvbnNlVHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhS2V5VmFsdWUgfSBmcm9tICcuL0thbHR1cmFLZXlWYWx1ZSc7XG5pbXBvcnQgeyBLYWx0dXJhSHR0cE5vdGlmaWNhdGlvbkRhdGEsIEthbHR1cmFIdHRwTm90aWZpY2F0aW9uRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFIdHRwTm90aWZpY2F0aW9uRGF0YSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUh0dHBOb3RpZmljYXRpb25PYmplY3REYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhSHR0cE5vdGlmaWNhdGlvbkRhdGFBcmdzIHtcbiAgICBhcGlPYmplY3RUeXBlPyA6IHN0cmluZztcblx0Zm9ybWF0PyA6IEthbHR1cmFSZXNwb25zZVR5cGU7XG5cdGlnbm9yZU51bGw/IDogYm9vbGVhbjtcblx0Y29kZT8gOiBzdHJpbmc7XG5cdGRhdGFTdHJpbmdSZXBsYWNlbWVudHM/IDogS2FsdHVyYUtleVZhbHVlW107XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFIdHRwTm90aWZpY2F0aW9uT2JqZWN0RGF0YSBleHRlbmRzIEthbHR1cmFIdHRwTm90aWZpY2F0aW9uRGF0YSB7XG5cbiAgICBhcGlPYmplY3RUeXBlIDogc3RyaW5nO1xuXHRmb3JtYXQgOiBLYWx0dXJhUmVzcG9uc2VUeXBlO1xuXHRpZ25vcmVOdWxsIDogYm9vbGVhbjtcblx0Y29kZSA6IHN0cmluZztcblx0ZGF0YVN0cmluZ1JlcGxhY2VtZW50cyA6IEthbHR1cmFLZXlWYWx1ZVtdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhSHR0cE5vdGlmaWNhdGlvbk9iamVjdERhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhU3RyaW5nUmVwbGFjZW1lbnRzID09PSAndW5kZWZpbmVkJykgdGhpcy5kYXRhU3RyaW5nUmVwbGFjZW1lbnRzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUh0dHBOb3RpZmljYXRpb25PYmplY3REYXRhJyB9LFxuXHRcdFx0XHRhcGlPYmplY3RUeXBlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGZvcm1hdCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXNwb25zZVR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVJlc3BvbnNlVHlwZScgfSxcblx0XHRcdFx0aWdub3JlTnVsbCA6IHsgdHlwZSA6ICdiJyB9LFxuXHRcdFx0XHRjb2RlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGRhdGFTdHJpbmdSZXBsYWNlbWVudHMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFLZXlWYWx1ZSwgc3ViVHlwZSA6ICdLYWx0dXJhS2V5VmFsdWUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhSHR0cE5vdGlmaWNhdGlvbk9iamVjdERhdGEnLEthbHR1cmFIdHRwTm90aWZpY2F0aW9uT2JqZWN0RGF0YSk7XG4iXX0=
