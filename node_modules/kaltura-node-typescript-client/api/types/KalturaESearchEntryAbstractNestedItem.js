"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaESearchEntryAbstractNestedItem = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaESearchItemType_1 = require("./KalturaESearchItemType");
var KalturaESearchRange_1 = require("./KalturaESearchRange");
var KalturaESearchEntryNestedBaseItem_1 = require("./KalturaESearchEntryNestedBaseItem");
var KalturaESearchEntryAbstractNestedItem = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaESearchEntryAbstractNestedItem, _super);
    function KalturaESearchEntryAbstractNestedItem(data) {
        return _super.call(this, data) || this;
    }
    KalturaESearchEntryAbstractNestedItem.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaESearchEntryAbstractNestedItem' },
            searchTerm: { type: 's' },
            itemType: { type: 'en', subTypeConstructor: KalturaESearchItemType_1.KalturaESearchItemType, subType: 'KalturaESearchItemType' },
            range: { type: 'o', subTypeConstructor: KalturaESearchRange_1.KalturaESearchRange, subType: 'KalturaESearchRange' },
            addHighlight: { type: 'b' }
        });
        return result;
    };
    return KalturaESearchEntryAbstractNestedItem;
}(KalturaESearchEntryNestedBaseItem_1.KalturaESearchEntryNestedBaseItem));
exports.KalturaESearchEntryAbstractNestedItem = KalturaESearchEntryAbstractNestedItem;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaESearchEntryAbstractNestedItem', KalturaESearchEntryAbstractNestedItem);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRVNlYXJjaEVudHJ5QWJzdHJhY3ROZXN0ZWRJdGVtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUVBQWtFO0FBQ2xFLDZEQUE0RDtBQUM1RCx5RkFBK0g7QUFVL0g7SUFBMkQsaUVBQWlDO0lBT3hGLCtDQUFZLElBQWlEO2VBRXpELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyw0REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyx1Q0FBdUMsRUFBRTtZQUMxRixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0NBQXNCLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzNHLEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1lBQ2pHLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDcEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDRDQUFDO0FBQUQsQ0EzQkEsQUEyQkMsQ0EzQjBELHFFQUFpQyxHQTJCM0Y7QUEzQlksc0ZBQXFDO0FBNkJsRCwyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsdUNBQXVDLEVBQUMscUNBQXFDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUVTZWFyY2hFbnRyeUFic3RyYWN0TmVzdGVkSXRlbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFFU2VhcmNoSXRlbVR5cGUgfSBmcm9tICcuL0thbHR1cmFFU2VhcmNoSXRlbVR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYUVTZWFyY2hSYW5nZSB9IGZyb20gJy4vS2FsdHVyYUVTZWFyY2hSYW5nZSc7XG5pbXBvcnQgeyBLYWx0dXJhRVNlYXJjaEVudHJ5TmVzdGVkQmFzZUl0ZW0sIEthbHR1cmFFU2VhcmNoRW50cnlOZXN0ZWRCYXNlSXRlbUFyZ3MgfSBmcm9tICcuL0thbHR1cmFFU2VhcmNoRW50cnlOZXN0ZWRCYXNlSXRlbSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUVTZWFyY2hFbnRyeUFic3RyYWN0TmVzdGVkSXRlbUFyZ3MgIGV4dGVuZHMgS2FsdHVyYUVTZWFyY2hFbnRyeU5lc3RlZEJhc2VJdGVtQXJncyB7XG4gICAgc2VhcmNoVGVybT8gOiBzdHJpbmc7XG5cdGl0ZW1UeXBlPyA6IEthbHR1cmFFU2VhcmNoSXRlbVR5cGU7XG5cdHJhbmdlPyA6IEthbHR1cmFFU2VhcmNoUmFuZ2U7XG5cdGFkZEhpZ2hsaWdodD8gOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRVNlYXJjaEVudHJ5QWJzdHJhY3ROZXN0ZWRJdGVtIGV4dGVuZHMgS2FsdHVyYUVTZWFyY2hFbnRyeU5lc3RlZEJhc2VJdGVtIHtcblxuICAgIHNlYXJjaFRlcm0gOiBzdHJpbmc7XG5cdGl0ZW1UeXBlIDogS2FsdHVyYUVTZWFyY2hJdGVtVHlwZTtcblx0cmFuZ2UgOiBLYWx0dXJhRVNlYXJjaFJhbmdlO1xuXHRhZGRIaWdobGlnaHQgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRVNlYXJjaEVudHJ5QWJzdHJhY3ROZXN0ZWRJdGVtQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFFU2VhcmNoRW50cnlBYnN0cmFjdE5lc3RlZEl0ZW0nIH0sXG5cdFx0XHRcdHNlYXJjaFRlcm0gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aXRlbVR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRVNlYXJjaEl0ZW1UeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoSXRlbVR5cGUnIH0sXG5cdFx0XHRcdHJhbmdlIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRVNlYXJjaFJhbmdlLCBzdWJUeXBlIDogJ0thbHR1cmFFU2VhcmNoUmFuZ2UnIH0sXG5cdFx0XHRcdGFkZEhpZ2hsaWdodCA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUVTZWFyY2hFbnRyeUFic3RyYWN0TmVzdGVkSXRlbScsS2FsdHVyYUVTZWFyY2hFbnRyeUFic3RyYWN0TmVzdGVkSXRlbSk7XG4iXX0=
