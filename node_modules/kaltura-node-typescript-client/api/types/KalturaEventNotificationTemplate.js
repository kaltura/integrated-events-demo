"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaEventNotificationTemplate = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaEventNotificationTemplateType_1 = require("./KalturaEventNotificationTemplateType");
var KalturaEventNotificationTemplateStatus_1 = require("./KalturaEventNotificationTemplateStatus");
var KalturaEventNotificationEventType_1 = require("./KalturaEventNotificationEventType");
var KalturaEventNotificationEventObjectType_1 = require("./KalturaEventNotificationEventObjectType");
var KalturaCondition_1 = require("./KalturaCondition");
var KalturaEventNotificationParameter_1 = require("./KalturaEventNotificationParameter");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaEventNotificationTemplate = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaEventNotificationTemplate, _super);
    function KalturaEventNotificationTemplate(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.eventConditions === 'undefined')
            _this.eventConditions = [];
        if (typeof _this.contentParameters === 'undefined')
            _this.contentParameters = [];
        if (typeof _this.userParameters === 'undefined')
            _this.userParameters = [];
        return _this;
    }
    KalturaEventNotificationTemplate.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaEventNotificationTemplate' },
            id: { type: 'n', readOnly: true },
            partnerId: { type: 'n', readOnly: true },
            name: { type: 's' },
            systemName: { type: 's' },
            description: { type: 's' },
            type: { type: 'es', subTypeConstructor: KalturaEventNotificationTemplateType_1.KalturaEventNotificationTemplateType, subType: 'KalturaEventNotificationTemplateType' },
            status: { type: 'en', readOnly: true, subTypeConstructor: KalturaEventNotificationTemplateStatus_1.KalturaEventNotificationTemplateStatus, subType: 'KalturaEventNotificationTemplateStatus' },
            createdAt: { type: 'd', readOnly: true },
            updatedAt: { type: 'd', readOnly: true },
            manualDispatchEnabled: { type: 'b' },
            automaticDispatchEnabled: { type: 'b' },
            eventType: { type: 'es', subTypeConstructor: KalturaEventNotificationEventType_1.KalturaEventNotificationEventType, subType: 'KalturaEventNotificationEventType' },
            eventObjectType: { type: 'es', subTypeConstructor: KalturaEventNotificationEventObjectType_1.KalturaEventNotificationEventObjectType, subType: 'KalturaEventNotificationEventObjectType' },
            eventConditions: { type: 'a', subTypeConstructor: KalturaCondition_1.KalturaCondition, subType: 'KalturaCondition' },
            contentParameters: { type: 'a', subTypeConstructor: KalturaEventNotificationParameter_1.KalturaEventNotificationParameter, subType: 'KalturaEventNotificationParameter' },
            userParameters: { type: 'a', subTypeConstructor: KalturaEventNotificationParameter_1.KalturaEventNotificationParameter, subType: 'KalturaEventNotificationParameter' }
        });
        return result;
    };
    return KalturaEventNotificationTemplate;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaEventNotificationTemplate = KalturaEventNotificationTemplate;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaEventNotificationTemplate', KalturaEventNotificationTemplate);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
