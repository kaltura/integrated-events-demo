"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataProfileListFieldsAction = void 0;
var tslib_1 = require("tslib");
var KalturaMetadataProfileFieldListResponse_1 = require("./KalturaMetadataProfileFieldListResponse");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'metadataProfile' action 'listFields'.
 *
 * Usage: List metadata profile fields by metadata profile id
 *
 * Server response type:         KalturaMetadataProfileFieldListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var MetadataProfileListFieldsAction = /** @class */ (function (_super) {
    tslib_1.__extends(MetadataProfileListFieldsAction, _super);
    function MetadataProfileListFieldsAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaMetadataProfileFieldListResponse', responseConstructor: KalturaMetadataProfileFieldListResponse_1.KalturaMetadataProfileFieldListResponse }) || this;
    }
    MetadataProfileListFieldsAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'metadata_metadataprofile' },
            action: { type: 'c', default: 'listFields' },
            metadataProfileId: { type: 'n' }
        });
        return result;
    };
    return MetadataProfileListFieldsAction;
}(kaltura_request_1.KalturaRequest));
exports.MetadataProfileListFieldsAction = MetadataProfileListFieldsAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZXRhZGF0YVByb2ZpbGVMaXN0RmllbGRzQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxxR0FBb0c7QUFFcEcsc0RBQXdFO0FBTXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXFELDJEQUF1RDtJQUl4Ryx5Q0FBWSxJQUEwQztlQUVsRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyx5Q0FBeUMsRUFBRSxtQkFBbUIsRUFBRyxpRkFBdUMsRUFBRyxDQUFDO0lBQ25LLENBQUM7SUFFUyxzREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUMxRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxZQUFZLEVBQUU7WUFDL0MsaUJBQWlCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3pCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxzQ0FBQztBQUFELENBdEJBLEFBc0JDLENBdEJvRCxnQ0FBYyxHQXNCbEU7QUF0QlksMEVBQStCIiwiZmlsZSI6ImFwaS90eXBlcy9NZXRhZGF0YVByb2ZpbGVMaXN0RmllbGRzQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFNZXRhZGF0YVByb2ZpbGVGaWVsZExpc3RSZXNwb25zZSB9IGZyb20gJy4vS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUZpZWxkTGlzdFJlc3BvbnNlJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFQcm9maWxlTGlzdEZpZWxkc0FjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBtZXRhZGF0YVByb2ZpbGVJZCA6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ21ldGFkYXRhUHJvZmlsZScgYWN0aW9uICdsaXN0RmllbGRzJy5cbiAqXG4gKiBVc2FnZTogTGlzdCBtZXRhZGF0YSBwcm9maWxlIGZpZWxkcyBieSBtZXRhZGF0YSBwcm9maWxlIGlkXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUZpZWxkTGlzdFJlc3BvbnNlXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRhZGF0YVByb2ZpbGVMaXN0RmllbGRzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYU1ldGFkYXRhUHJvZmlsZUZpZWxkTGlzdFJlc3BvbnNlPiB7XG5cbiAgICBtZXRhZGF0YVByb2ZpbGVJZCA6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBNZXRhZGF0YVByb2ZpbGVMaXN0RmllbGRzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhTWV0YWRhdGFQcm9maWxlRmllbGRMaXN0UmVzcG9uc2UnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUZpZWxkTGlzdFJlc3BvbnNlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdtZXRhZGF0YV9tZXRhZGF0YXByb2ZpbGUnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdsaXN0RmllbGRzJyB9LFxuXHRcdFx0XHRtZXRhZGF0YVByb2ZpbGVJZCA6IHsgdHlwZSA6ICduJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
