"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaCaptionAssetBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaCaptionType_1 = require("./KalturaCaptionType");
var KalturaCaptionAssetStatus_1 = require("./KalturaCaptionAssetStatus");
var KalturaAssetFilter_1 = require("./KalturaAssetFilter");
var KalturaCaptionAssetBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaCaptionAssetBaseFilter, _super);
    function KalturaCaptionAssetBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaCaptionAssetBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaCaptionAssetBaseFilter' },
            captionParamsIdEqual: { type: 'n' },
            captionParamsIdIn: { type: 's' },
            formatEqual: { type: 'es', subTypeConstructor: KalturaCaptionType_1.KalturaCaptionType, subType: 'KalturaCaptionType' },
            formatIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaCaptionAssetStatus_1.KalturaCaptionAssetStatus, subType: 'KalturaCaptionAssetStatus' },
            statusIn: { type: 's' },
            statusNotIn: { type: 's' }
        });
        return result;
    };
    return KalturaCaptionAssetBaseFilter;
}(KalturaAssetFilter_1.KalturaAssetFilter));
exports.KalturaCaptionAssetBaseFilter = KalturaCaptionAssetBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaCaptionAssetBaseFilter', KalturaCaptionAssetBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ2FwdGlvbkFzc2V0QmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELDJEQUEwRDtBQUMxRCx5RUFBd0U7QUFDeEUsMkRBQWtGO0FBYWxGO0lBQW1ELHlEQUFrQjtJQVVqRSx1Q0FBWSxJQUF5QztlQUVqRCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsb0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7WUFDbEYsb0JBQW9CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JDLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNsQyxXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtZQUN0RyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1lBQ3BILFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNuQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsb0NBQUM7QUFBRCxDQWpDQSxBQWlDQyxDQWpDa0QsdUNBQWtCLEdBaUNwRTtBQWpDWSxzRUFBNkI7QUFtQzFDLDJDQUFtQixDQUFDLFlBQVksQ0FBQywrQkFBK0IsRUFBQyw2QkFBNkIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQ2FwdGlvbkFzc2V0QmFzZUZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFDYXB0aW9uVHlwZSB9IGZyb20gJy4vS2FsdHVyYUNhcHRpb25UeXBlJztcbmltcG9ydCB7IEthbHR1cmFDYXB0aW9uQXNzZXRTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFDYXB0aW9uQXNzZXRTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYUFzc2V0RmlsdGVyLCBLYWx0dXJhQXNzZXRGaWx0ZXJBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQXNzZXRGaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFDYXB0aW9uQXNzZXRCYXNlRmlsdGVyQXJncyAgZXh0ZW5kcyBLYWx0dXJhQXNzZXRGaWx0ZXJBcmdzIHtcbiAgICBjYXB0aW9uUGFyYW1zSWRFcXVhbD8gOiBudW1iZXI7XG5cdGNhcHRpb25QYXJhbXNJZEluPyA6IHN0cmluZztcblx0Zm9ybWF0RXF1YWw/IDogS2FsdHVyYUNhcHRpb25UeXBlO1xuXHRmb3JtYXRJbj8gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsPyA6IEthbHR1cmFDYXB0aW9uQXNzZXRTdGF0dXM7XG5cdHN0YXR1c0luPyA6IHN0cmluZztcblx0c3RhdHVzTm90SW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQ2FwdGlvbkFzc2V0QmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFBc3NldEZpbHRlciB7XG5cbiAgICBjYXB0aW9uUGFyYW1zSWRFcXVhbCA6IG51bWJlcjtcblx0Y2FwdGlvblBhcmFtc0lkSW4gOiBzdHJpbmc7XG5cdGZvcm1hdEVxdWFsIDogS2FsdHVyYUNhcHRpb25UeXBlO1xuXHRmb3JtYXRJbiA6IHN0cmluZztcblx0c3RhdHVzRXF1YWwgOiBLYWx0dXJhQ2FwdGlvbkFzc2V0U3RhdHVzO1xuXHRzdGF0dXNJbiA6IHN0cmluZztcblx0c3RhdHVzTm90SW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFDYXB0aW9uQXNzZXRCYXNlRmlsdGVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFDYXB0aW9uQXNzZXRCYXNlRmlsdGVyJyB9LFxuXHRcdFx0XHRjYXB0aW9uUGFyYW1zSWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRjYXB0aW9uUGFyYW1zSWRJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRmb3JtYXRFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDYXB0aW9uVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhQ2FwdGlvblR5cGUnIH0sXG5cdFx0XHRcdGZvcm1hdEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN0YXR1c0VxdWFsIDogeyB0eXBlIDogJ2VuJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNhcHRpb25Bc3NldFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhQ2FwdGlvbkFzc2V0U3RhdHVzJyB9LFxuXHRcdFx0XHRzdGF0dXNJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNOb3RJbiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUNhcHRpb25Bc3NldEJhc2VGaWx0ZXInLEthbHR1cmFDYXB0aW9uQXNzZXRCYXNlRmlsdGVyKTtcbiJdfQ==
