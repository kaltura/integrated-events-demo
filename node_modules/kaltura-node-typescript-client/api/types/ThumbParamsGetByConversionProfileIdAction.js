"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThumbParamsGetByConversionProfileIdAction = void 0;
var tslib_1 = require("tslib");
var KalturaThumbParams_1 = require("./KalturaThumbParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'thumbParams' action 'getByConversionProfileId'.
 *
 * Usage: Get Thumb Params by Conversion Profile ID
 *
 * Server response type:         KalturaThumbParams[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ThumbParamsGetByConversionProfileIdAction = /** @class */ (function (_super) {
    tslib_1.__extends(ThumbParamsGetByConversionProfileIdAction, _super);
    function ThumbParamsGetByConversionProfileIdAction(data) {
        return _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaThumbParams', responseConstructor: KalturaThumbParams_1.KalturaThumbParams }) || this;
    }
    ThumbParamsGetByConversionProfileIdAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'thumbparams' },
            action: { type: 'c', default: 'getByConversionProfileId' },
            conversionProfileId: { type: 'n' }
        });
        return result;
    };
    return ThumbParamsGetByConversionProfileIdAction;
}(kaltura_request_1.KalturaRequest));
exports.ThumbParamsGetByConversionProfileIdAction = ThumbParamsGetByConversionProfileIdAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9UaHVtYlBhcmFtc0dldEJ5Q29udmVyc2lvblByb2ZpbGVJZEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsMkRBQTBEO0FBRTFELHNEQUF3RTtBQU14RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUErRCxxRUFBb0M7SUFJL0YsbURBQVksSUFBb0Q7ZUFFNUQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUcsdUNBQWtCLEVBQUcsQ0FBQztJQUN6SCxDQUFDO0lBRVMsZ0VBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFO1lBQzdELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDBCQUEwQixFQUFFO1lBQzdELG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUMzQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsZ0RBQUM7QUFBRCxDQXRCQSxBQXNCQyxDQXRCOEQsZ0NBQWMsR0FzQjVFO0FBdEJZLDhGQUF5QyIsImZpbGUiOiJhcGkvdHlwZXMvVGh1bWJQYXJhbXNHZXRCeUNvbnZlcnNpb25Qcm9maWxlSWRBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVRodW1iUGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhVGh1bWJQYXJhbXMnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBUaHVtYlBhcmFtc0dldEJ5Q29udmVyc2lvblByb2ZpbGVJZEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBjb252ZXJzaW9uUHJvZmlsZUlkIDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAndGh1bWJQYXJhbXMnIGFjdGlvbiAnZ2V0QnlDb252ZXJzaW9uUHJvZmlsZUlkJy5cbiAqXG4gKiBVc2FnZTogR2V0IFRodW1iIFBhcmFtcyBieSBDb252ZXJzaW9uIFByb2ZpbGUgSURcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhVGh1bWJQYXJhbXNbXVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgVGh1bWJQYXJhbXNHZXRCeUNvbnZlcnNpb25Qcm9maWxlSWRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhVGh1bWJQYXJhbXNbXT4ge1xuXG4gICAgY29udmVyc2lvblByb2ZpbGVJZCA6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBUaHVtYlBhcmFtc0dldEJ5Q29udmVyc2lvblByb2ZpbGVJZEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ2EnLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYVRodW1iUGFyYW1zJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFUaHVtYlBhcmFtcyAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndGh1bWJwYXJhbXMnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRCeUNvbnZlcnNpb25Qcm9maWxlSWQnIH0sXG5cdFx0XHRcdGNvbnZlcnNpb25Qcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
