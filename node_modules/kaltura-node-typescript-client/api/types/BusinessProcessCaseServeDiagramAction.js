"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BusinessProcessCaseServeDiagramAction = void 0;
var tslib_1 = require("tslib");
var KalturaEventNotificationEventObjectType_1 = require("./KalturaEventNotificationEventObjectType");
var kaltura_file_request_1 = require("../kaltura-file-request");
/**
 * Build request payload for service 'businessProcessCase' action 'serveDiagram'.
 *
 * Usage: Server business-process case diagram
 *
 * Server response type:         { url: string }
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaFileRequest
 */
var BusinessProcessCaseServeDiagramAction = /** @class */ (function (_super) {
    tslib_1.__extends(BusinessProcessCaseServeDiagramAction, _super);
    function BusinessProcessCaseServeDiagramAction(data) {
        return _super.call(this, data) || this;
    }
    BusinessProcessCaseServeDiagramAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'businessprocessnotification_businessprocesscase' },
            action: { type: 'c', default: 'serveDiagram' },
            objectType: { type: 'es', subTypeConstructor: KalturaEventNotificationEventObjectType_1.KalturaEventNotificationEventObjectType, subType: 'KalturaEventNotificationEventObjectType' },
            objectId: { type: 's' },
            businessProcessStartNotificationTemplateId: { type: 'n' }
        });
        return result;
    };
    return BusinessProcessCaseServeDiagramAction;
}(kaltura_file_request_1.KalturaFileRequest));
exports.BusinessProcessCaseServeDiagramAction = BusinessProcessCaseServeDiagramAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9CdXNpbmVzc1Byb2Nlc3NDYXNlU2VydmVEaWFncmFtQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxxR0FBb0c7QUFDcEcsZ0VBQXFGO0FBUXJGOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQTJELGlFQUFrQjtJQU16RSwrQ0FBWSxJQUFnRDtlQUV4RCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsNERBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsaURBQWlELEVBQUU7WUFDakcsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsY0FBYyxFQUFFO1lBQ2pELFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsaUZBQXVDLEVBQUUsT0FBTyxFQUFHLHlDQUF5QyxFQUFFO1lBQy9JLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsMENBQTBDLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ2xELENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCw0Q0FBQztBQUFELENBMUJBLEFBMEJDLENBMUIwRCx5Q0FBa0IsR0EwQjVFO0FBMUJZLHNGQUFxQyIsImZpbGUiOiJhcGkvdHlwZXMvQnVzaW5lc3NQcm9jZXNzQ2FzZVNlcnZlRGlhZ3JhbUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5cblxuaW1wb3J0IHsgS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uRXZlbnRPYmplY3RUeXBlIH0gZnJvbSAnLi9LYWx0dXJhRXZlbnROb3RpZmljYXRpb25FdmVudE9iamVjdFR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYUZpbGVSZXF1ZXN0LCBLYWx0dXJhRmlsZVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1maWxlLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1c2luZXNzUHJvY2Vzc0Nhc2VTZXJ2ZURpYWdyYW1BY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFGaWxlUmVxdWVzdEFyZ3Mge1xuICAgIG9iamVjdFR5cGUgOiBLYWx0dXJhRXZlbnROb3RpZmljYXRpb25FdmVudE9iamVjdFR5cGU7XG5cdG9iamVjdElkIDogc3RyaW5nO1xuXHRidXNpbmVzc1Byb2Nlc3NTdGFydE5vdGlmaWNhdGlvblRlbXBsYXRlSWQgOiBudW1iZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdidXNpbmVzc1Byb2Nlc3NDYXNlJyBhY3Rpb24gJ3NlcnZlRGlhZ3JhbScuXG4gKlxuICogVXNhZ2U6IFNlcnZlciBidXNpbmVzcy1wcm9jZXNzIGNhc2UgZGlhZ3JhbVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIHsgdXJsOiBzdHJpbmcgfVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhRmlsZVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1c2luZXNzUHJvY2Vzc0Nhc2VTZXJ2ZURpYWdyYW1BY3Rpb24gZXh0ZW5kcyBLYWx0dXJhRmlsZVJlcXVlc3Qge1xuXG4gICAgb2JqZWN0VHlwZSA6IEthbHR1cmFFdmVudE5vdGlmaWNhdGlvbkV2ZW50T2JqZWN0VHlwZTtcblx0b2JqZWN0SWQgOiBzdHJpbmc7XG5cdGJ1c2luZXNzUHJvY2Vzc1N0YXJ0Tm90aWZpY2F0aW9uVGVtcGxhdGVJZCA6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBCdXNpbmVzc1Byb2Nlc3NDYXNlU2VydmVEaWFncmFtQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2J1c2luZXNzcHJvY2Vzc25vdGlmaWNhdGlvbl9idXNpbmVzc3Byb2Nlc3NjYXNlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnc2VydmVEaWFncmFtJyB9LFxuXHRcdFx0XHRvYmplY3RUeXBlIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUV2ZW50Tm90aWZpY2F0aW9uRXZlbnRPYmplY3RUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFFdmVudE5vdGlmaWNhdGlvbkV2ZW50T2JqZWN0VHlwZScgfSxcblx0XHRcdFx0b2JqZWN0SWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0YnVzaW5lc3NQcm9jZXNzU3RhcnROb3RpZmljYXRpb25UZW1wbGF0ZUlkIDogeyB0eXBlIDogJ24nIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
