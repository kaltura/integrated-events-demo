"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistExecuteFromContentAction = void 0;
var tslib_1 = require("tslib");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var KalturaPlaylistType_1 = require("./KalturaPlaylistType");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playlist' action 'executeFromContent'.
 *
 * Usage: Retrieve playlist for playing purpose, based on content
 *
 * Server response type:         KalturaBaseEntry[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlaylistExecuteFromContentAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlaylistExecuteFromContentAction, _super);
    function PlaylistExecuteFromContentAction(data) {
        return _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaBaseEntry', responseConstructor: KalturaBaseEntry_1.KalturaBaseEntry }) || this;
    }
    PlaylistExecuteFromContentAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playlist' },
            action: { type: 'c', default: 'executeFromContent' },
            playlistType: { type: 'en', subTypeConstructor: KalturaPlaylistType_1.KalturaPlaylistType, subType: 'KalturaPlaylistType' },
            playlistContent: { type: 's' },
            detailed: { type: 's' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' }
        });
        return result;
    };
    return PlaylistExecuteFromContentAction;
}(kaltura_request_1.KalturaRequest));
exports.PlaylistExecuteFromContentAction = PlaylistExecuteFromContentAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5bGlzdEV4ZWN1dGVGcm9tQ29udGVudEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsdURBQXNEO0FBRXRELDZEQUE0RDtBQUM1RCwyREFBMEQ7QUFDMUQsc0RBQXdFO0FBU3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXNELDREQUFrQztJQU9wRiwwQ0FBWSxJQUEyQztlQUVuRCxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRyxtQ0FBZ0IsRUFBRyxDQUFDO0lBQ3JILENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxVQUFVLEVBQUU7WUFDMUQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsb0JBQW9CLEVBQUU7WUFDdkQsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx5Q0FBbUIsRUFBRSxPQUFPLEVBQUcscUJBQXFCLEVBQUU7WUFDekcsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLEtBQUssRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsdUNBQWtCLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1NBQ3RGLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCx1Q0FBQztBQUFELENBNUJBLEFBNEJDLENBNUJxRCxnQ0FBYyxHQTRCbkU7QUE1QlksNEVBQWdDIiwiZmlsZSI6ImFwaS90eXBlcy9QbGF5bGlzdEV4ZWN1dGVGcm9tQ29udGVudEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQmFzZUVudHJ5IH0gZnJvbSAnLi9LYWx0dXJhQmFzZUVudHJ5JztcblxuaW1wb3J0IHsgS2FsdHVyYVBsYXlsaXN0VHlwZSB9IGZyb20gJy4vS2FsdHVyYVBsYXlsaXN0VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyUGFnZXIgfSBmcm9tICcuL0thbHR1cmFGaWx0ZXJQYWdlcic7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBQbGF5bGlzdEV4ZWN1dGVGcm9tQ29udGVudEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBwbGF5bGlzdFR5cGUgOiBLYWx0dXJhUGxheWxpc3RUeXBlO1xuXHRwbGF5bGlzdENvbnRlbnQgOiBzdHJpbmc7XG5cdGRldGFpbGVkPyA6IHN0cmluZztcblx0cGFnZXI/IDogS2FsdHVyYUZpbHRlclBhZ2VyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAncGxheWxpc3QnIGFjdGlvbiAnZXhlY3V0ZUZyb21Db250ZW50Jy5cbiAqXG4gKiBVc2FnZTogUmV0cmlldmUgcGxheWxpc3QgZm9yIHBsYXlpbmcgcHVycG9zZSwgYmFzZWQgb24gY29udGVudFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFCYXNlRW50cnlbXVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgUGxheWxpc3RFeGVjdXRlRnJvbUNvbnRlbnRBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhQmFzZUVudHJ5W10+IHtcblxuICAgIHBsYXlsaXN0VHlwZSA6IEthbHR1cmFQbGF5bGlzdFR5cGU7XG5cdHBsYXlsaXN0Q29udGVudCA6IHN0cmluZztcblx0ZGV0YWlsZWQgOiBzdHJpbmc7XG5cdHBhZ2VyIDogS2FsdHVyYUZpbHRlclBhZ2VyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IFBsYXlsaXN0RXhlY3V0ZUZyb21Db250ZW50QWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnYScsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQmFzZUVudHJ5JywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFCYXNlRW50cnkgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3BsYXlsaXN0JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhlY3V0ZUZyb21Db250ZW50JyB9LFxuXHRcdFx0XHRwbGF5bGlzdFR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUGxheWxpc3RUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFQbGF5bGlzdFR5cGUnIH0sXG5cdFx0XHRcdHBsYXlsaXN0Q29udGVudCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRkZXRhaWxlZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwYWdlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUZpbHRlclBhZ2VyLCBzdWJUeXBlIDogJ0thbHR1cmFGaWx0ZXJQYWdlcicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
