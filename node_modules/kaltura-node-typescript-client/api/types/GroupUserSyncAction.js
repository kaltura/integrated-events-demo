"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupUserSyncAction = void 0;
var tslib_1 = require("tslib");
var KalturaBulkUpload_1 = require("./KalturaBulkUpload");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'groupUser' action 'sync'.
 *
 * Usage: sync by userId and groupIds
 *
 * Server response type:         KalturaBulkUpload
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var GroupUserSyncAction = /** @class */ (function (_super) {
    tslib_1.__extends(GroupUserSyncAction, _super);
    function GroupUserSyncAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaBulkUpload', responseConstructor: KalturaBulkUpload_1.KalturaBulkUpload }) || this;
        if (typeof _this.removeFromExistingGroups === 'undefined')
            _this.removeFromExistingGroups = true;
        if (typeof _this.createNewGroups === 'undefined')
            _this.createNewGroups = true;
        return _this;
    }
    GroupUserSyncAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'groupuser' },
            action: { type: 'c', default: 'sync' },
            userId: { type: 's' },
            groupIds: { type: 's' },
            removeFromExistingGroups: { type: 'b' },
            createNewGroups: { type: 'b' }
        });
        return result;
    };
    return GroupUserSyncAction;
}(kaltura_request_1.KalturaRequest));
exports.GroupUserSyncAction = GroupUserSyncAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Hcm91cFVzZXJTeW5jQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSx5REFBd0Q7QUFFeEQsc0RBQXdFO0FBU3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXlDLCtDQUFpQztJQU90RSw2QkFBWSxJQUE4QjtRQUExQyxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLG1CQUFtQixFQUFFLG1CQUFtQixFQUFHLHFDQUFpQixFQUFHLENBQUMsU0FHdEg7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLHdCQUF3QixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsd0JBQXdCLEdBQUcsSUFBSSxDQUFDO1FBQ3JHLElBQUksT0FBTyxLQUFJLENBQUMsZUFBZSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQzs7SUFDM0UsQ0FBQztJQUVTLDBDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUMzRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxNQUFNLEVBQUU7WUFDekMsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1NBQ3ZCLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCwwQkFBQztBQUFELENBOUJBLEFBOEJDLENBOUJ3QyxnQ0FBYyxHQThCdEQ7QUE5Qlksa0RBQW1CIiwiZmlsZSI6ImFwaS90eXBlcy9Hcm91cFVzZXJTeW5jQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFCdWxrVXBsb2FkIH0gZnJvbSAnLi9LYWx0dXJhQnVsa1VwbG9hZCc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEdyb3VwVXNlclN5bmNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgdXNlcklkIDogc3RyaW5nO1xuXHRncm91cElkcz8gOiBzdHJpbmc7XG5cdHJlbW92ZUZyb21FeGlzdGluZ0dyb3Vwcz8gOiBib29sZWFuO1xuXHRjcmVhdGVOZXdHcm91cHM/IDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2dyb3VwVXNlcicgYWN0aW9uICdzeW5jJy5cbiAqXG4gKiBVc2FnZTogc3luYyBieSB1c2VySWQgYW5kIGdyb3VwSWRzXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUJ1bGtVcGxvYWRcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwVXNlclN5bmNBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhQnVsa1VwbG9hZD4ge1xuXG4gICAgdXNlcklkIDogc3RyaW5nO1xuXHRncm91cElkcyA6IHN0cmluZztcblx0cmVtb3ZlRnJvbUV4aXN0aW5nR3JvdXBzIDogYm9vbGVhbjtcblx0Y3JlYXRlTmV3R3JvdXBzIDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBHcm91cFVzZXJTeW5jQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQnVsa1VwbG9hZCcsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQnVsa1VwbG9hZCAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5yZW1vdmVGcm9tRXhpc3RpbmdHcm91cHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnJlbW92ZUZyb21FeGlzdGluZ0dyb3VwcyA9IHRydWU7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmNyZWF0ZU5ld0dyb3VwcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuY3JlYXRlTmV3R3JvdXBzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdncm91cHVzZXInIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdzeW5jJyB9LFxuXHRcdFx0XHR1c2VySWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0Z3JvdXBJZHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cmVtb3ZlRnJvbUV4aXN0aW5nR3JvdXBzIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdGNyZWF0ZU5ld0dyb3VwcyA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
