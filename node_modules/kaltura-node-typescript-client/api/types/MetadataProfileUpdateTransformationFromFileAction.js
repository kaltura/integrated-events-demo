"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataProfileUpdateTransformationFromFileAction = void 0;
var tslib_1 = require("tslib");
var KalturaMetadataProfile_1 = require("./KalturaMetadataProfile");
var kaltura_upload_request_1 = require("../kaltura-upload-request");
/**
 * Build request payload for service 'metadataProfile' action 'updateTransformationFromFile'.
 *
 * Usage: Update an existing metadata object XSLT file
 *
 * Server response type:         KalturaMetadataProfile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaUploadRequest
 */
var MetadataProfileUpdateTransformationFromFileAction = /** @class */ (function (_super) {
    tslib_1.__extends(MetadataProfileUpdateTransformationFromFileAction, _super);
    function MetadataProfileUpdateTransformationFromFileAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaMetadataProfile', responseConstructor: KalturaMetadataProfile_1.KalturaMetadataProfile }) || this;
    }
    MetadataProfileUpdateTransformationFromFileAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'metadata_metadataprofile' },
            action: { type: 'c', default: 'updateTransformationFromFile' },
            id: { type: 'n' },
            xsltFile: { type: 'f' }
        });
        return result;
    };
    return MetadataProfileUpdateTransformationFromFileAction;
}(kaltura_upload_request_1.KalturaUploadRequest));
exports.MetadataProfileUpdateTransformationFromFileAction = MetadataProfileUpdateTransformationFromFileAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZXRhZGF0YVByb2ZpbGVVcGRhdGVUcmFuc2Zvcm1hdGlvbkZyb21GaWxlQWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxtRUFBa0U7QUFFbEUsb0VBQTJGO0FBTzNGOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXVFLDZFQUE0QztJQUsvRywyREFBWSxJQUE0RDtlQUVwRSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyx3QkFBd0IsRUFBRSxtQkFBbUIsRUFBRywrQ0FBc0IsRUFBRyxDQUFDO0lBQ2pJLENBQUM7SUFFUyx3RUFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUMxRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUNqRSxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDaEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHdEQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QnNFLDZDQUFvQixHQXdCMUY7QUF4QlksOEdBQWlEIiwiZmlsZSI6ImFwaS90eXBlcy9NZXRhZGF0YVByb2ZpbGVVcGRhdGVUcmFuc2Zvcm1hdGlvbkZyb21GaWxlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFNZXRhZGF0YVByb2ZpbGUgfSBmcm9tICcuL0thbHR1cmFNZXRhZGF0YVByb2ZpbGUnO1xuXG5pbXBvcnQgeyBLYWx0dXJhVXBsb2FkUmVxdWVzdCwgS2FsdHVyYVVwbG9hZFJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS11cGxvYWQtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFQcm9maWxlVXBkYXRlVHJhbnNmb3JtYXRpb25Gcm9tRmlsZUFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVVwbG9hZFJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IG51bWJlcjtcblx0eHNsdEZpbGUgOiBGaWxlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnbWV0YWRhdGFQcm9maWxlJyBhY3Rpb24gJ3VwZGF0ZVRyYW5zZm9ybWF0aW9uRnJvbUZpbGUnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgYW4gZXhpc3RpbmcgbWV0YWRhdGEgb2JqZWN0IFhTTFQgZmlsZVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFNZXRhZGF0YVByb2ZpbGVcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVVwbG9hZFJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIE1ldGFkYXRhUHJvZmlsZVVwZGF0ZVRyYW5zZm9ybWF0aW9uRnJvbUZpbGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhVXBsb2FkUmVxdWVzdDxLYWx0dXJhTWV0YWRhdGFQcm9maWxlPiB7XG5cbiAgICBpZCA6IG51bWJlcjtcblx0eHNsdEZpbGUgOiBGaWxlO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IE1ldGFkYXRhUHJvZmlsZVVwZGF0ZVRyYW5zZm9ybWF0aW9uRnJvbUZpbGVBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFNZXRhZGF0YVByb2ZpbGUnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYU1ldGFkYXRhUHJvZmlsZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbWV0YWRhdGFfbWV0YWRhdGFwcm9maWxlJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlVHJhbnNmb3JtYXRpb25Gcm9tRmlsZScgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0eHNsdEZpbGUgOiB7IHR5cGUgOiAnZicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
