"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaVendorCaptionsCatalogItemBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaCatalogItemLanguage_1 = require("./KalturaCatalogItemLanguage");
var KalturaVendorCatalogItemOutputFormat_1 = require("./KalturaVendorCatalogItemOutputFormat");
var KalturaVendorCatalogItemFilter_1 = require("./KalturaVendorCatalogItemFilter");
var KalturaVendorCaptionsCatalogItemBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaVendorCaptionsCatalogItemBaseFilter, _super);
    function KalturaVendorCaptionsCatalogItemBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaVendorCaptionsCatalogItemBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaVendorCaptionsCatalogItemBaseFilter' },
            sourceLanguageEqual: { type: 'es', subTypeConstructor: KalturaCatalogItemLanguage_1.KalturaCatalogItemLanguage, subType: 'KalturaCatalogItemLanguage' },
            sourceLanguageIn: { type: 's' },
            outputFormatEqual: { type: 'en', subTypeConstructor: KalturaVendorCatalogItemOutputFormat_1.KalturaVendorCatalogItemOutputFormat, subType: 'KalturaVendorCatalogItemOutputFormat' },
            outputFormatIn: { type: 's' }
        });
        return result;
    };
    return KalturaVendorCaptionsCatalogItemBaseFilter;
}(KalturaVendorCatalogItemFilter_1.KalturaVendorCatalogItemFilter));
exports.KalturaVendorCaptionsCatalogItemBaseFilter = KalturaVendorCaptionsCatalogItemBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaVendorCaptionsCatalogItemBaseFilter', KalturaVendorCaptionsCatalogItemBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhVmVuZG9yQ2FwdGlvbnNDYXRhbG9nSXRlbUJhc2VGaWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwyRUFBMEU7QUFDMUUsK0ZBQThGO0FBQzlGLG1GQUFzSDtBQVV0SDtJQUFnRSxzRUFBOEI7SUFPMUYsb0RBQVksSUFBc0Q7ZUFFOUQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLGlFQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDRDQUE0QyxFQUFFO1lBQy9GLG1CQUFtQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1REFBMEIsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDOUgsZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ2pDLGlCQUFpQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyRUFBb0MsRUFBRSxPQUFPLEVBQUcsc0NBQXNDLEVBQUU7WUFDaEosY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN0QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsaURBQUM7QUFBRCxDQTNCQSxBQTJCQyxDQTNCK0QsK0RBQThCLEdBMkI3RjtBQTNCWSxnR0FBMEM7QUE2QnZELDJDQUFtQixDQUFDLFlBQVksQ0FBQyw0Q0FBNEMsRUFBQywwQ0FBMEMsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhVmVuZG9yQ2FwdGlvbnNDYXRhbG9nSXRlbUJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQ2F0YWxvZ0l0ZW1MYW5ndWFnZSB9IGZyb20gJy4vS2FsdHVyYUNhdGFsb2dJdGVtTGFuZ3VhZ2UnO1xuaW1wb3J0IHsgS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtT3V0cHV0Rm9ybWF0IH0gZnJvbSAnLi9LYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1PdXRwdXRGb3JtYXQnO1xuaW1wb3J0IHsgS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtRmlsdGVyLCBLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1GaWx0ZXJBcmdzIH0gZnJvbSAnLi9LYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1GaWx0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFWZW5kb3JDYXB0aW9uc0NhdGFsb2dJdGVtQmFzZUZpbHRlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYVZlbmRvckNhdGFsb2dJdGVtRmlsdGVyQXJncyB7XG4gICAgc291cmNlTGFuZ3VhZ2VFcXVhbD8gOiBLYWx0dXJhQ2F0YWxvZ0l0ZW1MYW5ndWFnZTtcblx0c291cmNlTGFuZ3VhZ2VJbj8gOiBzdHJpbmc7XG5cdG91dHB1dEZvcm1hdEVxdWFsPyA6IEthbHR1cmFWZW5kb3JDYXRhbG9nSXRlbU91dHB1dEZvcm1hdDtcblx0b3V0cHV0Rm9ybWF0SW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhVmVuZG9yQ2FwdGlvbnNDYXRhbG9nSXRlbUJhc2VGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1GaWx0ZXIge1xuXG4gICAgc291cmNlTGFuZ3VhZ2VFcXVhbCA6IEthbHR1cmFDYXRhbG9nSXRlbUxhbmd1YWdlO1xuXHRzb3VyY2VMYW5ndWFnZUluIDogc3RyaW5nO1xuXHRvdXRwdXRGb3JtYXRFcXVhbCA6IEthbHR1cmFWZW5kb3JDYXRhbG9nSXRlbU91dHB1dEZvcm1hdDtcblx0b3V0cHV0Rm9ybWF0SW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFWZW5kb3JDYXB0aW9uc0NhdGFsb2dJdGVtQmFzZUZpbHRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhVmVuZG9yQ2FwdGlvbnNDYXRhbG9nSXRlbUJhc2VGaWx0ZXInIH0sXG5cdFx0XHRcdHNvdXJjZUxhbmd1YWdlRXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQ2F0YWxvZ0l0ZW1MYW5ndWFnZSwgc3ViVHlwZSA6ICdLYWx0dXJhQ2F0YWxvZ0l0ZW1MYW5ndWFnZScgfSxcblx0XHRcdFx0c291cmNlTGFuZ3VhZ2VJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRvdXRwdXRGb3JtYXRFcXVhbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFWZW5kb3JDYXRhbG9nSXRlbU91dHB1dEZvcm1hdCwgc3ViVHlwZSA6ICdLYWx0dXJhVmVuZG9yQ2F0YWxvZ0l0ZW1PdXRwdXRGb3JtYXQnIH0sXG5cdFx0XHRcdG91dHB1dEZvcm1hdEluIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhVmVuZG9yQ2FwdGlvbnNDYXRhbG9nSXRlbUJhc2VGaWx0ZXInLEthbHR1cmFWZW5kb3JDYXB0aW9uc0NhdGFsb2dJdGVtQmFzZUZpbHRlcik7XG4iXX0=
