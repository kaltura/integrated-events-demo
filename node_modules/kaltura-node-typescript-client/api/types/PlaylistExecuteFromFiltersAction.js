"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlaylistExecuteFromFiltersAction = void 0;
var tslib_1 = require("tslib");
var KalturaBaseEntry_1 = require("./KalturaBaseEntry");
var KalturaMediaEntryFilterForPlaylist_1 = require("./KalturaMediaEntryFilterForPlaylist");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'playlist' action 'executeFromFilters'.
 *
 * Usage: Retrieve playlist for playing purpose, based on media entry filters
 *
 * Server response type:         KalturaBaseEntry[]
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PlaylistExecuteFromFiltersAction = /** @class */ (function (_super) {
    tslib_1.__extends(PlaylistExecuteFromFiltersAction, _super);
    function PlaylistExecuteFromFiltersAction(data) {
        var _this = _super.call(this, data, { responseType: 'a', responseSubType: 'KalturaBaseEntry', responseConstructor: KalturaBaseEntry_1.KalturaBaseEntry }) || this;
        if (typeof _this.filters === 'undefined')
            _this.filters = [];
        if (typeof _this.detailed === 'undefined')
            _this.detailed = "1";
        return _this;
    }
    PlaylistExecuteFromFiltersAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'playlist' },
            action: { type: 'c', default: 'executeFromFilters' },
            filters: { type: 'a', subTypeConstructor: KalturaMediaEntryFilterForPlaylist_1.KalturaMediaEntryFilterForPlaylist, subType: 'KalturaMediaEntryFilterForPlaylist' },
            totalResults: { type: 'n' },
            detailed: { type: 's' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' }
        });
        return result;
    };
    return PlaylistExecuteFromFiltersAction;
}(kaltura_request_1.KalturaRequest));
exports.PlaylistExecuteFromFiltersAction = PlaylistExecuteFromFiltersAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QbGF5bGlzdEV4ZWN1dGVGcm9tRmlsdGVyc0FjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsdURBQXNEO0FBRXRELDJGQUEwRjtBQUMxRiwyREFBMEQ7QUFDMUQsc0RBQXdFO0FBU3hFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXNELDREQUFrQztJQU9wRiwwQ0FBWSxJQUEyQztRQUF2RCxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGtCQUFrQixFQUFFLG1CQUFtQixFQUFHLG1DQUFnQixFQUFHLENBQUMsU0FHcEg7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLE9BQU8sS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakUsSUFBSSxPQUFPLEtBQUksQ0FBQyxRQUFRLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDOztJQUM1RCxDQUFDO0lBRVMsdURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsVUFBVSxFQUFFO1lBQzFELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLG9CQUFvQixFQUFFO1lBQ3ZELE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsdUVBQWtDLEVBQUUsT0FBTyxFQUFHLG9DQUFvQyxFQUFFO1lBQ2pJLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtTQUN0RixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQTlCQSxBQThCQyxDQTlCcUQsZ0NBQWMsR0E4Qm5FO0FBOUJZLDRFQUFnQyIsImZpbGUiOiJhcGkvdHlwZXMvUGxheWxpc3RFeGVjdXRlRnJvbUZpbHRlcnNBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUJhc2VFbnRyeSB9IGZyb20gJy4vS2FsdHVyYUJhc2VFbnRyeSc7XG5cbmltcG9ydCB7IEthbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3QgfSBmcm9tICcuL0thbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3QnO1xuaW1wb3J0IHsgS2FsdHVyYUZpbHRlclBhZ2VyIH0gZnJvbSAnLi9LYWx0dXJhRmlsdGVyUGFnZXInO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxheWxpc3RFeGVjdXRlRnJvbUZpbHRlcnNBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZmlsdGVycyA6IEthbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3RbXTtcblx0dG90YWxSZXN1bHRzIDogbnVtYmVyO1xuXHRkZXRhaWxlZD8gOiBzdHJpbmc7XG5cdHBhZ2VyPyA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3BsYXlsaXN0JyBhY3Rpb24gJ2V4ZWN1dGVGcm9tRmlsdGVycycuXG4gKlxuICogVXNhZ2U6IFJldHJpZXZlIHBsYXlsaXN0IGZvciBwbGF5aW5nIHB1cnBvc2UsIGJhc2VkIG9uIG1lZGlhIGVudHJ5IGZpbHRlcnNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQmFzZUVudHJ5W11cbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFBsYXlsaXN0RXhlY3V0ZUZyb21GaWx0ZXJzQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUJhc2VFbnRyeVtdPiB7XG5cbiAgICBmaWx0ZXJzIDogS2FsdHVyYU1lZGlhRW50cnlGaWx0ZXJGb3JQbGF5bGlzdFtdO1xuXHR0b3RhbFJlc3VsdHMgOiBudW1iZXI7XG5cdGRldGFpbGVkIDogc3RyaW5nO1xuXHRwYWdlciA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBQbGF5bGlzdEV4ZWN1dGVGcm9tRmlsdGVyc0FjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ2EnLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUJhc2VFbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhQmFzZUVudHJ5ICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmZpbHRlcnMgPT09ICd1bmRlZmluZWQnKSB0aGlzLmZpbHRlcnMgPSBbXTtcblx0XHRpZiAodHlwZW9mIHRoaXMuZGV0YWlsZWQgPT09ICd1bmRlZmluZWQnKSB0aGlzLmRldGFpbGVkID0gXCIxXCI7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncGxheWxpc3QnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdleGVjdXRlRnJvbUZpbHRlcnMnIH0sXG5cdFx0XHRcdGZpbHRlcnMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFNZWRpYUVudHJ5RmlsdGVyRm9yUGxheWxpc3QsIHN1YlR5cGUgOiAnS2FsdHVyYU1lZGlhRW50cnlGaWx0ZXJGb3JQbGF5bGlzdCcgfSxcblx0XHRcdFx0dG90YWxSZXN1bHRzIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGRldGFpbGVkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhZ2VyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRmlsdGVyUGFnZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUZpbHRlclBhZ2VyJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
