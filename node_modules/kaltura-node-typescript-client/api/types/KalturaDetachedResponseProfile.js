"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDetachedResponseProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaResponseProfileType_1 = require("./KalturaResponseProfileType");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var KalturaResponseProfileMapping_1 = require("./KalturaResponseProfileMapping");
var KalturaBaseResponseProfile_1 = require("./KalturaBaseResponseProfile");
var KalturaDetachedResponseProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDetachedResponseProfile, _super);
    function KalturaDetachedResponseProfile(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.relatedProfiles === 'undefined')
            _this.relatedProfiles = [];
        if (typeof _this.mappings === 'undefined')
            _this.mappings = [];
        return _this;
    }
    KalturaDetachedResponseProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDetachedResponseProfile' },
            name: { type: 's' },
            type: { type: 'en', subTypeConstructor: KalturaResponseProfileType_1.KalturaResponseProfileType, subType: 'KalturaResponseProfileType' },
            fields: { type: 's' },
            filter: { type: 'o', subTypeConstructor: KalturaRelatedFilter_1.KalturaRelatedFilter, subType: 'KalturaRelatedFilter' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' },
            relatedProfiles: { type: 'a', subTypeConstructor: KalturaDetachedResponseProfile, subType: 'KalturaDetachedResponseProfile' },
            mappings: { type: 'a', subTypeConstructor: KalturaResponseProfileMapping_1.KalturaResponseProfileMapping, subType: 'KalturaResponseProfileMapping' }
        });
        return result;
    };
    return KalturaDetachedResponseProfile;
}(KalturaBaseResponseProfile_1.KalturaBaseResponseProfile));
exports.KalturaDetachedResponseProfile = KalturaDetachedResponseProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDetachedResponseProfile', KalturaDetachedResponseProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwyRUFBMEU7QUFDMUUsK0RBQThEO0FBQzlELDJEQUEwRDtBQUMxRCxpRkFBZ0Y7QUFDaEYsMkVBQTBHO0FBYTFHO0lBQW9ELDBEQUEwQjtJQVUxRSx3Q0FBWSxJQUEwQztRQUF0RCxZQUVJLGtCQUFNLElBQUksQ0FBQyxTQUdkO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxlQUFlLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQ2pGLElBQUksT0FBTyxLQUFJLENBQUMsUUFBUSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQzs7SUFDM0QsQ0FBQztJQUVTLHFEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ25GLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1REFBMEIsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0csTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN2QixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDJDQUFvQixFQUFFLE9BQU8sRUFBRyxzQkFBc0IsRUFBRTtZQUNwRyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtZQUMvRixlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDhCQUE4QixFQUFFLE9BQU8sRUFBRyxnQ0FBZ0MsRUFBRTtZQUNqSSxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZEQUE2QixFQUFFLE9BQU8sRUFBRywrQkFBK0IsRUFBRTtTQUMvRyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wscUNBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5DbUQsdURBQTBCLEdBbUM3RTtBQW5DWSx3RUFBOEI7QUFxQzNDLDJDQUFtQixDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsRUFBQyw4QkFBOEIsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVzcG9uc2VQcm9maWxlVHlwZSB9IGZyb20gJy4vS2FsdHVyYVJlc3BvbnNlUHJvZmlsZVR5cGUnO1xuaW1wb3J0IHsgS2FsdHVyYVJlbGF0ZWRGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFSZWxhdGVkRmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFGaWx0ZXJQYWdlciB9IGZyb20gJy4vS2FsdHVyYUZpbHRlclBhZ2VyJztcbmltcG9ydCB7IEthbHR1cmFSZXNwb25zZVByb2ZpbGVNYXBwaW5nIH0gZnJvbSAnLi9LYWx0dXJhUmVzcG9uc2VQcm9maWxlTWFwcGluZyc7XG5pbXBvcnQgeyBLYWx0dXJhQmFzZVJlc3BvbnNlUHJvZmlsZSwgS2FsdHVyYUJhc2VSZXNwb25zZVByb2ZpbGVBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQmFzZVJlc3BvbnNlUHJvZmlsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYURldGFjaGVkUmVzcG9uc2VQcm9maWxlQXJncyAgZXh0ZW5kcyBLYWx0dXJhQmFzZVJlc3BvbnNlUHJvZmlsZUFyZ3Mge1xuICAgIG5hbWU/IDogc3RyaW5nO1xuXHR0eXBlPyA6IEthbHR1cmFSZXNwb25zZVByb2ZpbGVUeXBlO1xuXHRmaWVsZHM/IDogc3RyaW5nO1xuXHRmaWx0ZXI/IDogS2FsdHVyYVJlbGF0ZWRGaWx0ZXI7XG5cdHBhZ2VyPyA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcblx0cmVsYXRlZFByb2ZpbGVzPyA6IEthbHR1cmFEZXRhY2hlZFJlc3BvbnNlUHJvZmlsZVtdO1xuXHRtYXBwaW5ncz8gOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlTWFwcGluZ1tdO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGUgZXh0ZW5kcyBLYWx0dXJhQmFzZVJlc3BvbnNlUHJvZmlsZSB7XG5cbiAgICBuYW1lIDogc3RyaW5nO1xuXHR0eXBlIDogS2FsdHVyYVJlc3BvbnNlUHJvZmlsZVR5cGU7XG5cdGZpZWxkcyA6IHN0cmluZztcblx0ZmlsdGVyIDogS2FsdHVyYVJlbGF0ZWRGaWx0ZXI7XG5cdHBhZ2VyIDogS2FsdHVyYUZpbHRlclBhZ2VyO1xuXHRyZWxhdGVkUHJvZmlsZXMgOiBLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGVbXTtcblx0bWFwcGluZ3MgOiBLYWx0dXJhUmVzcG9uc2VQcm9maWxlTWFwcGluZ1tdO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGVBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5yZWxhdGVkUHJvZmlsZXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnJlbGF0ZWRQcm9maWxlcyA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5tYXBwaW5ncyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMubWFwcGluZ3MgPSBbXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGUnIH0sXG5cdFx0XHRcdG5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dHlwZSA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXNwb25zZVByb2ZpbGVUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFSZXNwb25zZVByb2ZpbGVUeXBlJyB9LFxuXHRcdFx0XHRmaWVsZHMgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZmlsdGVyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhUmVsYXRlZEZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhUmVsYXRlZEZpbHRlcicgfSxcblx0XHRcdFx0cGFnZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFGaWx0ZXJQYWdlciwgc3ViVHlwZSA6ICdLYWx0dXJhRmlsdGVyUGFnZXInIH0sXG5cdFx0XHRcdHJlbGF0ZWRQcm9maWxlcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYURldGFjaGVkUmVzcG9uc2VQcm9maWxlLCBzdWJUeXBlIDogJ0thbHR1cmFEZXRhY2hlZFJlc3BvbnNlUHJvZmlsZScgfSxcblx0XHRcdFx0bWFwcGluZ3MgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXNwb25zZVByb2ZpbGVNYXBwaW5nLCBzdWJUeXBlIDogJ0thbHR1cmFSZXNwb25zZVByb2ZpbGVNYXBwaW5nJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYURldGFjaGVkUmVzcG9uc2VQcm9maWxlJyxLYWx0dXJhRGV0YWNoZWRSZXNwb25zZVByb2ZpbGUpO1xuIl19
