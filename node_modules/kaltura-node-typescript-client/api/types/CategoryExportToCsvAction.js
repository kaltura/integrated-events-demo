"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoryExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaCategoryFilter_1 = require("./KalturaCategoryFilter");
var KalturaCsvAdditionalFieldInfo_1 = require("./KalturaCsvAdditionalFieldInfo");
var KalturaKeyValue_1 = require("./KalturaKeyValue");
var KalturaExportToCsvOptions_1 = require("./KalturaExportToCsvOptions");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'category' action 'exportToCsv'.
 *
 * Usage: Creates a batch job that sends an email with a link to download a CSV containing a list of categories
 *
 * Server response type:         string
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var CategoryExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(CategoryExportToCsvAction, _super);
    function CategoryExportToCsvAction(data) {
        var _this = _super.call(this, data, { responseType: 's', responseSubType: '', responseConstructor: null }) || this;
        if (typeof _this.additionalFields === 'undefined')
            _this.additionalFields = [];
        if (typeof _this.mappedFields === 'undefined')
            _this.mappedFields = [];
        return _this;
    }
    CategoryExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'category' },
            action: { type: 'c', default: 'exportToCsv' },
            filter: { type: 'o', subTypeConstructor: KalturaCategoryFilter_1.KalturaCategoryFilter, subType: 'KalturaCategoryFilter' },
            metadataProfileId: { type: 'n' },
            additionalFields: { type: 'a', subTypeConstructor: KalturaCsvAdditionalFieldInfo_1.KalturaCsvAdditionalFieldInfo, subType: 'KalturaCsvAdditionalFieldInfo' },
            mappedFields: { type: 'a', subTypeConstructor: KalturaKeyValue_1.KalturaKeyValue, subType: 'KalturaKeyValue' },
            options: { type: 'o', subTypeConstructor: KalturaExportToCsvOptions_1.KalturaExportToCsvOptions, subType: 'KalturaExportToCsvOptions' }
        });
        return result;
    };
    return CategoryExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.CategoryExportToCsvAction = CategoryExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9DYXRlZ29yeUV4cG9ydFRvQ3N2QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFJQSxpRUFBZ0U7QUFDaEUsaUZBQWdGO0FBQ2hGLHFEQUFvRDtBQUNwRCx5RUFBd0U7QUFDeEUsc0RBQXdFO0FBVXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQStDLHFEQUFzQjtJQVFqRSxtQ0FBWSxJQUFxQztRQUFqRCxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLEVBQUUsRUFBRSxtQkFBbUIsRUFBRyxJQUFJLEVBQUUsQ0FBQyxTQUd2RjtRQUZHLElBQUksT0FBTyxLQUFJLENBQUMsZ0JBQWdCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDbkYsSUFBSSxPQUFPLEtBQUksQ0FBQyxZQUFZLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDOztJQUNuRSxDQUFDO0lBRVMsZ0RBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsVUFBVSxFQUFFO1lBQzFELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUNoRCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtZQUN0RyxpQkFBaUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDbEMsZ0JBQWdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLDZEQUE2QixFQUFFLE9BQU8sRUFBRywrQkFBK0IsRUFBRTtZQUNoSSxZQUFZLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlDQUFlLEVBQUUsT0FBTyxFQUFHLGlCQUFpQixFQUFFO1lBQ2hHLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcscURBQXlCLEVBQUUsT0FBTyxFQUFHLDJCQUEyQixFQUFFO1NBQ3RHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxnQ0FBQztBQUFELENBaENBLEFBZ0NDLENBaEM4QyxnQ0FBYyxHQWdDNUQ7QUFoQ1ksOERBQXlCIiwiZmlsZSI6ImFwaS90eXBlcy9DYXRlZ29yeUV4cG9ydFRvQ3N2QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcblxuXG5pbXBvcnQgeyBLYWx0dXJhQ2F0ZWdvcnlGaWx0ZXIgfSBmcm9tICcuL0thbHR1cmFDYXRlZ29yeUZpbHRlcic7XG5pbXBvcnQgeyBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mbyB9IGZyb20gJy4vS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8nO1xuaW1wb3J0IHsgS2FsdHVyYUtleVZhbHVlIH0gZnJvbSAnLi9LYWx0dXJhS2V5VmFsdWUnO1xuaW1wb3J0IHsgS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucyB9IGZyb20gJy4vS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBDYXRlZ29yeUV4cG9ydFRvQ3N2QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGZpbHRlcj8gOiBLYWx0dXJhQ2F0ZWdvcnlGaWx0ZXI7XG5cdG1ldGFkYXRhUHJvZmlsZUlkPyA6IG51bWJlcjtcblx0YWRkaXRpb25hbEZpZWxkcz8gOiBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mb1tdO1xuXHRtYXBwZWRGaWVsZHM/IDogS2FsdHVyYUtleVZhbHVlW107XG5cdG9wdGlvbnM/IDogS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2NhdGVnb3J5JyBhY3Rpb24gJ2V4cG9ydFRvQ3N2Jy5cbiAqXG4gKiBVc2FnZTogQ3JlYXRlcyBhIGJhdGNoIGpvYiB0aGF0IHNlbmRzIGFuIGVtYWlsIHdpdGggYSBsaW5rIHRvIGRvd25sb2FkIGEgQ1NWIGNvbnRhaW5pbmcgYSBsaXN0IG9mIGNhdGVnb3JpZXNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBzdHJpbmdcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIENhdGVnb3J5RXhwb3J0VG9Dc3ZBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxzdHJpbmc+IHtcblxuICAgIGZpbHRlciA6IEthbHR1cmFDYXRlZ29yeUZpbHRlcjtcblx0bWV0YWRhdGFQcm9maWxlSWQgOiBudW1iZXI7XG5cdGFkZGl0aW9uYWxGaWVsZHMgOiBLYWx0dXJhQ3N2QWRkaXRpb25hbEZpZWxkSW5mb1tdO1xuXHRtYXBwZWRGaWVsZHMgOiBLYWx0dXJhS2V5VmFsdWVbXTtcblx0b3B0aW9ucyA6IEthbHR1cmFFeHBvcnRUb0Nzdk9wdGlvbnM7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IENhdGVnb3J5RXhwb3J0VG9Dc3ZBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdzJywgcmVzcG9uc2VTdWJUeXBlIDogJycsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBudWxsIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuYWRkaXRpb25hbEZpZWxkcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuYWRkaXRpb25hbEZpZWxkcyA9IFtdO1xuXHRcdGlmICh0eXBlb2YgdGhpcy5tYXBwZWRGaWVsZHMgPT09ICd1bmRlZmluZWQnKSB0aGlzLm1hcHBlZEZpZWxkcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2NhdGVnb3J5JyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhwb3J0VG9Dc3YnIH0sXG5cdFx0XHRcdGZpbHRlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNhdGVnb3J5RmlsdGVyLCBzdWJUeXBlIDogJ0thbHR1cmFDYXRlZ29yeUZpbHRlcicgfSxcblx0XHRcdFx0bWV0YWRhdGFQcm9maWxlSWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YWRkaXRpb25hbEZpZWxkcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8sIHN1YlR5cGUgOiAnS2FsdHVyYUNzdkFkZGl0aW9uYWxGaWVsZEluZm8nIH0sXG5cdFx0XHRcdG1hcHBlZEZpZWxkcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUtleVZhbHVlLCBzdWJUeXBlIDogJ0thbHR1cmFLZXlWYWx1ZScgfSxcblx0XHRcdFx0b3B0aW9ucyA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUV4cG9ydFRvQ3N2T3B0aW9ucywgc3ViVHlwZSA6ICdLYWx0dXJhRXhwb3J0VG9Dc3ZPcHRpb25zJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
