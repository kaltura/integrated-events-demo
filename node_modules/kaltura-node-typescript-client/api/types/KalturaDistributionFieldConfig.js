"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaDistributionFieldConfig = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionFieldRequiredStatus_1 = require("./KalturaDistributionFieldRequiredStatus");
var KalturaString_1 = require("./KalturaString");
var kaltura_object_base_1 = require("../kaltura-object-base");
var KalturaDistributionFieldConfig = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaDistributionFieldConfig, _super);
    function KalturaDistributionFieldConfig(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.updateParams === 'undefined')
            _this.updateParams = [];
        return _this;
    }
    KalturaDistributionFieldConfig.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaDistributionFieldConfig' },
            fieldName: { type: 's' },
            userFriendlyFieldName: { type: 's' },
            entryMrssXslt: { type: 's' },
            isRequired: { type: 'en', subTypeConstructor: KalturaDistributionFieldRequiredStatus_1.KalturaDistributionFieldRequiredStatus, subType: 'KalturaDistributionFieldRequiredStatus' },
            type: { type: 's' },
            updateOnChange: { type: 'b' },
            updateParams: { type: 'a', subTypeConstructor: KalturaString_1.KalturaString, subType: 'KalturaString' },
            isDefault: { type: 'b', readOnly: true },
            triggerDeleteOnError: { type: 'b' }
        });
        return result;
    };
    return KalturaDistributionFieldConfig;
}(kaltura_object_base_1.KalturaObjectBase));
exports.KalturaDistributionFieldConfig = KalturaDistributionFieldConfig;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaDistributionFieldConfig', KalturaDistributionFieldConfig);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhRGlzdHJpYnV0aW9uRmllbGRDb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCxtR0FBa0c7QUFDbEcsaURBQWdEO0FBQ2hELDhEQUFrRjtBQWNsRjtJQUFvRCwwREFBaUI7SUFZakUsd0NBQVksSUFBMEM7UUFBdEQsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsWUFBWSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQzs7SUFDekUsQ0FBQztJQUVTLHFEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ25GLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIscUJBQXFCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3RDLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywrRUFBc0MsRUFBRSxPQUFPLEVBQUcsd0NBQXdDLEVBQUU7WUFDN0ksSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQy9CLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsNkJBQWEsRUFBRSxPQUFPLEVBQUcsZUFBZSxFQUFFO1lBQzVGLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUMzQyxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDNUIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHFDQUFDO0FBQUQsQ0F0Q0EsQUFzQ0MsQ0F0Q21ELHVDQUFpQixHQXNDcEU7QUF0Q1ksd0VBQThCO0FBd0MzQywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsZ0NBQWdDLEVBQUMsOEJBQThCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYURpc3RyaWJ1dGlvbkZpZWxkQ29uZmlnLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYURpc3RyaWJ1dGlvbkZpZWxkUmVxdWlyZWRTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25GaWVsZFJlcXVpcmVkU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFTdHJpbmcgfSBmcm9tICcuL0thbHR1cmFTdHJpbmcnO1xuaW1wb3J0IHsgS2FsdHVyYU9iamVjdEJhc2UsIEthbHR1cmFPYmplY3RCYXNlQXJncyB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFEaXN0cmlidXRpb25GaWVsZENvbmZpZ0FyZ3MgIGV4dGVuZHMgS2FsdHVyYU9iamVjdEJhc2VBcmdzIHtcbiAgICBmaWVsZE5hbWU/IDogc3RyaW5nO1xuXHR1c2VyRnJpZW5kbHlGaWVsZE5hbWU/IDogc3RyaW5nO1xuXHRlbnRyeU1yc3NYc2x0PyA6IHN0cmluZztcblx0aXNSZXF1aXJlZD8gOiBLYWx0dXJhRGlzdHJpYnV0aW9uRmllbGRSZXF1aXJlZFN0YXR1cztcblx0dHlwZT8gOiBzdHJpbmc7XG5cdHVwZGF0ZU9uQ2hhbmdlPyA6IGJvb2xlYW47XG5cdHVwZGF0ZVBhcmFtcz8gOiBLYWx0dXJhU3RyaW5nW107XG5cdHRyaWdnZXJEZWxldGVPbkVycm9yPyA6IGJvb2xlYW47XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFEaXN0cmlidXRpb25GaWVsZENvbmZpZyBleHRlbmRzIEthbHR1cmFPYmplY3RCYXNlIHtcblxuICAgIGZpZWxkTmFtZSA6IHN0cmluZztcblx0dXNlckZyaWVuZGx5RmllbGROYW1lIDogc3RyaW5nO1xuXHRlbnRyeU1yc3NYc2x0IDogc3RyaW5nO1xuXHRpc1JlcXVpcmVkIDogS2FsdHVyYURpc3RyaWJ1dGlvbkZpZWxkUmVxdWlyZWRTdGF0dXM7XG5cdHR5cGUgOiBzdHJpbmc7XG5cdHVwZGF0ZU9uQ2hhbmdlIDogYm9vbGVhbjtcblx0dXBkYXRlUGFyYW1zIDogS2FsdHVyYVN0cmluZ1tdO1xuXHRyZWFkb25seSBpc0RlZmF1bHQgOiBib29sZWFuO1xuXHR0cmlnZ2VyRGVsZXRlT25FcnJvciA6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFEaXN0cmlidXRpb25GaWVsZENvbmZpZ0FyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnVwZGF0ZVBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMudXBkYXRlUGFyYW1zID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYURpc3RyaWJ1dGlvbkZpZWxkQ29uZmlnJyB9LFxuXHRcdFx0XHRmaWVsZE5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXNlckZyaWVuZGx5RmllbGROYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGVudHJ5TXJzc1hzbHQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aXNSZXF1aXJlZCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEaXN0cmlidXRpb25GaWVsZFJlcXVpcmVkU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFEaXN0cmlidXRpb25GaWVsZFJlcXVpcmVkU3RhdHVzJyB9LFxuXHRcdFx0XHR0eXBlIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVwZGF0ZU9uQ2hhbmdlIDogeyB0eXBlIDogJ2InIH0sXG5cdFx0XHRcdHVwZGF0ZVBhcmFtcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVN0cmluZywgc3ViVHlwZSA6ICdLYWx0dXJhU3RyaW5nJyB9LFxuXHRcdFx0XHRpc0RlZmF1bHQgOiB7IHR5cGUgOiAnYicsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHR0cmlnZ2VyRGVsZXRlT25FcnJvciA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYURpc3RyaWJ1dGlvbkZpZWxkQ29uZmlnJyxLYWx0dXJhRGlzdHJpYnV0aW9uRmllbGRDb25maWcpO1xuIl19
