"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoryUserUpdateAction = void 0;
var tslib_1 = require("tslib");
var KalturaCategoryUser_1 = require("./KalturaCategoryUser");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'categoryUser' action 'update'.
 *
 * Usage: Update CategoryUser by id
 *
 * Server response type:         KalturaCategoryUser
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var CategoryUserUpdateAction = /** @class */ (function (_super) {
    tslib_1.__extends(CategoryUserUpdateAction, _super);
    function CategoryUserUpdateAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaCategoryUser', responseConstructor: KalturaCategoryUser_1.KalturaCategoryUser }) || this;
        if (typeof _this.override === 'undefined')
            _this.override = false;
        return _this;
    }
    CategoryUserUpdateAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'categoryuser' },
            action: { type: 'c', default: 'update' },
            categoryId: { type: 'n' },
            userId: { type: 's' },
            categoryUser: { type: 'o', subTypeConstructor: KalturaCategoryUser_1.KalturaCategoryUser, subType: 'KalturaCategoryUser' },
            override: { type: 'b' }
        });
        return result;
    };
    return CategoryUserUpdateAction;
}(kaltura_request_1.KalturaRequest));
exports.CategoryUserUpdateAction = CategoryUserUpdateAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9DYXRlZ29yeVVzZXJVcGRhdGVBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCxzREFBd0U7QUFTeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBOEMsb0RBQW1DO0lBTzdFLGtDQUFZLElBQW1DO1FBQS9DLFlBRUksa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcscUJBQXFCLEVBQUUsbUJBQW1CLEVBQUcseUNBQW1CLEVBQUcsQ0FBQyxTQUUxSDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsUUFBUSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQzs7SUFDcEUsQ0FBQztJQUVTLCtDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGNBQWMsRUFBRTtZQUM5RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxRQUFRLEVBQUU7WUFDM0MsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3ZCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcseUNBQW1CLEVBQUUsT0FBTyxFQUFHLHFCQUFxQixFQUFFO1lBQ3hHLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDaEIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLCtCQUFDO0FBQUQsQ0E3QkEsQUE2QkMsQ0E3QjZDLGdDQUFjLEdBNkIzRDtBQTdCWSw0REFBd0IiLCJmaWxlIjoiYXBpL3R5cGVzL0NhdGVnb3J5VXNlclVwZGF0ZUFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQ2F0ZWdvcnlVc2VyIH0gZnJvbSAnLi9LYWx0dXJhQ2F0ZWdvcnlVc2VyJztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2F0ZWdvcnlVc2VyVXBkYXRlQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGNhdGVnb3J5SWQgOiBudW1iZXI7XG5cdHVzZXJJZCA6IHN0cmluZztcblx0Y2F0ZWdvcnlVc2VyIDogS2FsdHVyYUNhdGVnb3J5VXNlcjtcblx0b3ZlcnJpZGU/IDogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2NhdGVnb3J5VXNlcicgYWN0aW9uICd1cGRhdGUnLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgQ2F0ZWdvcnlVc2VyIGJ5IGlkXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUNhdGVnb3J5VXNlclxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlVc2VyVXBkYXRlQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUNhdGVnb3J5VXNlcj4ge1xuXG4gICAgY2F0ZWdvcnlJZCA6IG51bWJlcjtcblx0dXNlcklkIDogc3RyaW5nO1xuXHRjYXRlZ29yeVVzZXIgOiBLYWx0dXJhQ2F0ZWdvcnlVc2VyO1xuXHRvdmVycmlkZSA6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogQ2F0ZWdvcnlVc2VyVXBkYXRlQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQ2F0ZWdvcnlVc2VyJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFDYXRlZ29yeVVzZXIgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMub3ZlcnJpZGUgPT09ICd1bmRlZmluZWQnKSB0aGlzLm92ZXJyaWRlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnY2F0ZWdvcnl1c2VyJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlJyB9LFxuXHRcdFx0XHRjYXRlZ29yeUlkIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHVzZXJJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjYXRlZ29yeVVzZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDYXRlZ29yeVVzZXIsIHN1YlR5cGUgOiAnS2FsdHVyYUNhdGVnb3J5VXNlcicgfSxcblx0XHRcdFx0b3ZlcnJpZGUgOiB7IHR5cGUgOiAnYicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
