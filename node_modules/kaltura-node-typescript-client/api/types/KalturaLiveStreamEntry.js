"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaLiveStreamEntry = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaLiveStreamBitrate_1 = require("./KalturaLiveStreamBitrate");
var KalturaSipSourceType_1 = require("./KalturaSipSourceType");
var KalturaLiveEntry_1 = require("./KalturaLiveEntry");
var KalturaLiveStreamEntry = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaLiveStreamEntry, _super);
    function KalturaLiveStreamEntry(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.bitrates === 'undefined')
            _this.bitrates = [];
        return _this;
    }
    KalturaLiveStreamEntry.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaLiveStreamEntry' },
            streamRemoteId: { type: 's', readOnly: true },
            streamRemoteBackupId: { type: 's', readOnly: true },
            bitrates: { type: 'a', subTypeConstructor: KalturaLiveStreamBitrate_1.KalturaLiveStreamBitrate, subType: 'KalturaLiveStreamBitrate' },
            primaryBroadcastingUrl: { type: 's' },
            secondaryBroadcastingUrl: { type: 's' },
            primarySecuredBroadcastingUrl: { type: 's' },
            secondarySecuredBroadcastingUrl: { type: 's' },
            primaryRtspBroadcastingUrl: { type: 's' },
            secondaryRtspBroadcastingUrl: { type: 's' },
            primarySrtBroadcastingUrl: { type: 's' },
            primarySrtStreamId: { type: 's' },
            secondarySrtBroadcastingUrl: { type: 's' },
            secondarySrtStreamId: { type: 's' },
            streamName: { type: 's' },
            streamUrl: { type: 's' },
            hlsStreamUrl: { type: 's' },
            urlManager: { type: 's' },
            encodingIP1: { type: 's' },
            encodingIP2: { type: 's' },
            streamPassword: { type: 's' },
            streamUsername: { type: 's', readOnly: true },
            srtPass: { type: 's' },
            primaryServerNodeId: { type: 'n', readOnly: true },
            sipToken: { type: 's', readOnly: true },
            sipSourceType: { type: 'en', readOnly: true, subTypeConstructor: KalturaSipSourceType_1.KalturaSipSourceType, subType: 'KalturaSipSourceType' }
        });
        return result;
    };
    return KalturaLiveStreamEntry;
}(KalturaLiveEntry_1.KalturaLiveEntry));
exports.KalturaLiveStreamEntry = KalturaLiveStreamEntry;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaLiveStreamEntry', KalturaLiveStreamEntry);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTGl2ZVN0cmVhbUVudHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsdUVBQXNFO0FBQ3RFLCtEQUE4RDtBQUM5RCx1REFBNEU7QUF5QjVFO0lBQTRDLGtEQUFnQjtJQTRCeEQsZ0NBQVksSUFBa0M7UUFBOUMsWUFFSSxrQkFBTSxJQUFJLENBQUMsU0FFZDtRQURHLElBQUksT0FBTyxLQUFJLENBQUMsUUFBUSxLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQzs7SUFDakUsQ0FBQztJQUVTLDZDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQzNFLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUNoRCxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUN0RCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUM5RyxzQkFBc0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDdkMsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDZCQUE2QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM5QywrQkFBK0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEQsMEJBQTBCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzNDLDRCQUE0QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3Qyx5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUMsa0JBQWtCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25DLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QyxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckMsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMzQixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUIsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixjQUFjLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDaEQsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixtQkFBbUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsUUFBUSxFQUFHLElBQUksRUFBRTtZQUNyRCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUU7WUFDMUMsYUFBYSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxRQUFRLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDJDQUFvQixFQUFFLE9BQU8sRUFBRyxzQkFBc0IsRUFBRTtTQUNwSCxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNkJBQUM7QUFBRCxDQXRFQSxBQXNFQyxDQXRFMkMsbUNBQWdCLEdBc0UzRDtBQXRFWSx3REFBc0I7QUF3RW5DLDJDQUFtQixDQUFDLFlBQVksQ0FBQyx3QkFBd0IsRUFBQyxzQkFBc0IsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhTGl2ZVN0cmVhbUVudHJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVTdHJlYW1CaXRyYXRlIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZVN0cmVhbUJpdHJhdGUnO1xuaW1wb3J0IHsgS2FsdHVyYVNpcFNvdXJjZVR5cGUgfSBmcm9tICcuL0thbHR1cmFTaXBTb3VyY2VUeXBlJztcbmltcG9ydCB7IEthbHR1cmFMaXZlRW50cnksIEthbHR1cmFMaXZlRW50cnlBcmdzIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZUVudHJ5JztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5QXJncyAgZXh0ZW5kcyBLYWx0dXJhTGl2ZUVudHJ5QXJncyB7XG4gICAgYml0cmF0ZXM/IDogS2FsdHVyYUxpdmVTdHJlYW1CaXRyYXRlW107XG5cdHByaW1hcnlCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRzZWNvbmRhcnlCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRwcmltYXJ5U2VjdXJlZEJyb2FkY2FzdGluZ1VybD8gOiBzdHJpbmc7XG5cdHNlY29uZGFyeVNlY3VyZWRCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRwcmltYXJ5UnRzcEJyb2FkY2FzdGluZ1VybD8gOiBzdHJpbmc7XG5cdHNlY29uZGFyeVJ0c3BCcm9hZGNhc3RpbmdVcmw/IDogc3RyaW5nO1xuXHRwcmltYXJ5U3J0QnJvYWRjYXN0aW5nVXJsPyA6IHN0cmluZztcblx0cHJpbWFyeVNydFN0cmVhbUlkPyA6IHN0cmluZztcblx0c2Vjb25kYXJ5U3J0QnJvYWRjYXN0aW5nVXJsPyA6IHN0cmluZztcblx0c2Vjb25kYXJ5U3J0U3RyZWFtSWQ/IDogc3RyaW5nO1xuXHRzdHJlYW1OYW1lPyA6IHN0cmluZztcblx0c3RyZWFtVXJsPyA6IHN0cmluZztcblx0aGxzU3RyZWFtVXJsPyA6IHN0cmluZztcblx0dXJsTWFuYWdlcj8gOiBzdHJpbmc7XG5cdGVuY29kaW5nSVAxPyA6IHN0cmluZztcblx0ZW5jb2RpbmdJUDI/IDogc3RyaW5nO1xuXHRzdHJlYW1QYXNzd29yZD8gOiBzdHJpbmc7XG5cdHNydFBhc3M/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5IGV4dGVuZHMgS2FsdHVyYUxpdmVFbnRyeSB7XG5cbiAgICByZWFkb25seSBzdHJlYW1SZW1vdGVJZCA6IHN0cmluZztcblx0cmVhZG9ubHkgc3RyZWFtUmVtb3RlQmFja3VwSWQgOiBzdHJpbmc7XG5cdGJpdHJhdGVzIDogS2FsdHVyYUxpdmVTdHJlYW1CaXRyYXRlW107XG5cdHByaW1hcnlCcm9hZGNhc3RpbmdVcmwgOiBzdHJpbmc7XG5cdHNlY29uZGFyeUJyb2FkY2FzdGluZ1VybCA6IHN0cmluZztcblx0cHJpbWFyeVNlY3VyZWRCcm9hZGNhc3RpbmdVcmwgOiBzdHJpbmc7XG5cdHNlY29uZGFyeVNlY3VyZWRCcm9hZGNhc3RpbmdVcmwgOiBzdHJpbmc7XG5cdHByaW1hcnlSdHNwQnJvYWRjYXN0aW5nVXJsIDogc3RyaW5nO1xuXHRzZWNvbmRhcnlSdHNwQnJvYWRjYXN0aW5nVXJsIDogc3RyaW5nO1xuXHRwcmltYXJ5U3J0QnJvYWRjYXN0aW5nVXJsIDogc3RyaW5nO1xuXHRwcmltYXJ5U3J0U3RyZWFtSWQgOiBzdHJpbmc7XG5cdHNlY29uZGFyeVNydEJyb2FkY2FzdGluZ1VybCA6IHN0cmluZztcblx0c2Vjb25kYXJ5U3J0U3RyZWFtSWQgOiBzdHJpbmc7XG5cdHN0cmVhbU5hbWUgOiBzdHJpbmc7XG5cdHN0cmVhbVVybCA6IHN0cmluZztcblx0aGxzU3RyZWFtVXJsIDogc3RyaW5nO1xuXHR1cmxNYW5hZ2VyIDogc3RyaW5nO1xuXHRlbmNvZGluZ0lQMSA6IHN0cmluZztcblx0ZW5jb2RpbmdJUDIgOiBzdHJpbmc7XG5cdHN0cmVhbVBhc3N3b3JkIDogc3RyaW5nO1xuXHRyZWFkb25seSBzdHJlYW1Vc2VybmFtZSA6IHN0cmluZztcblx0c3J0UGFzcyA6IHN0cmluZztcblx0cmVhZG9ubHkgcHJpbWFyeVNlcnZlck5vZGVJZCA6IG51bWJlcjtcblx0cmVhZG9ubHkgc2lwVG9rZW4gOiBzdHJpbmc7XG5cdHJlYWRvbmx5IHNpcFNvdXJjZVR5cGUgOiBLYWx0dXJhU2lwU291cmNlVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUxpdmVTdHJlYW1FbnRyeUFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmJpdHJhdGVzID09PSAndW5kZWZpbmVkJykgdGhpcy5iaXRyYXRlcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFMaXZlU3RyZWFtRW50cnknIH0sXG5cdFx0XHRcdHN0cmVhbVJlbW90ZUlkIDogeyB0eXBlIDogJ3MnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c3RyZWFtUmVtb3RlQmFja3VwSWQgOiB7IHR5cGUgOiAncycsIHJlYWRPbmx5IDogdHJ1ZSB9LFxuXHRcdFx0XHRiaXRyYXRlcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUxpdmVTdHJlYW1CaXRyYXRlLCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlU3RyZWFtQml0cmF0ZScgfSxcblx0XHRcdFx0cHJpbWFyeUJyb2FkY2FzdGluZ1VybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzZWNvbmRhcnlCcm9hZGNhc3RpbmdVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJpbWFyeVNlY3VyZWRCcm9hZGNhc3RpbmdVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c2Vjb25kYXJ5U2VjdXJlZEJyb2FkY2FzdGluZ1VybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwcmltYXJ5UnRzcEJyb2FkY2FzdGluZ1VybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzZWNvbmRhcnlSdHNwQnJvYWRjYXN0aW5nVXJsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHByaW1hcnlTcnRCcm9hZGNhc3RpbmdVcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJpbWFyeVNydFN0cmVhbUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHNlY29uZGFyeVNydEJyb2FkY2FzdGluZ1VybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzZWNvbmRhcnlTcnRTdHJlYW1JZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdHJlYW1OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN0cmVhbVVybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRobHNTdHJlYW1VcmwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXJsTWFuYWdlciA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbmNvZGluZ0lQMSA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRlbmNvZGluZ0lQMiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdHJlYW1QYXNzd29yZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdHJlYW1Vc2VybmFtZSA6IHsgdHlwZSA6ICdzJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHNydFBhc3MgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cHJpbWFyeVNlcnZlck5vZGVJZCA6IHsgdHlwZSA6ICduJywgcmVhZE9ubHkgOiB0cnVlIH0sXG5cdFx0XHRcdHNpcFRva2VuIDogeyB0eXBlIDogJ3MnLCByZWFkT25seSA6IHRydWUgfSxcblx0XHRcdFx0c2lwU291cmNlVHlwZSA6IHsgdHlwZSA6ICdlbicsIHJlYWRPbmx5IDogdHJ1ZSwgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVNpcFNvdXJjZVR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYVNpcFNvdXJjZVR5cGUnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5JyxLYWx0dXJhTGl2ZVN0cmVhbUVudHJ5KTtcbiJdfQ==
