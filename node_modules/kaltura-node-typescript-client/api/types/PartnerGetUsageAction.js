"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PartnerGetUsageAction = void 0;
var tslib_1 = require("tslib");
var KalturaPartnerUsage_1 = require("./KalturaPartnerUsage");
var KalturaReportInterval_1 = require("./KalturaReportInterval");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'partner' action 'getUsage'.
 *
 * Usage: Get usage statistics for a partner
 * Calculation is done according to partner's package
 * Additional data returned is a graph points of streaming usage in a time frame
 * The resolution can be "days" or "months"
 *
 * Server response type:         KalturaPartnerUsage
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var PartnerGetUsageAction = /** @class */ (function (_super) {
    tslib_1.__extends(PartnerGetUsageAction, _super);
    function PartnerGetUsageAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaPartnerUsage', responseConstructor: KalturaPartnerUsage_1.KalturaPartnerUsage }) || this;
        if (typeof _this.month === 'undefined')
            _this.month = 1;
        return _this;
    }
    PartnerGetUsageAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'partner' },
            action: { type: 'c', default: 'getUsage' },
            year: { type: 'n' },
            month: { type: 'n' },
            resolution: { type: 'es', subTypeConstructor: KalturaReportInterval_1.KalturaReportInterval, subType: 'KalturaReportInterval' }
        });
        return result;
    };
    return PartnerGetUsageAction;
}(kaltura_request_1.KalturaRequest));
exports.PartnerGetUsageAction = PartnerGetUsageAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9QYXJ0bmVyR2V0VXNhZ2VBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZEQUE0RDtBQUU1RCxpRUFBZ0U7QUFDaEUsc0RBQXdFO0FBUXhFOzs7Ozs7Ozs7Ozs7R0FZRztBQUNIO0lBQTJDLGlEQUFtQztJQU0xRSwrQkFBWSxJQUFpQztRQUE3QyxZQUVJLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHFCQUFxQixFQUFFLG1CQUFtQixFQUFHLHlDQUFtQixFQUFHLENBQUMsU0FFMUg7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLEtBQUssS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7O0lBQzFELENBQUM7SUFFUyw0Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxTQUFTLEVBQUU7WUFDekQsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsVUFBVSxFQUFFO1lBQzdDLElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN0QixVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDZDQUFxQixFQUFFLE9BQU8sRUFBRyx1QkFBdUIsRUFBRTtTQUNsRyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQTNCQSxBQTJCQyxDQTNCMEMsZ0NBQWMsR0EyQnhEO0FBM0JZLHNEQUFxQiIsImZpbGUiOiJhcGkvdHlwZXMvUGFydG5lckdldFVzYWdlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFQYXJ0bmVyVXNhZ2UgfSBmcm9tICcuL0thbHR1cmFQYXJ0bmVyVXNhZ2UnO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0SW50ZXJ2YWwgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRJbnRlcnZhbCc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBQYXJ0bmVyR2V0VXNhZ2VBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgeWVhcj8gOiBudW1iZXI7XG5cdG1vbnRoPyA6IG51bWJlcjtcblx0cmVzb2x1dGlvbj8gOiBLYWx0dXJhUmVwb3J0SW50ZXJ2YWw7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdwYXJ0bmVyJyBhY3Rpb24gJ2dldFVzYWdlJy5cbiAqXG4gKiBVc2FnZTogR2V0IHVzYWdlIHN0YXRpc3RpY3MgZm9yIGEgcGFydG5lclxuICogQ2FsY3VsYXRpb24gaXMgZG9uZSBhY2NvcmRpbmcgdG8gcGFydG5lcidzIHBhY2thZ2VcbiAqIEFkZGl0aW9uYWwgZGF0YSByZXR1cm5lZCBpcyBhIGdyYXBoIHBvaW50cyBvZiBzdHJlYW1pbmcgdXNhZ2UgaW4gYSB0aW1lIGZyYW1lXG4gKiBUaGUgcmVzb2x1dGlvbiBjYW4gYmUgXCJkYXlzXCIgb3IgXCJtb250aHNcIlxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFQYXJ0bmVyVXNhZ2VcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRuZXJHZXRVc2FnZUFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFQYXJ0bmVyVXNhZ2U+IHtcblxuICAgIHllYXIgOiBudW1iZXI7XG5cdG1vbnRoIDogbnVtYmVyO1xuXHRyZXNvbHV0aW9uIDogS2FsdHVyYVJlcG9ydEludGVydmFsO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBQYXJ0bmVyR2V0VXNhZ2VBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFQYXJ0bmVyVXNhZ2UnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYVBhcnRuZXJVc2FnZSAgfSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5tb250aCA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMubW9udGggPSAxO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3BhcnRuZXInIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdnZXRVc2FnZScgfSxcblx0XHRcdFx0eWVhciA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRtb250aCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRyZXNvbHV0aW9uIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydEludGVydmFsLCBzdWJUeXBlIDogJ0thbHR1cmFSZXBvcnRJbnRlcnZhbCcgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
