"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaActivitiBusinessProcessServer = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaActivitiBusinessProcessServerProtocol_1 = require("./KalturaActivitiBusinessProcessServerProtocol");
var KalturaBusinessProcessServer_1 = require("./KalturaBusinessProcessServer");
var KalturaActivitiBusinessProcessServer = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaActivitiBusinessProcessServer, _super);
    function KalturaActivitiBusinessProcessServer(data) {
        return _super.call(this, data) || this;
    }
    KalturaActivitiBusinessProcessServer.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaActivitiBusinessProcessServer' },
            host: { type: 's' },
            port: { type: 'n' },
            protocol: { type: 'es', subTypeConstructor: KalturaActivitiBusinessProcessServerProtocol_1.KalturaActivitiBusinessProcessServerProtocol, subType: 'KalturaActivitiBusinessProcessServerProtocol' },
            username: { type: 's' },
            password: { type: 's' }
        });
        return result;
    };
    return KalturaActivitiBusinessProcessServer;
}(KalturaBusinessProcessServer_1.KalturaBusinessProcessServer));
exports.KalturaActivitiBusinessProcessServer = KalturaActivitiBusinessProcessServer;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaActivitiBusinessProcessServer', KalturaActivitiBusinessProcessServer);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQWN0aXZpdGlCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwrR0FBOEc7QUFDOUcsK0VBQWdIO0FBV2hIO0lBQTBELGdFQUE0QjtJQVFsRiw4Q0FBWSxJQUFnRDtlQUV4RCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsMkRBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsc0NBQXNDLEVBQUU7WUFDekYsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsMkZBQTRDLEVBQUUsT0FBTyxFQUFHLDhDQUE4QyxFQUFFO1lBQ3ZKLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNoQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQTdCQSxBQTZCQyxDQTdCeUQsMkRBQTRCLEdBNkJyRjtBQTdCWSxvRkFBb0M7QUErQmpELDJDQUFtQixDQUFDLFlBQVksQ0FBQyxzQ0FBc0MsRUFBQyxvQ0FBb0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhQWN0aXZpdGlCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQWN0aXZpdGlCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXJQcm90b2NvbCB9IGZyb20gJy4vS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyUHJvdG9jb2wnO1xuaW1wb3J0IHsgS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlciwgS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlckFyZ3MgfSBmcm9tICcuL0thbHR1cmFCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFBY3Rpdml0aUJ1c2luZXNzUHJvY2Vzc1NlcnZlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYUJ1c2luZXNzUHJvY2Vzc1NlcnZlckFyZ3Mge1xuICAgIGhvc3Q/IDogc3RyaW5nO1xuXHRwb3J0PyA6IG51bWJlcjtcblx0cHJvdG9jb2w/IDogS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyUHJvdG9jb2w7XG5cdHVzZXJuYW1lPyA6IHN0cmluZztcblx0cGFzc3dvcmQ/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQWN0aXZpdGlCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXIgZXh0ZW5kcyBLYWx0dXJhQnVzaW5lc3NQcm9jZXNzU2VydmVyIHtcblxuICAgIGhvc3QgOiBzdHJpbmc7XG5cdHBvcnQgOiBudW1iZXI7XG5cdHByb3RvY29sIDogS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyUHJvdG9jb2w7XG5cdHVzZXJuYW1lIDogc3RyaW5nO1xuXHRwYXNzd29yZCA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFBY3Rpdml0aUJ1c2luZXNzUHJvY2Vzc1NlcnZlcicgfSxcblx0XHRcdFx0aG9zdCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwb3J0IDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdHByb3RvY29sIDogeyB0eXBlIDogJ2VzJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyUHJvdG9jb2wsIHN1YlR5cGUgOiAnS2FsdHVyYUFjdGl2aXRpQnVzaW5lc3NQcm9jZXNzU2VydmVyUHJvdG9jb2wnIH0sXG5cdFx0XHRcdHVzZXJuYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBhc3N3b3JkIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhQWN0aXZpdGlCdXNpbmVzc1Byb2Nlc3NTZXJ2ZXInLEthbHR1cmFBY3Rpdml0aUJ1c2luZXNzUHJvY2Vzc1NlcnZlcik7XG4iXX0=
