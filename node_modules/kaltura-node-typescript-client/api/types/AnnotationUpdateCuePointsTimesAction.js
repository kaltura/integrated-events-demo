"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnotationUpdateCuePointsTimesAction = void 0;
var tslib_1 = require("tslib");
var KalturaCuePoint_1 = require("./KalturaCuePoint");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'annotation' action 'updateCuePointsTimes'.
 *
 *
 *
 * Server response type:         KalturaCuePoint
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var AnnotationUpdateCuePointsTimesAction = /** @class */ (function (_super) {
    tslib_1.__extends(AnnotationUpdateCuePointsTimesAction, _super);
    function AnnotationUpdateCuePointsTimesAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaCuePoint', responseConstructor: KalturaCuePoint_1.KalturaCuePoint }) || this;
    }
    AnnotationUpdateCuePointsTimesAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'annotation_annotation' },
            action: { type: 'c', default: 'updateCuePointsTimes' },
            id: { type: 's' },
            startTime: { type: 'n' },
            endTime: { type: 'n' }
        });
        return result;
    };
    return AnnotationUpdateCuePointsTimesAction;
}(kaltura_request_1.KalturaRequest));
exports.AnnotationUpdateCuePointsTimesAction = AnnotationUpdateCuePointsTimesAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Bbm5vdGF0aW9uVXBkYXRlQ3VlUG9pbnRzVGltZXNBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHFEQUFvRDtBQUVwRCxzREFBd0U7QUFReEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBMEQsZ0VBQStCO0lBTXJGLDhDQUFZLElBQStDO2VBRXZELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGlCQUFpQixFQUFFLG1CQUFtQixFQUFHLGlDQUFlLEVBQUcsQ0FBQztJQUNuSCxDQUFDO0lBRVMsMkRBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDdkUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsc0JBQXNCLEVBQUU7WUFDekQsRUFBRSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNuQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDZixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCeUQsZ0NBQWMsR0EwQnZFO0FBMUJZLG9GQUFvQyIsImZpbGUiOiJhcGkvdHlwZXMvQW5ub3RhdGlvblVwZGF0ZUN1ZVBvaW50c1RpbWVzQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFDdWVQb2ludCB9IGZyb20gJy4vS2FsdHVyYUN1ZVBvaW50JztcblxuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5ub3RhdGlvblVwZGF0ZUN1ZVBvaW50c1RpbWVzQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGlkIDogc3RyaW5nO1xuXHRzdGFydFRpbWUgOiBudW1iZXI7XG5cdGVuZFRpbWU/IDogbnVtYmVyO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnYW5ub3RhdGlvbicgYWN0aW9uICd1cGRhdGVDdWVQb2ludHNUaW1lcycuXG4gKlxuICogXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUN1ZVBvaW50XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBBbm5vdGF0aW9uVXBkYXRlQ3VlUG9pbnRzVGltZXNBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhQ3VlUG9pbnQ+IHtcblxuICAgIGlkIDogc3RyaW5nO1xuXHRzdGFydFRpbWUgOiBudW1iZXI7XG5cdGVuZFRpbWUgOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhIDogQW5ub3RhdGlvblVwZGF0ZUN1ZVBvaW50c1RpbWVzQWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhQ3VlUG9pbnQnLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUN1ZVBvaW50ICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhbm5vdGF0aW9uX2Fubm90YXRpb24nIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICd1cGRhdGVDdWVQb2ludHNUaW1lcycgfSxcblx0XHRcdFx0aWQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3RhcnRUaW1lIDogeyB0eXBlIDogJ24nIH0sXG5cdFx0XHRcdGVuZFRpbWUgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
