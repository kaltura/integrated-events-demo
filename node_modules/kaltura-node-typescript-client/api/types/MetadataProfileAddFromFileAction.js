"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataProfileAddFromFileAction = void 0;
var tslib_1 = require("tslib");
var KalturaMetadataProfile_1 = require("./KalturaMetadataProfile");
var kaltura_upload_request_1 = require("../kaltura-upload-request");
/**
 * Build request payload for service 'metadataProfile' action 'addFromFile'.
 *
 * Usage: Allows you to add a metadata profile object and metadata profile file associated with Kaltura object type
 *
 * Server response type:         KalturaMetadataProfile
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaUploadRequest
 */
var MetadataProfileAddFromFileAction = /** @class */ (function (_super) {
    tslib_1.__extends(MetadataProfileAddFromFileAction, _super);
    function MetadataProfileAddFromFileAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaMetadataProfile', responseConstructor: KalturaMetadataProfile_1.KalturaMetadataProfile }) || this;
    }
    MetadataProfileAddFromFileAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'metadata_metadataprofile' },
            action: { type: 'c', default: 'addFromFile' },
            metadataProfile: { type: 'o', subTypeConstructor: KalturaMetadataProfile_1.KalturaMetadataProfile, subType: 'KalturaMetadataProfile' },
            xsdFile: { type: 'f' },
            viewsFile: { type: 'f' }
        });
        return result;
    };
    return MetadataProfileAddFromFileAction;
}(kaltura_upload_request_1.KalturaUploadRequest));
exports.MetadataProfileAddFromFileAction = MetadataProfileAddFromFileAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9NZXRhZGF0YVByb2ZpbGVBZGRGcm9tRmlsZUFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsbUVBQWtFO0FBRWxFLG9FQUEyRjtBQVEzRjs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUFzRCw0REFBNEM7SUFNOUYsMENBQVksSUFBMkM7ZUFFbkQsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsd0JBQXdCLEVBQUUsbUJBQW1CLEVBQUcsK0NBQXNCLEVBQUcsQ0FBQztJQUNqSSxDQUFDO0lBRVMsdURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMEJBQTBCLEVBQUU7WUFDMUUsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFO1lBQ2hELGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsK0NBQXNCLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1lBQ2pILE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNqQixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQTFCQSxBQTBCQyxDQTFCcUQsNkNBQW9CLEdBMEJ6RTtBQTFCWSw0RUFBZ0MiLCJmaWxlIjoiYXBpL3R5cGVzL01ldGFkYXRhUHJvZmlsZUFkZEZyb21GaWxlQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFNZXRhZGF0YVByb2ZpbGUgfSBmcm9tICcuL0thbHR1cmFNZXRhZGF0YVByb2ZpbGUnO1xuXG5pbXBvcnQgeyBLYWx0dXJhVXBsb2FkUmVxdWVzdCwgS2FsdHVyYVVwbG9hZFJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS11cGxvYWQtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0YWRhdGFQcm9maWxlQWRkRnJvbUZpbGVBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFVcGxvYWRSZXF1ZXN0QXJncyB7XG4gICAgbWV0YWRhdGFQcm9maWxlIDogS2FsdHVyYU1ldGFkYXRhUHJvZmlsZTtcblx0eHNkRmlsZSA6IEZpbGU7XG5cdHZpZXdzRmlsZT8gOiBGaWxlO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnbWV0YWRhdGFQcm9maWxlJyBhY3Rpb24gJ2FkZEZyb21GaWxlJy5cbiAqXG4gKiBVc2FnZTogQWxsb3dzIHlvdSB0byBhZGQgYSBtZXRhZGF0YSBwcm9maWxlIG9iamVjdCBhbmQgbWV0YWRhdGEgcHJvZmlsZSBmaWxlIGFzc29jaWF0ZWQgd2l0aCBLYWx0dXJhIG9iamVjdCB0eXBlXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYU1ldGFkYXRhUHJvZmlsZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhVXBsb2FkUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFQcm9maWxlQWRkRnJvbUZpbGVBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhVXBsb2FkUmVxdWVzdDxLYWx0dXJhTWV0YWRhdGFQcm9maWxlPiB7XG5cbiAgICBtZXRhZGF0YVByb2ZpbGUgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlO1xuXHR4c2RGaWxlIDogRmlsZTtcblx0dmlld3NGaWxlIDogRmlsZTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBNZXRhZGF0YVByb2ZpbGVBZGRGcm9tRmlsZUFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYU1ldGFkYXRhUHJvZmlsZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlICB9KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2VydmljZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdtZXRhZGF0YV9tZXRhZGF0YXByb2ZpbGUnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdhZGRGcm9tRmlsZScgfSxcblx0XHRcdFx0bWV0YWRhdGFQcm9maWxlIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlLCBzdWJUeXBlIDogJ0thbHR1cmFNZXRhZGF0YVByb2ZpbGUnIH0sXG5cdFx0XHRcdHhzZEZpbGUgOiB7IHR5cGUgOiAnZicgfSxcblx0XHRcdFx0dmlld3NGaWxlIDogeyB0eXBlIDogJ2YnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
