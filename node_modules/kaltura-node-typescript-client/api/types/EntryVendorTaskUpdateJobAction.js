"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryVendorTaskUpdateJobAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryVendorTask_1 = require("./KalturaEntryVendorTask");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'entryVendorTask' action 'updateJob'.
 *
 * Usage: Update entry vendor task. Only the properties that were set will be updated
 *
 * Server response type:         KalturaEntryVendorTask
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EntryVendorTaskUpdateJobAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryVendorTaskUpdateJobAction, _super);
    function EntryVendorTaskUpdateJobAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEntryVendorTask', responseConstructor: KalturaEntryVendorTask_1.KalturaEntryVendorTask }) || this;
    }
    EntryVendorTaskUpdateJobAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'reach_entryvendortask' },
            action: { type: 'c', default: 'updateJob' },
            id: { type: 'n' },
            entryVendorTask: { type: 'o', subTypeConstructor: KalturaEntryVendorTask_1.KalturaEntryVendorTask, subType: 'KalturaEntryVendorTask' }
        });
        return result;
    };
    return EntryVendorTaskUpdateJobAction;
}(kaltura_request_1.KalturaRequest));
exports.EntryVendorTaskUpdateJobAction = EntryVendorTaskUpdateJobAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeVZlbmRvclRhc2tVcGRhdGVKb2JBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1FQUFrRTtBQUVsRSxzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBb0QsMERBQXNDO0lBS3RGLHdDQUFZLElBQXlDO2VBRWpELGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHdCQUF3QixFQUFFLG1CQUFtQixFQUFHLCtDQUFzQixFQUFHLENBQUM7SUFDakksQ0FBQztJQUVTLHFEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3ZFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLFdBQVcsRUFBRTtZQUM5QyxFQUFFLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ25CLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsa0JBQWtCLEVBQUcsK0NBQXNCLEVBQUUsT0FBTyxFQUFHLHdCQUF3QixFQUFFO1NBQ3hHLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxxQ0FBQztBQUFELENBeEJBLEFBd0JDLENBeEJtRCxnQ0FBYyxHQXdCakU7QUF4Qlksd0VBQThCIiwiZmlsZSI6ImFwaS90eXBlcy9FbnRyeVZlbmRvclRhc2tVcGRhdGVKb2JBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUVudHJ5VmVuZG9yVGFzayB9IGZyb20gJy4vS2FsdHVyYUVudHJ5VmVuZG9yVGFzayc7XG5cbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVudHJ5VmVuZG9yVGFza1VwZGF0ZUpvYkFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBpZCA6IG51bWJlcjtcblx0ZW50cnlWZW5kb3JUYXNrIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzaztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2VudHJ5VmVuZG9yVGFzaycgYWN0aW9uICd1cGRhdGVKb2InLlxuICpcbiAqIFVzYWdlOiBVcGRhdGUgZW50cnkgdmVuZG9yIHRhc2suIE9ubHkgdGhlIHByb3BlcnRpZXMgdGhhdCB3ZXJlIHNldCB3aWxsIGJlIHVwZGF0ZWRcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhRW50cnlWZW5kb3JUYXNrXG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRyeVZlbmRvclRhc2tVcGRhdGVKb2JBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhRW50cnlWZW5kb3JUYXNrPiB7XG5cbiAgICBpZCA6IG51bWJlcjtcblx0ZW50cnlWZW5kb3JUYXNrIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzaztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBFbnRyeVZlbmRvclRhc2tVcGRhdGVKb2JBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFFbnRyeVZlbmRvclRhc2snLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzayAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVhY2hfZW50cnl2ZW5kb3J0YXNrJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAndXBkYXRlSm9iJyB9LFxuXHRcdFx0XHRpZCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRlbnRyeVZlbmRvclRhc2sgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2ssIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5VmVuZG9yVGFzaycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
