"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaPushToNewsDistributionProfile = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaDistributionProtocol_1 = require("./KalturaDistributionProtocol");
var KalturaConfigurableDistributionProfile_1 = require("./KalturaConfigurableDistributionProfile");
var KalturaPushToNewsDistributionProfile = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaPushToNewsDistributionProfile, _super);
    function KalturaPushToNewsDistributionProfile(data) {
        return _super.call(this, data) || this;
    }
    KalturaPushToNewsDistributionProfile.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaPushToNewsDistributionProfile' },
            protocol: { type: 'en', subTypeConstructor: KalturaDistributionProtocol_1.KalturaDistributionProtocol, subType: 'KalturaDistributionProtocol' },
            host: { type: 's' },
            ips: { type: 's' },
            port: { type: 'n' },
            basePath: { type: 's' },
            username: { type: 's' },
            password: { type: 's' },
            namedItem: { type: 's' },
            certificateKey: { type: 's' },
            bodyXslt: { type: 's' },
            recentNewsTimeInterval: { type: 'n' }
        });
        return result;
    };
    return KalturaPushToNewsDistributionProfile;
}(KalturaConfigurableDistributionProfile_1.KalturaConfigurableDistributionProfile));
exports.KalturaPushToNewsDistributionProfile = KalturaPushToNewsDistributionProfile;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaPushToNewsDistributionProfile', KalturaPushToNewsDistributionProfile);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUHVzaFRvTmV3c0Rpc3RyaWJ1dGlvblByb2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCw2RUFBNEU7QUFDNUUsbUdBQThJO0FBaUI5STtJQUEwRCxnRUFBc0M7SUFjNUYsOENBQVksSUFBZ0Q7ZUFFeEQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLDJEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHNDQUFzQyxFQUFFO1lBQ3pGLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcseURBQTJCLEVBQUUsT0FBTyxFQUFHLDZCQUE2QixFQUFFO1lBQ3JILElBQUksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckIsR0FBRyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNwQixJQUFJLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3JCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFNBQVMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDMUIsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLHNCQUFzQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUM5QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsMkNBQUM7QUFBRCxDQXpDQSxBQXlDQyxDQXpDeUQsK0VBQXNDLEdBeUMvRjtBQXpDWSxvRkFBb0M7QUEyQ2pELDJDQUFtQixDQUFDLFlBQVksQ0FBQyxzQ0FBc0MsRUFBQyxvQ0FBb0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhUHVzaFRvTmV3c0Rpc3RyaWJ1dGlvblByb2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wgfSBmcm9tICcuL0thbHR1cmFEaXN0cmlidXRpb25Qcm90b2NvbCc7XG5pbXBvcnQgeyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZSwgS2FsdHVyYUNvbmZpZ3VyYWJsZURpc3RyaWJ1dGlvblByb2ZpbGVBcmdzIH0gZnJvbSAnLi9LYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYVB1c2hUb05ld3NEaXN0cmlidXRpb25Qcm9maWxlQXJncyAgZXh0ZW5kcyBLYWx0dXJhQ29uZmlndXJhYmxlRGlzdHJpYnV0aW9uUHJvZmlsZUFyZ3Mge1xuICAgIHByb3RvY29sPyA6IEthbHR1cmFEaXN0cmlidXRpb25Qcm90b2NvbDtcblx0aG9zdD8gOiBzdHJpbmc7XG5cdGlwcz8gOiBzdHJpbmc7XG5cdHBvcnQ/IDogbnVtYmVyO1xuXHRiYXNlUGF0aD8gOiBzdHJpbmc7XG5cdHVzZXJuYW1lPyA6IHN0cmluZztcblx0cGFzc3dvcmQ/IDogc3RyaW5nO1xuXHRuYW1lZEl0ZW0/IDogc3RyaW5nO1xuXHRjZXJ0aWZpY2F0ZUtleT8gOiBzdHJpbmc7XG5cdGJvZHlYc2x0PyA6IHN0cmluZztcblx0cmVjZW50TmV3c1RpbWVJbnRlcnZhbD8gOiBudW1iZXI7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFQdXNoVG9OZXdzRGlzdHJpYnV0aW9uUHJvZmlsZSBleHRlbmRzIEthbHR1cmFDb25maWd1cmFibGVEaXN0cmlidXRpb25Qcm9maWxlIHtcblxuICAgIHByb3RvY29sIDogS2FsdHVyYURpc3RyaWJ1dGlvblByb3RvY29sO1xuXHRob3N0IDogc3RyaW5nO1xuXHRpcHMgOiBzdHJpbmc7XG5cdHBvcnQgOiBudW1iZXI7XG5cdGJhc2VQYXRoIDogc3RyaW5nO1xuXHR1c2VybmFtZSA6IHN0cmluZztcblx0cGFzc3dvcmQgOiBzdHJpbmc7XG5cdG5hbWVkSXRlbSA6IHN0cmluZztcblx0Y2VydGlmaWNhdGVLZXkgOiBzdHJpbmc7XG5cdGJvZHlYc2x0IDogc3RyaW5nO1xuXHRyZWNlbnROZXdzVGltZUludGVydmFsIDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhUHVzaFRvTmV3c0Rpc3RyaWJ1dGlvblByb2ZpbGVBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVB1c2hUb05ld3NEaXN0cmlidXRpb25Qcm9maWxlJyB9LFxuXHRcdFx0XHRwcm90b2NvbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFEaXN0cmlidXRpb25Qcm90b2NvbCwgc3ViVHlwZSA6ICdLYWx0dXJhRGlzdHJpYnV0aW9uUHJvdG9jb2wnIH0sXG5cdFx0XHRcdGhvc3QgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0aXBzIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHBvcnQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0YmFzZVBhdGggOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0dXNlcm5hbWUgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0cGFzc3dvcmQgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0bmFtZWRJdGVtIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNlcnRpZmljYXRlS2V5IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGJvZHlYc2x0IDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHJlY2VudE5ld3NUaW1lSW50ZXJ2YWwgOiB7IHR5cGUgOiAnbicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFQdXNoVG9OZXdzRGlzdHJpYnV0aW9uUHJvZmlsZScsS2FsdHVyYVB1c2hUb05ld3NEaXN0cmlidXRpb25Qcm9maWxlKTtcbiJdfQ==
