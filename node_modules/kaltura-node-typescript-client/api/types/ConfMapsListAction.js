"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfMapsListAction = void 0;
var tslib_1 = require("tslib");
var KalturaConfMapsListResponse_1 = require("./KalturaConfMapsListResponse");
var KalturaConfMapsFilter_1 = require("./KalturaConfMapsFilter");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'confMaps' action 'list'.
 *
 * Usage: List configuration maps
 *
 * Server response type:         KalturaConfMapsListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ConfMapsListAction = /** @class */ (function (_super) {
    tslib_1.__extends(ConfMapsListAction, _super);
    function ConfMapsListAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaConfMapsListResponse', responseConstructor: KalturaConfMapsListResponse_1.KalturaConfMapsListResponse }) || this;
    }
    ConfMapsListAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'confmaps_confmaps' },
            action: { type: 'c', default: 'list' },
            filter: { type: 'o', subTypeConstructor: KalturaConfMapsFilter_1.KalturaConfMapsFilter, subType: 'KalturaConfMapsFilter' }
        });
        return result;
    };
    return ConfMapsListAction;
}(kaltura_request_1.KalturaRequest));
exports.ConfMapsListAction = ConfMapsListAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9Db25mTWFwc0xpc3RBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLDZFQUE0RTtBQUU1RSxpRUFBZ0U7QUFDaEUsc0RBQXdFO0FBTXhFOzs7Ozs7Ozs7R0FTRztBQUNIO0lBQXdDLDhDQUEyQztJQUkvRSw0QkFBWSxJQUE2QjtlQUVyQyxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyw2QkFBNkIsRUFBRSxtQkFBbUIsRUFBRyx5REFBMkIsRUFBRyxDQUFDO0lBQzNJLENBQUM7SUFFUyx5Q0FBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxtQkFBbUIsRUFBRTtZQUNuRSxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxNQUFNLEVBQUU7WUFDekMsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2Q0FBcUIsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7U0FDN0YsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0F0QkEsQUFzQkMsQ0F0QnVDLGdDQUFjLEdBc0JyRDtBQXRCWSxnREFBa0IiLCJmaWxlIjoiYXBpL3R5cGVzL0NvbmZNYXBzTGlzdEFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhQ29uZk1hcHNMaXN0UmVzcG9uc2UgfSBmcm9tICcuL0thbHR1cmFDb25mTWFwc0xpc3RSZXNwb25zZSc7XG5cbmltcG9ydCB7IEthbHR1cmFDb25mTWFwc0ZpbHRlciB9IGZyb20gJy4vS2FsdHVyYUNvbmZNYXBzRmlsdGVyJztcbmltcG9ydCB7IEthbHR1cmFSZXF1ZXN0LCBLYWx0dXJhUmVxdWVzdEFyZ3MgfSBmcm9tICcuLi9rYWx0dXJhLXJlcXVlc3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbmZNYXBzTGlzdEFjdGlvbkFyZ3MgIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RBcmdzIHtcbiAgICBmaWx0ZXIgOiBLYWx0dXJhQ29uZk1hcHNGaWx0ZXI7XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdjb25mTWFwcycgYWN0aW9uICdsaXN0Jy5cbiAqXG4gKiBVc2FnZTogTGlzdCBjb25maWd1cmF0aW9uIG1hcHNcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhQ29uZk1hcHNMaXN0UmVzcG9uc2VcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZNYXBzTGlzdEFjdGlvbiBleHRlbmRzIEthbHR1cmFSZXF1ZXN0PEthbHR1cmFDb25mTWFwc0xpc3RSZXNwb25zZT4ge1xuXG4gICAgZmlsdGVyIDogS2FsdHVyYUNvbmZNYXBzRmlsdGVyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IENvbmZNYXBzTGlzdEFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUNvbmZNYXBzTGlzdFJlc3BvbnNlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFDb25mTWFwc0xpc3RSZXNwb25zZSAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnY29uZm1hcHNfY29uZm1hcHMnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdsaXN0JyB9LFxuXHRcdFx0XHRmaWx0ZXIgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFDb25mTWFwc0ZpbHRlciwgc3ViVHlwZSA6ICdLYWx0dXJhQ29uZk1hcHNGaWx0ZXInIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbiJdfQ==
