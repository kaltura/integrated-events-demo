"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaWatchLaterUserEntryAdvancedFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaUserEntryExtendedStatus_1 = require("./KalturaUserEntryExtendedStatus");
var KalturaSearchItem_1 = require("./KalturaSearchItem");
var KalturaWatchLaterUserEntryAdvancedFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaWatchLaterUserEntryAdvancedFilter, _super);
    function KalturaWatchLaterUserEntryAdvancedFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaWatchLaterUserEntryAdvancedFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaWatchLaterUserEntryAdvancedFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            userIdEqual: { type: 's' },
            userIdIn: { type: 's' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            extendedStatusEqual: { type: 'es', subTypeConstructor: KalturaUserEntryExtendedStatus_1.KalturaUserEntryExtendedStatus, subType: 'KalturaUserEntryExtendedStatus' },
            extendedStatusIn: { type: 's' }
        });
        return result;
    };
    return KalturaWatchLaterUserEntryAdvancedFilter;
}(KalturaSearchItem_1.KalturaSearchItem));
exports.KalturaWatchLaterUserEntryAdvancedFilter = KalturaWatchLaterUserEntryAdvancedFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaWatchLaterUserEntryAdvancedFilter', KalturaWatchLaterUserEntryAdvancedFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhV2F0Y2hMYXRlclVzZXJFbnRyeUFkdmFuY2VkRmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxrRUFBK0Q7QUFDL0QsbUZBQWtGO0FBQ2xGLHlEQUErRTtBQWMvRTtJQUE4RCxvRUFBaUI7SUFXM0Usa0RBQVksSUFBb0Q7ZUFFNUQsa0JBQU0sSUFBSSxDQUFDO0lBQ2YsQ0FBQztJQUVTLCtEQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLFVBQVUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLDBDQUEwQyxFQUFFO1lBQzdGLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNyQixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsMkJBQTJCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVDLHdCQUF3QixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QyxtQkFBbUIsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsK0RBQThCLEVBQUUsT0FBTyxFQUFHLGdDQUFnQyxFQUFFO1lBQ3RJLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN4QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0NBQUM7QUFBRCxDQW5DQSxBQW1DQyxDQW5DNkQscUNBQWlCLEdBbUM5RTtBQW5DWSw0RkFBd0M7QUFxQ3JELDJDQUFtQixDQUFDLFlBQVksQ0FBQywwQ0FBMEMsRUFBQyx3Q0FBd0MsQ0FBQyxDQUFDIiwiZmlsZSI6ImFwaS90eXBlcy9LYWx0dXJhV2F0Y2hMYXRlclVzZXJFbnRyeUFkdmFuY2VkRmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYVVzZXJFbnRyeUV4dGVuZGVkU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVNlYXJjaEl0ZW0sIEthbHR1cmFTZWFyY2hJdGVtQXJncyB9IGZyb20gJy4vS2FsdHVyYVNlYXJjaEl0ZW0nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEthbHR1cmFXYXRjaExhdGVyVXNlckVudHJ5QWR2YW5jZWRGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFTZWFyY2hJdGVtQXJncyB7XG4gICAgaWRFcXVhbD8gOiBudW1iZXI7XG5cdGlkSW4/IDogc3RyaW5nO1xuXHR1c2VySWRFcXVhbD8gOiBzdHJpbmc7XG5cdHVzZXJJZEluPyA6IHN0cmluZztcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRleHRlbmRlZFN0YXR1c0VxdWFsPyA6IEthbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cztcblx0ZXh0ZW5kZWRTdGF0dXNJbj8gOiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGNsYXNzIEthbHR1cmFXYXRjaExhdGVyVXNlckVudHJ5QWR2YW5jZWRGaWx0ZXIgZXh0ZW5kcyBLYWx0dXJhU2VhcmNoSXRlbSB7XG5cbiAgICBpZEVxdWFsIDogbnVtYmVyO1xuXHRpZEluIDogc3RyaW5nO1xuXHR1c2VySWRFcXVhbCA6IHN0cmluZztcblx0dXNlcklkSW4gOiBzdHJpbmc7XG5cdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbCA6IERhdGU7XG5cdGV4dGVuZGVkU3RhdHVzRXF1YWwgOiBLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXM7XG5cdGV4dGVuZGVkU3RhdHVzSW4gOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFXYXRjaExhdGVyVXNlckVudHJ5QWR2YW5jZWRGaWx0ZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYVdhdGNoTGF0ZXJVc2VyRW50cnlBZHZhbmNlZEZpbHRlcicgfSxcblx0XHRcdFx0aWRFcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRpZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVzZXJJZEVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVzZXJJZEluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0ZXh0ZW5kZWRTdGF0dXNFcXVhbCA6IHsgdHlwZSA6ICdlcycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFVc2VyRW50cnlFeHRlbmRlZFN0YXR1cywgc3ViVHlwZSA6ICdLYWx0dXJhVXNlckVudHJ5RXh0ZW5kZWRTdGF0dXMnIH0sXG5cdFx0XHRcdGV4dGVuZGVkU3RhdHVzSW4gOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFXYXRjaExhdGVyVXNlckVudHJ5QWR2YW5jZWRGaWx0ZXInLEthbHR1cmFXYXRjaExhdGVyVXNlckVudHJ5QWR2YW5jZWRGaWx0ZXIpO1xuIl19
