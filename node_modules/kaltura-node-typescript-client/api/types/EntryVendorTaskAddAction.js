"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntryVendorTaskAddAction = void 0;
var tslib_1 = require("tslib");
var KalturaEntryVendorTask_1 = require("./KalturaEntryVendorTask");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'entryVendorTask' action 'add'.
 *
 * Usage: Allows you to add a entry vendor task
 *
 * Server response type:         KalturaEntryVendorTask
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var EntryVendorTaskAddAction = /** @class */ (function (_super) {
    tslib_1.__extends(EntryVendorTaskAddAction, _super);
    function EntryVendorTaskAddAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaEntryVendorTask', responseConstructor: KalturaEntryVendorTask_1.KalturaEntryVendorTask }) || this;
    }
    EntryVendorTaskAddAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'reach_entryvendortask' },
            action: { type: 'c', default: 'add' },
            entryVendorTask: { type: 'o', subTypeConstructor: KalturaEntryVendorTask_1.KalturaEntryVendorTask, subType: 'KalturaEntryVendorTask' }
        });
        return result;
    };
    return EntryVendorTaskAddAction;
}(kaltura_request_1.KalturaRequest));
exports.EntryVendorTaskAddAction = EntryVendorTaskAddAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9FbnRyeVZlbmRvclRhc2tBZGRBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1FQUFrRTtBQUVsRSxzREFBd0U7QUFNeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBOEMsb0RBQXNDO0lBSWhGLGtDQUFZLElBQW1DO2VBRTNDLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLHdCQUF3QixFQUFFLG1CQUFtQixFQUFHLCtDQUFzQixFQUFHLENBQUM7SUFDakksQ0FBQztJQUVTLCtDQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLHVCQUF1QixFQUFFO1lBQ3ZFLE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLEtBQUssRUFBRTtZQUN4QyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLCtDQUFzQixFQUFFLE9BQU8sRUFBRyx3QkFBd0IsRUFBRTtTQUN4RyxDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0JBQUM7QUFBRCxDQXRCQSxBQXNCQyxDQXRCNkMsZ0NBQWMsR0FzQjNEO0FBdEJZLDREQUF3QiIsImZpbGUiOiJhcGkvdHlwZXMvRW50cnlWZW5kb3JUYXNrQWRkQWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFFbnRyeVZlbmRvclRhc2sgfSBmcm9tICcuL0thbHR1cmFFbnRyeVZlbmRvclRhc2snO1xuXG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBFbnRyeVZlbmRvclRhc2tBZGRBY3Rpb25BcmdzICBleHRlbmRzIEthbHR1cmFSZXF1ZXN0QXJncyB7XG4gICAgZW50cnlWZW5kb3JUYXNrIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzaztcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ2VudHJ5VmVuZG9yVGFzaycgYWN0aW9uICdhZGQnLlxuICpcbiAqIFVzYWdlOiBBbGxvd3MgeW91IHRvIGFkZCBhIGVudHJ5IHZlbmRvciB0YXNrXG4gKlxuICogU2VydmVyIHJlc3BvbnNlIHR5cGU6ICAgICAgICAgS2FsdHVyYUVudHJ5VmVuZG9yVGFza1xuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgRW50cnlWZW5kb3JUYXNrQWRkQWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYUVudHJ5VmVuZG9yVGFzaz4ge1xuXG4gICAgZW50cnlWZW5kb3JUYXNrIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzaztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBFbnRyeVZlbmRvclRhc2tBZGRBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFFbnRyeVZlbmRvclRhc2snLCByZXNwb25zZUNvbnN0cnVjdG9yIDogS2FsdHVyYUVudHJ5VmVuZG9yVGFzayAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAncmVhY2hfZW50cnl2ZW5kb3J0YXNrJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnYWRkJyB9LFxuXHRcdFx0XHRlbnRyeVZlbmRvclRhc2sgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeVZlbmRvclRhc2ssIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5VmVuZG9yVGFzaycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
