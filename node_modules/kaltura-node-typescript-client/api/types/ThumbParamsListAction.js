"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThumbParamsListAction = void 0;
var tslib_1 = require("tslib");
var KalturaThumbParamsListResponse_1 = require("./KalturaThumbParamsListResponse");
var KalturaThumbParamsFilter_1 = require("./KalturaThumbParamsFilter");
var KalturaFilterPager_1 = require("./KalturaFilterPager");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'thumbParams' action 'list'.
 *
 * Usage: List Thumb Params by filter with paging support (By default - all system default params will be listed too)
 *
 * Server response type:         KalturaThumbParamsListResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var ThumbParamsListAction = /** @class */ (function (_super) {
    tslib_1.__extends(ThumbParamsListAction, _super);
    function ThumbParamsListAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaThumbParamsListResponse', responseConstructor: KalturaThumbParamsListResponse_1.KalturaThumbParamsListResponse }) || this;
    }
    ThumbParamsListAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'thumbparams' },
            action: { type: 'c', default: 'list' },
            filter: { type: 'o', subTypeConstructor: KalturaThumbParamsFilter_1.KalturaThumbParamsFilter, subType: 'KalturaThumbParamsFilter' },
            pager: { type: 'o', subTypeConstructor: KalturaFilterPager_1.KalturaFilterPager, subType: 'KalturaFilterPager' }
        });
        return result;
    };
    return ThumbParamsListAction;
}(kaltura_request_1.KalturaRequest));
exports.ThumbParamsListAction = ThumbParamsListAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9UaHVtYlBhcmFtc0xpc3RBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLG1GQUFrRjtBQUVsRix1RUFBc0U7QUFDdEUsMkRBQTBEO0FBQzFELHNEQUF3RTtBQU94RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUEyQyxpREFBOEM7SUFLckYsK0JBQVksSUFBaUM7ZUFFekMsa0JBQU0sSUFBSSxFQUFFLEVBQUMsWUFBWSxFQUFHLEdBQUcsRUFBRSxlQUFlLEVBQUcsZ0NBQWdDLEVBQUUsbUJBQW1CLEVBQUcsK0RBQThCLEVBQUcsQ0FBQztJQUNqSixDQUFDO0lBRVMsNENBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsYUFBYSxFQUFFO1lBQzdELE1BQU0sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLE1BQU0sRUFBRTtZQUN6QyxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLG1EQUF3QixFQUFFLE9BQU8sRUFBRywwQkFBMEIsRUFBRTtZQUM1RyxLQUFLLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVDQUFrQixFQUFFLE9BQU8sRUFBRyxvQkFBb0IsRUFBRTtTQUN0RixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsNEJBQUM7QUFBRCxDQXhCQSxBQXdCQyxDQXhCMEMsZ0NBQWMsR0F3QnhEO0FBeEJZLHNEQUFxQiIsImZpbGUiOiJhcGkvdHlwZXMvVGh1bWJQYXJhbXNMaXN0QWN0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUaHVtYlBhcmFtc0xpc3RSZXNwb25zZSB9IGZyb20gJy4vS2FsdHVyYVRodW1iUGFyYW1zTGlzdFJlc3BvbnNlJztcblxuaW1wb3J0IHsgS2FsdHVyYVRodW1iUGFyYW1zRmlsdGVyIH0gZnJvbSAnLi9LYWx0dXJhVGh1bWJQYXJhbXNGaWx0ZXInO1xuaW1wb3J0IHsgS2FsdHVyYUZpbHRlclBhZ2VyIH0gZnJvbSAnLi9LYWx0dXJhRmlsdGVyUGFnZXInO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGh1bWJQYXJhbXNMaXN0QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGZpbHRlcj8gOiBLYWx0dXJhVGh1bWJQYXJhbXNGaWx0ZXI7XG5cdHBhZ2VyPyA6IEthbHR1cmFGaWx0ZXJQYWdlcjtcbn1cblxuLyoqXG4gKiBCdWlsZCByZXF1ZXN0IHBheWxvYWQgZm9yIHNlcnZpY2UgJ3RodW1iUGFyYW1zJyBhY3Rpb24gJ2xpc3QnLlxuICpcbiAqIFVzYWdlOiBMaXN0IFRodW1iIFBhcmFtcyBieSBmaWx0ZXIgd2l0aCBwYWdpbmcgc3VwcG9ydCAoQnkgZGVmYXVsdCAtIGFsbCBzeXN0ZW0gZGVmYXVsdCBwYXJhbXMgd2lsbCBiZSBsaXN0ZWQgdG9vKVxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFUaHVtYlBhcmFtc0xpc3RSZXNwb25zZVxuICogU2VydmVyIGZhaWx1cmUgcmVzcG9uc2UgdHlwZTogS2FsdHVyYUFQSUV4Y2VwdGlvblxuICogQGNsYXNzXG4gKiBAZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgVGh1bWJQYXJhbXNMaXN0QWN0aW9uIGV4dGVuZHMgS2FsdHVyYVJlcXVlc3Q8S2FsdHVyYVRodW1iUGFyYW1zTGlzdFJlc3BvbnNlPiB7XG5cbiAgICBmaWx0ZXIgOiBLYWx0dXJhVGh1bWJQYXJhbXNGaWx0ZXI7XG5cdHBhZ2VyIDogS2FsdHVyYUZpbHRlclBhZ2VyO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBUaHVtYlBhcmFtc0xpc3RBY3Rpb25BcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSwge3Jlc3BvbnNlVHlwZSA6ICdvJywgcmVzcG9uc2VTdWJUeXBlIDogJ0thbHR1cmFUaHVtYlBhcmFtc0xpc3RSZXNwb25zZScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhVGh1bWJQYXJhbXNMaXN0UmVzcG9uc2UgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ3RodW1icGFyYW1zJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbGlzdCcgfSxcblx0XHRcdFx0ZmlsdGVyIDogeyB0eXBlIDogJ28nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhVGh1bWJQYXJhbXNGaWx0ZXIsIHN1YlR5cGUgOiAnS2FsdHVyYVRodW1iUGFyYW1zRmlsdGVyJyB9LFxuXHRcdFx0XHRwYWdlciA6IHsgdHlwZSA6ICdvJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYUZpbHRlclBhZ2VyLCBzdWJUeXBlIDogJ0thbHR1cmFGaWx0ZXJQYWdlcicgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuIl19
