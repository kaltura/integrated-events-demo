"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaScheduleEventBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaScheduleEventStatus_1 = require("./KalturaScheduleEventStatus");
var KalturaScheduleEventRecurrenceType_1 = require("./KalturaScheduleEventRecurrenceType");
var KalturaRelatedFilter_1 = require("./KalturaRelatedFilter");
var KalturaScheduleEventBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaScheduleEventBaseFilter, _super);
    function KalturaScheduleEventBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaScheduleEventBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaScheduleEventBaseFilter' },
            idEqual: { type: 'n' },
            idIn: { type: 's' },
            idNotIn: { type: 's' },
            parentIdEqual: { type: 'n' },
            parentIdIn: { type: 's' },
            parentIdNotIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaScheduleEventStatus_1.KalturaScheduleEventStatus, subType: 'KalturaScheduleEventStatus' },
            statusIn: { type: 's' },
            startDateGreaterThanOrEqual: { type: 'd' },
            startDateLessThanOrEqual: { type: 'd' },
            endDateGreaterThanOrEqual: { type: 'd' },
            endDateLessThanOrEqual: { type: 'd' },
            referenceIdEqual: { type: 's' },
            referenceIdIn: { type: 's' },
            ownerIdEqual: { type: 's' },
            ownerIdIn: { type: 's' },
            priorityEqual: { type: 'n' },
            priorityIn: { type: 's' },
            priorityGreaterThanOrEqual: { type: 'n' },
            priorityLessThanOrEqual: { type: 'n' },
            recurrenceTypeEqual: { type: 'en', subTypeConstructor: KalturaScheduleEventRecurrenceType_1.KalturaScheduleEventRecurrenceType, subType: 'KalturaScheduleEventRecurrenceType' },
            recurrenceTypeIn: { type: 's' },
            tagsLike: { type: 's' },
            tagsMultiLikeOr: { type: 's' },
            tagsMultiLikeAnd: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' }
        });
        return result;
    };
    return KalturaScheduleEventBaseFilter;
}(KalturaRelatedFilter_1.KalturaRelatedFilter));
exports.KalturaScheduleEventBaseFilter = KalturaScheduleEventBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaScheduleEventBaseFilter', KalturaScheduleEventBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
