"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaAttachmentAssetBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaAttachmentType_1 = require("./KalturaAttachmentType");
var KalturaAttachmentAssetStatus_1 = require("./KalturaAttachmentAssetStatus");
var KalturaAssetFilter_1 = require("./KalturaAssetFilter");
var KalturaAttachmentAssetBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaAttachmentAssetBaseFilter, _super);
    function KalturaAttachmentAssetBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaAttachmentAssetBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaAttachmentAssetBaseFilter' },
            formatEqual: { type: 'es', subTypeConstructor: KalturaAttachmentType_1.KalturaAttachmentType, subType: 'KalturaAttachmentType' },
            formatIn: { type: 's' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaAttachmentAssetStatus_1.KalturaAttachmentAssetStatus, subType: 'KalturaAttachmentAssetStatus' },
            statusIn: { type: 's' },
            statusNotIn: { type: 's' }
        });
        return result;
    };
    return KalturaAttachmentAssetBaseFilter;
}(KalturaAssetFilter_1.KalturaAssetFilter));
exports.KalturaAttachmentAssetBaseFilter = KalturaAttachmentAssetBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaAttachmentAssetBaseFilter', KalturaAttachmentAssetBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELGlFQUFnRTtBQUNoRSwrRUFBOEU7QUFDOUUsMkRBQWtGO0FBV2xGO0lBQXNELDREQUFrQjtJQVFwRSwwQ0FBWSxJQUE0QztlQUVwRCxrQkFBTSxJQUFJLENBQUM7SUFDZixDQUFDO0lBRVMsdURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsa0NBQWtDLEVBQUU7WUFDckYsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyw2Q0FBcUIsRUFBRSxPQUFPLEVBQUcsdUJBQXVCLEVBQUU7WUFDNUcsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDJEQUE0QixFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUMxSCxRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLFdBQVcsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDbkIsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLHVDQUFDO0FBQUQsQ0E3QkEsQUE2QkMsQ0E3QnFELHVDQUFrQixHQTZCdkU7QUE3QlksNEVBQWdDO0FBK0I3QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsa0NBQWtDLEVBQUMsZ0NBQWdDLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYUF0dGFjaG1lbnRBc3NldEJhc2VGaWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhQXR0YWNobWVudFR5cGUgfSBmcm9tICcuL0thbHR1cmFBdHRhY2htZW50VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhQXR0YWNobWVudEFzc2V0U3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhQXR0YWNobWVudEFzc2V0U3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFBc3NldEZpbHRlciwgS2FsdHVyYUFzc2V0RmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYUFzc2V0RmlsdGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlckFyZ3MgIGV4dGVuZHMgS2FsdHVyYUFzc2V0RmlsdGVyQXJncyB7XG4gICAgZm9ybWF0RXF1YWw/IDogS2FsdHVyYUF0dGFjaG1lbnRUeXBlO1xuXHRmb3JtYXRJbj8gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsPyA6IEthbHR1cmFBdHRhY2htZW50QXNzZXRTdGF0dXM7XG5cdHN0YXR1c0luPyA6IHN0cmluZztcblx0c3RhdHVzTm90SW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFBc3NldEZpbHRlciB7XG5cbiAgICBmb3JtYXRFcXVhbCA6IEthbHR1cmFBdHRhY2htZW50VHlwZTtcblx0Zm9ybWF0SW4gOiBzdHJpbmc7XG5cdHN0YXR1c0VxdWFsIDogS2FsdHVyYUF0dGFjaG1lbnRBc3NldFN0YXR1cztcblx0c3RhdHVzSW4gOiBzdHJpbmc7XG5cdHN0YXR1c05vdEluIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlckFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2dldE1ldGFkYXRhKCkgOiBLYWx0dXJhT2JqZWN0TWV0YWRhdGFcbiAgICB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHN1cGVyLl9nZXRNZXRhZGF0YSgpO1xuICAgICAgICBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgcmVzdWx0LnByb3BlcnRpZXMsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgb2JqZWN0VHlwZSA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdLYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlcicgfSxcblx0XHRcdFx0Zm9ybWF0RXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhQXR0YWNobWVudFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUF0dGFjaG1lbnRUeXBlJyB9LFxuXHRcdFx0XHRmb3JtYXRJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzdGF0dXNFcXVhbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFBdHRhY2htZW50QXNzZXRTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUF0dGFjaG1lbnRBc3NldFN0YXR1cycgfSxcblx0XHRcdFx0c3RhdHVzSW4gOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3RhdHVzTm90SW4gOiB7IHR5cGUgOiAncycgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuS2FsdHVyYVR5cGVzRmFjdG9yeS5yZWdpc3RlclR5cGUoJ0thbHR1cmFBdHRhY2htZW50QXNzZXRCYXNlRmlsdGVyJyxLYWx0dXJhQXR0YWNobWVudEFzc2V0QmFzZUZpbHRlcik7XG4iXX0=
