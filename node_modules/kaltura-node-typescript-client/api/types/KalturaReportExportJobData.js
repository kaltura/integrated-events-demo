"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaReportExportJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaReportExportItem_1 = require("./KalturaReportExportItem");
var KalturaReportExportFile_1 = require("./KalturaReportExportFile");
var KalturaJobData_1 = require("./KalturaJobData");
var KalturaReportExportJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaReportExportJobData, _super);
    function KalturaReportExportJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.reportItems === 'undefined')
            _this.reportItems = [];
        if (typeof _this.files === 'undefined')
            _this.files = [];
        return _this;
    }
    KalturaReportExportJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaReportExportJobData' },
            recipientEmail: { type: 's' },
            reportItems: { type: 'a', subTypeConstructor: KalturaReportExportItem_1.KalturaReportExportItem, subType: 'KalturaReportExportItem' },
            filePaths: { type: 's' },
            reportsGroup: { type: 's' },
            files: { type: 'a', subTypeConstructor: KalturaReportExportFile_1.KalturaReportExportFile, subType: 'KalturaReportExportFile' },
            baseUrl: { type: 's' }
        });
        return result;
    };
    return KalturaReportExportJobData;
}(KalturaJobData_1.KalturaJobData));
exports.KalturaReportExportJobData = KalturaReportExportJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaReportExportJobData', KalturaReportExportJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhUmVwb3J0RXhwb3J0Sm9iRGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHFFQUFvRTtBQUNwRSxxRUFBb0U7QUFDcEUsbURBQXNFO0FBWXRFO0lBQWdELHNEQUFjO0lBUzFELG9DQUFZLElBQXNDO1FBQWxELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBR2Q7UUFGRyxJQUFJLE9BQU8sS0FBSSxDQUFDLFdBQVcsS0FBSyxXQUFXO1lBQUUsS0FBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7UUFDekUsSUFBSSxPQUFPLEtBQUksQ0FBQyxLQUFLLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDOztJQUNyRCxDQUFDO0lBRVMsaURBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDL0UsY0FBYyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMvQixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLGlEQUF1QixFQUFFLE9BQU8sRUFBRyx5QkFBeUIsRUFBRTtZQUMvRyxTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsS0FBSyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyxpREFBdUIsRUFBRSxPQUFPLEVBQUcseUJBQXlCLEVBQUU7WUFDekcsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUNmLENBQ0osQ0FBQztRQUNGLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDTCxpQ0FBQztBQUFELENBakNBLEFBaUNDLENBakMrQywrQkFBYyxHQWlDN0Q7QUFqQ1ksZ0VBQTBCO0FBbUN2QywyQ0FBbUIsQ0FBQyxZQUFZLENBQUMsNEJBQTRCLEVBQUMsMEJBQTBCLENBQUMsQ0FBQyIsImZpbGUiOiJhcGkvdHlwZXMvS2FsdHVyYVJlcG9ydEV4cG9ydEpvYkRhdGEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYVR5cGVzRmFjdG9yeSB9IGZyb20gJy4uL2thbHR1cmEtdHlwZXMtZmFjdG9yeSc7XG5pbXBvcnQgeyBLYWx0dXJhUmVwb3J0RXhwb3J0SXRlbSB9IGZyb20gJy4vS2FsdHVyYVJlcG9ydEV4cG9ydEl0ZW0nO1xuaW1wb3J0IHsgS2FsdHVyYVJlcG9ydEV4cG9ydEZpbGUgfSBmcm9tICcuL0thbHR1cmFSZXBvcnRFeHBvcnRGaWxlJztcbmltcG9ydCB7IEthbHR1cmFKb2JEYXRhLCBLYWx0dXJhSm9iRGF0YUFyZ3MgfSBmcm9tICcuL0thbHR1cmFKb2JEYXRhJztcblxuZXhwb3J0IGludGVyZmFjZSBLYWx0dXJhUmVwb3J0RXhwb3J0Sm9iRGF0YUFyZ3MgIGV4dGVuZHMgS2FsdHVyYUpvYkRhdGFBcmdzIHtcbiAgICByZWNpcGllbnRFbWFpbD8gOiBzdHJpbmc7XG5cdHJlcG9ydEl0ZW1zPyA6IEthbHR1cmFSZXBvcnRFeHBvcnRJdGVtW107XG5cdGZpbGVQYXRocz8gOiBzdHJpbmc7XG5cdHJlcG9ydHNHcm91cD8gOiBzdHJpbmc7XG5cdGZpbGVzPyA6IEthbHR1cmFSZXBvcnRFeHBvcnRGaWxlW107XG5cdGJhc2VVcmw/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhUmVwb3J0RXhwb3J0Sm9iRGF0YSBleHRlbmRzIEthbHR1cmFKb2JEYXRhIHtcblxuICAgIHJlY2lwaWVudEVtYWlsIDogc3RyaW5nO1xuXHRyZXBvcnRJdGVtcyA6IEthbHR1cmFSZXBvcnRFeHBvcnRJdGVtW107XG5cdGZpbGVQYXRocyA6IHN0cmluZztcblx0cmVwb3J0c0dyb3VwIDogc3RyaW5nO1xuXHRmaWxlcyA6IEthbHR1cmFSZXBvcnRFeHBvcnRGaWxlW107XG5cdGJhc2VVcmwgOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihkYXRhPyA6IEthbHR1cmFSZXBvcnRFeHBvcnRKb2JEYXRhQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMucmVwb3J0SXRlbXMgPT09ICd1bmRlZmluZWQnKSB0aGlzLnJlcG9ydEl0ZW1zID0gW107XG5cdFx0aWYgKHR5cGVvZiB0aGlzLmZpbGVzID09PSAndW5kZWZpbmVkJykgdGhpcy5maWxlcyA9IFtdO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBvYmplY3RUeXBlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ0thbHR1cmFSZXBvcnRFeHBvcnRKb2JEYXRhJyB9LFxuXHRcdFx0XHRyZWNpcGllbnRFbWFpbCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXBvcnRJdGVtcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYVJlcG9ydEV4cG9ydEl0ZW0sIHN1YlR5cGUgOiAnS2FsdHVyYVJlcG9ydEV4cG9ydEl0ZW0nIH0sXG5cdFx0XHRcdGZpbGVQYXRocyA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRyZXBvcnRzR3JvdXAgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0ZmlsZXMgOiB7IHR5cGUgOiAnYScsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFSZXBvcnRFeHBvcnRGaWxlLCBzdWJUeXBlIDogJ0thbHR1cmFSZXBvcnRFeHBvcnRGaWxlJyB9LFxuXHRcdFx0XHRiYXNlVXJsIDogeyB0eXBlIDogJ3MnIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG59XG5cbkthbHR1cmFUeXBlc0ZhY3RvcnkucmVnaXN0ZXJUeXBlKCdLYWx0dXJhUmVwb3J0RXhwb3J0Sm9iRGF0YScsS2FsdHVyYVJlcG9ydEV4cG9ydEpvYkRhdGEpO1xuIl19
