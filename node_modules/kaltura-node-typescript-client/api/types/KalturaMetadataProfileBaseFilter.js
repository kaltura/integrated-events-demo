"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaMetadataProfileBaseFilter = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaMetadataObjectType_1 = require("./KalturaMetadataObjectType");
var KalturaMetadataProfileStatus_1 = require("./KalturaMetadataProfileStatus");
var KalturaMetadataProfileCreateMode_1 = require("./KalturaMetadataProfileCreateMode");
var KalturaFilter_1 = require("./KalturaFilter");
var KalturaMetadataProfileBaseFilter = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaMetadataProfileBaseFilter, _super);
    function KalturaMetadataProfileBaseFilter(data) {
        return _super.call(this, data) || this;
    }
    KalturaMetadataProfileBaseFilter.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaMetadataProfileBaseFilter' },
            idEqual: { type: 'n' },
            partnerIdEqual: { type: 'n' },
            metadataObjectTypeEqual: { type: 'es', subTypeConstructor: KalturaMetadataObjectType_1.KalturaMetadataObjectType, subType: 'KalturaMetadataObjectType' },
            metadataObjectTypeIn: { type: 's' },
            versionEqual: { type: 'n' },
            nameEqual: { type: 's' },
            systemNameEqual: { type: 's' },
            systemNameIn: { type: 's' },
            createdAtGreaterThanOrEqual: { type: 'd' },
            createdAtLessThanOrEqual: { type: 'd' },
            updatedAtGreaterThanOrEqual: { type: 'd' },
            updatedAtLessThanOrEqual: { type: 'd' },
            statusEqual: { type: 'en', subTypeConstructor: KalturaMetadataProfileStatus_1.KalturaMetadataProfileStatus, subType: 'KalturaMetadataProfileStatus' },
            statusIn: { type: 's' },
            createModeEqual: { type: 'en', subTypeConstructor: KalturaMetadataProfileCreateMode_1.KalturaMetadataProfileCreateMode, subType: 'KalturaMetadataProfileCreateMode' },
            createModeNotEqual: { type: 'en', subTypeConstructor: KalturaMetadataProfileCreateMode_1.KalturaMetadataProfileCreateMode, subType: 'KalturaMetadataProfileCreateMode' },
            createModeIn: { type: 's' },
            createModeNotIn: { type: 's' }
        });
        return result;
    };
    return KalturaMetadataProfileBaseFilter;
}(KalturaFilter_1.KalturaFilter));
exports.KalturaMetadataProfileBaseFilter = KalturaMetadataProfileBaseFilter;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaMetadataProfileBaseFilter', KalturaMetadataProfileBaseFilter);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhTWV0YWRhdGFQcm9maWxlQmFzZUZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsa0VBQStEO0FBQy9ELHlFQUF3RTtBQUN4RSwrRUFBOEU7QUFDOUUsdUZBQXNGO0FBQ3RGLGlEQUFtRTtBQXdCbkU7SUFBc0QsNERBQWE7SUFxQi9ELDBDQUFZLElBQTRDO2VBRXBELGtCQUFNLElBQUksQ0FBQztJQUNmLENBQUM7SUFFUyx1REFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxVQUFVLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxrQ0FBa0MsRUFBRTtZQUNyRixPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3hCLGNBQWMsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDL0IsdUJBQXVCLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLHFEQUF5QixFQUFFLE9BQU8sRUFBRywyQkFBMkIsRUFBRTtZQUNoSSxvQkFBb0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDckMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLGVBQWUsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDaEMsWUFBWSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM3QiwyQkFBMkIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDNUMsd0JBQXdCLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pDLDJCQUEyQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1Qyx3QkFBd0IsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekMsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRywyREFBNEIsRUFBRSxPQUFPLEVBQUcsOEJBQThCLEVBQUU7WUFDMUgsUUFBUSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN6QixlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLG1FQUFnQyxFQUFFLE9BQU8sRUFBRyxrQ0FBa0MsRUFBRTtZQUN0SSxrQkFBa0IsRUFBRyxFQUFFLElBQUksRUFBRyxJQUFJLEVBQUUsa0JBQWtCLEVBQUcsbUVBQWdDLEVBQUUsT0FBTyxFQUFHLGtDQUFrQyxFQUFFO1lBQ3pJLFlBQVksRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDN0IsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN2QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsdUNBQUM7QUFBRCxDQXZEQSxBQXVEQyxDQXZEcUQsNkJBQWEsR0F1RGxFO0FBdkRZLDRFQUFnQztBQXlEN0MsMkNBQW1CLENBQUMsWUFBWSxDQUFDLGtDQUFrQyxFQUFDLGdDQUFnQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFNZXRhZGF0YVByb2ZpbGVCYXNlRmlsdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBLYWx0dXJhT2JqZWN0TWV0YWRhdGEgfSBmcm9tICcuLi9rYWx0dXJhLW9iamVjdC1iYXNlJztcbmltcG9ydCB7IEthbHR1cmFUeXBlc0ZhY3RvcnkgfSBmcm9tICcuLi9rYWx0dXJhLXR5cGVzLWZhY3RvcnknO1xuaW1wb3J0IHsgS2FsdHVyYU1ldGFkYXRhT2JqZWN0VHlwZSB9IGZyb20gJy4vS2FsdHVyYU1ldGFkYXRhT2JqZWN0VHlwZSc7XG5pbXBvcnQgeyBLYWx0dXJhTWV0YWRhdGFQcm9maWxlU3RhdHVzIH0gZnJvbSAnLi9LYWx0dXJhTWV0YWRhdGFQcm9maWxlU3RhdHVzJztcbmltcG9ydCB7IEthbHR1cmFNZXRhZGF0YVByb2ZpbGVDcmVhdGVNb2RlIH0gZnJvbSAnLi9LYWx0dXJhTWV0YWRhdGFQcm9maWxlQ3JlYXRlTW9kZSc7XG5pbXBvcnQgeyBLYWx0dXJhRmlsdGVyLCBLYWx0dXJhRmlsdGVyQXJncyB9IGZyb20gJy4vS2FsdHVyYUZpbHRlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUJhc2VGaWx0ZXJBcmdzICBleHRlbmRzIEthbHR1cmFGaWx0ZXJBcmdzIHtcbiAgICBpZEVxdWFsPyA6IG51bWJlcjtcblx0cGFydG5lcklkRXF1YWw/IDogbnVtYmVyO1xuXHRtZXRhZGF0YU9iamVjdFR5cGVFcXVhbD8gOiBLYWx0dXJhTWV0YWRhdGFPYmplY3RUeXBlO1xuXHRtZXRhZGF0YU9iamVjdFR5cGVJbj8gOiBzdHJpbmc7XG5cdHZlcnNpb25FcXVhbD8gOiBudW1iZXI7XG5cdG5hbWVFcXVhbD8gOiBzdHJpbmc7XG5cdHN5c3RlbU5hbWVFcXVhbD8gOiBzdHJpbmc7XG5cdHN5c3RlbU5hbWVJbj8gOiBzdHJpbmc7XG5cdGNyZWF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRjcmVhdGVkQXRMZXNzVGhhbk9yRXF1YWw/IDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsPyA6IERhdGU7XG5cdHVwZGF0ZWRBdExlc3NUaGFuT3JFcXVhbD8gOiBEYXRlO1xuXHRzdGF0dXNFcXVhbD8gOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlU3RhdHVzO1xuXHRzdGF0dXNJbj8gOiBzdHJpbmc7XG5cdGNyZWF0ZU1vZGVFcXVhbD8gOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlQ3JlYXRlTW9kZTtcblx0Y3JlYXRlTW9kZU5vdEVxdWFsPyA6IEthbHR1cmFNZXRhZGF0YVByb2ZpbGVDcmVhdGVNb2RlO1xuXHRjcmVhdGVNb2RlSW4/IDogc3RyaW5nO1xuXHRjcmVhdGVNb2RlTm90SW4/IDogc3RyaW5nO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhTWV0YWRhdGFQcm9maWxlQmFzZUZpbHRlciBleHRlbmRzIEthbHR1cmFGaWx0ZXIge1xuXG4gICAgaWRFcXVhbCA6IG51bWJlcjtcblx0cGFydG5lcklkRXF1YWwgOiBudW1iZXI7XG5cdG1ldGFkYXRhT2JqZWN0VHlwZUVxdWFsIDogS2FsdHVyYU1ldGFkYXRhT2JqZWN0VHlwZTtcblx0bWV0YWRhdGFPYmplY3RUeXBlSW4gOiBzdHJpbmc7XG5cdHZlcnNpb25FcXVhbCA6IG51bWJlcjtcblx0bmFtZUVxdWFsIDogc3RyaW5nO1xuXHRzeXN0ZW1OYW1lRXF1YWwgOiBzdHJpbmc7XG5cdHN5c3RlbU5hbWVJbiA6IHN0cmluZztcblx0Y3JlYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0R3JlYXRlclRoYW5PckVxdWFsIDogRGF0ZTtcblx0dXBkYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogRGF0ZTtcblx0c3RhdHVzRXF1YWwgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlU3RhdHVzO1xuXHRzdGF0dXNJbiA6IHN0cmluZztcblx0Y3JlYXRlTW9kZUVxdWFsIDogS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUNyZWF0ZU1vZGU7XG5cdGNyZWF0ZU1vZGVOb3RFcXVhbCA6IEthbHR1cmFNZXRhZGF0YVByb2ZpbGVDcmVhdGVNb2RlO1xuXHRjcmVhdGVNb2RlSW4gOiBzdHJpbmc7XG5cdGNyZWF0ZU1vZGVOb3RJbiA6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/IDogS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUJhc2VGaWx0ZXJBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUJhc2VGaWx0ZXInIH0sXG5cdFx0XHRcdGlkRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cGFydG5lcklkRXF1YWwgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0bWV0YWRhdGFPYmplY3RUeXBlRXF1YWwgOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWV0YWRhdGFPYmplY3RUeXBlLCBzdWJUeXBlIDogJ0thbHR1cmFNZXRhZGF0YU9iamVjdFR5cGUnIH0sXG5cdFx0XHRcdG1ldGFkYXRhT2JqZWN0VHlwZUluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHZlcnNpb25FcXVhbCA6IHsgdHlwZSA6ICduJyB9LFxuXHRcdFx0XHRuYW1lRXF1YWwgOiB7IHR5cGUgOiAncycgfSxcblx0XHRcdFx0c3lzdGVtTmFtZUVxdWFsIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdHN5c3RlbU5hbWVJbiA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRjcmVhdGVkQXRHcmVhdGVyVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0Y3JlYXRlZEF0TGVzc1RoYW5PckVxdWFsIDogeyB0eXBlIDogJ2QnIH0sXG5cdFx0XHRcdHVwZGF0ZWRBdEdyZWF0ZXJUaGFuT3JFcXVhbCA6IHsgdHlwZSA6ICdkJyB9LFxuXHRcdFx0XHR1cGRhdGVkQXRMZXNzVGhhbk9yRXF1YWwgOiB7IHR5cGUgOiAnZCcgfSxcblx0XHRcdFx0c3RhdHVzRXF1YWwgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlU3RhdHVzLCBzdWJUeXBlIDogJ0thbHR1cmFNZXRhZGF0YVByb2ZpbGVTdGF0dXMnIH0sXG5cdFx0XHRcdHN0YXR1c0luIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNyZWF0ZU1vZGVFcXVhbCA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFNZXRhZGF0YVByb2ZpbGVDcmVhdGVNb2RlLCBzdWJUeXBlIDogJ0thbHR1cmFNZXRhZGF0YVByb2ZpbGVDcmVhdGVNb2RlJyB9LFxuXHRcdFx0XHRjcmVhdGVNb2RlTm90RXF1YWwgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTWV0YWRhdGFQcm9maWxlQ3JlYXRlTW9kZSwgc3ViVHlwZSA6ICdLYWx0dXJhTWV0YWRhdGFQcm9maWxlQ3JlYXRlTW9kZScgfSxcblx0XHRcdFx0Y3JlYXRlTW9kZUluIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGNyZWF0ZU1vZGVOb3RJbiA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYU1ldGFkYXRhUHJvZmlsZUJhc2VGaWx0ZXInLEthbHR1cmFNZXRhZGF0YVByb2ZpbGVCYXNlRmlsdGVyKTtcbiJdfQ==
