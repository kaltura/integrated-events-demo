"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveChannelRegisterMediaServerAction = void 0;
var tslib_1 = require("tslib");
var KalturaLiveEntry_1 = require("./KalturaLiveEntry");
var KalturaEntryServerNodeType_1 = require("./KalturaEntryServerNodeType");
var KalturaEntryServerNodeStatus_1 = require("./KalturaEntryServerNodeStatus");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'liveChannel' action 'registerMediaServer'.
 *
 * Usage: Register media server to live entry
 *
 * Server response type:         KalturaLiveEntry
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var LiveChannelRegisterMediaServerAction = /** @class */ (function (_super) {
    tslib_1.__extends(LiveChannelRegisterMediaServerAction, _super);
    function LiveChannelRegisterMediaServerAction(data) {
        var _this = _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaLiveEntry', responseConstructor: KalturaLiveEntry_1.KalturaLiveEntry }) || this;
        if (typeof _this.liveEntryStatus === 'undefined')
            _this.liveEntryStatus = 1;
        if (typeof _this.shouldCreateRecordedEntry === 'undefined')
            _this.shouldCreateRecordedEntry = true;
        return _this;
    }
    LiveChannelRegisterMediaServerAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'livechannel' },
            action: { type: 'c', default: 'registerMediaServer' },
            entryId: { type: 's' },
            hostname: { type: 's' },
            mediaServerIndex: { type: 'es', subTypeConstructor: KalturaEntryServerNodeType_1.KalturaEntryServerNodeType, subType: 'KalturaEntryServerNodeType' },
            applicationName: { type: 's' },
            liveEntryStatus: { type: 'en', subTypeConstructor: KalturaEntryServerNodeStatus_1.KalturaEntryServerNodeStatus, subType: 'KalturaEntryServerNodeStatus' },
            shouldCreateRecordedEntry: { type: 'b' }
        });
        return result;
    };
    return LiveChannelRegisterMediaServerAction;
}(kaltura_request_1.KalturaRequest));
exports.LiveChannelRegisterMediaServerAction = LiveChannelRegisterMediaServerAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9MaXZlQ2hhbm5lbFJlZ2lzdGVyTWVkaWFTZXJ2ZXJBY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLHVEQUFzRDtBQUV0RCwyRUFBMEU7QUFDMUUsK0VBQThFO0FBQzlFLHNEQUF3RTtBQVd4RTs7Ozs7Ozs7O0dBU0c7QUFDSDtJQUEwRCxnRUFBZ0M7SUFTdEYsOENBQVksSUFBK0M7UUFBM0QsWUFFSSxrQkFBTSxJQUFJLEVBQUUsRUFBQyxZQUFZLEVBQUcsR0FBRyxFQUFFLGVBQWUsRUFBRyxrQkFBa0IsRUFBRSxtQkFBbUIsRUFBRyxtQ0FBZ0IsRUFBRyxDQUFDLFNBR3BIO1FBRkcsSUFBSSxPQUFPLEtBQUksQ0FBQyxlQUFlLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ2hGLElBQUksT0FBTyxLQUFJLENBQUMseUJBQXlCLEtBQUssV0FBVztZQUFFLEtBQUksQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7O0lBQy9GLENBQUM7SUFFUywyREFBWSxHQUF0QjtRQUVJLElBQU0sTUFBTSxHQUFHLGlCQUFNLFlBQVksV0FBRSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxNQUFNLENBQ1QsTUFBTSxDQUFDLFVBQVUsRUFDakI7WUFDSSxPQUFPLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxhQUFhLEVBQUU7WUFDN0QsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcscUJBQXFCLEVBQUU7WUFDeEQsT0FBTyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUN4QixRQUFRLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQ3pCLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx1REFBMEIsRUFBRSxPQUFPLEVBQUcsNEJBQTRCLEVBQUU7WUFDM0gsZUFBZSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUNoQyxlQUFlLEVBQUcsRUFBRSxJQUFJLEVBQUcsSUFBSSxFQUFFLGtCQUFrQixFQUFHLDJEQUE0QixFQUFFLE9BQU8sRUFBRyw4QkFBOEIsRUFBRTtZQUM5SCx5QkFBeUIsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7U0FDakMsQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLDJDQUFDO0FBQUQsQ0FsQ0EsQUFrQ0MsQ0FsQ3lELGdDQUFjLEdBa0N2RTtBQWxDWSxvRkFBb0MiLCJmaWxlIjoiYXBpL3R5cGVzL0xpdmVDaGFubmVsUmVnaXN0ZXJNZWRpYVNlcnZlckFjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhTGl2ZUVudHJ5IH0gZnJvbSAnLi9LYWx0dXJhTGl2ZUVudHJ5JztcblxuaW1wb3J0IHsgS2FsdHVyYUVudHJ5U2VydmVyTm9kZVR5cGUgfSBmcm9tICcuL0thbHR1cmFFbnRyeVNlcnZlck5vZGVUeXBlJztcbmltcG9ydCB7IEthbHR1cmFFbnRyeVNlcnZlck5vZGVTdGF0dXMgfSBmcm9tICcuL0thbHR1cmFFbnRyeVNlcnZlck5vZGVTdGF0dXMnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3QsIEthbHR1cmFSZXF1ZXN0QXJncyB9IGZyb20gJy4uL2thbHR1cmEtcmVxdWVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGl2ZUNoYW5uZWxSZWdpc3Rlck1lZGlhU2VydmVyQWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIGVudHJ5SWQgOiBzdHJpbmc7XG5cdGhvc3RuYW1lIDogc3RyaW5nO1xuXHRtZWRpYVNlcnZlckluZGV4IDogS2FsdHVyYUVudHJ5U2VydmVyTm9kZVR5cGU7XG5cdGFwcGxpY2F0aW9uTmFtZT8gOiBzdHJpbmc7XG5cdGxpdmVFbnRyeVN0YXR1cz8gOiBLYWx0dXJhRW50cnlTZXJ2ZXJOb2RlU3RhdHVzO1xuXHRzaG91bGRDcmVhdGVSZWNvcmRlZEVudHJ5PyA6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQnVpbGQgcmVxdWVzdCBwYXlsb2FkIGZvciBzZXJ2aWNlICdsaXZlQ2hhbm5lbCcgYWN0aW9uICdyZWdpc3Rlck1lZGlhU2VydmVyJy5cbiAqXG4gKiBVc2FnZTogUmVnaXN0ZXIgbWVkaWEgc2VydmVyIHRvIGxpdmUgZW50cnlcbiAqXG4gKiBTZXJ2ZXIgcmVzcG9uc2UgdHlwZTogICAgICAgICBLYWx0dXJhTGl2ZUVudHJ5XG4gKiBTZXJ2ZXIgZmFpbHVyZSByZXNwb25zZSB0eXBlOiBLYWx0dXJhQVBJRXhjZXB0aW9uXG4gKiBAY2xhc3NcbiAqIEBleHRlbmRzIEthbHR1cmFSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXZlQ2hhbm5lbFJlZ2lzdGVyTWVkaWFTZXJ2ZXJBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhTGl2ZUVudHJ5PiB7XG5cbiAgICBlbnRyeUlkIDogc3RyaW5nO1xuXHRob3N0bmFtZSA6IHN0cmluZztcblx0bWVkaWFTZXJ2ZXJJbmRleCA6IEthbHR1cmFFbnRyeVNlcnZlck5vZGVUeXBlO1xuXHRhcHBsaWNhdGlvbk5hbWUgOiBzdHJpbmc7XG5cdGxpdmVFbnRyeVN0YXR1cyA6IEthbHR1cmFFbnRyeVNlcnZlck5vZGVTdGF0dXM7XG5cdHNob3VsZENyZWF0ZVJlY29yZGVkRW50cnkgOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YSA6IExpdmVDaGFubmVsUmVnaXN0ZXJNZWRpYVNlcnZlckFjdGlvbkFyZ3MpXG4gICAge1xuICAgICAgICBzdXBlcihkYXRhLCB7cmVzcG9uc2VUeXBlIDogJ28nLCByZXNwb25zZVN1YlR5cGUgOiAnS2FsdHVyYUxpdmVFbnRyeScsIHJlc3BvbnNlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZUVudHJ5ICB9KTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmxpdmVFbnRyeVN0YXR1cyA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMubGl2ZUVudHJ5U3RhdHVzID0gMTtcblx0XHRpZiAodHlwZW9mIHRoaXMuc2hvdWxkQ3JlYXRlUmVjb3JkZWRFbnRyeSA9PT0gJ3VuZGVmaW5lZCcpIHRoaXMuc2hvdWxkQ3JlYXRlUmVjb3JkZWRFbnRyeSA9IHRydWU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnbGl2ZWNoYW5uZWwnIH0sXG5cdFx0XHRcdGFjdGlvbiA6IHsgdHlwZSA6ICdjJywgZGVmYXVsdCA6ICdyZWdpc3Rlck1lZGlhU2VydmVyJyB9LFxuXHRcdFx0XHRlbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGhvc3RuYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdG1lZGlhU2VydmVySW5kZXggOiB7IHR5cGUgOiAnZXMnLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhRW50cnlTZXJ2ZXJOb2RlVHlwZSwgc3ViVHlwZSA6ICdLYWx0dXJhRW50cnlTZXJ2ZXJOb2RlVHlwZScgfSxcblx0XHRcdFx0YXBwbGljYXRpb25OYW1lIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGxpdmVFbnRyeVN0YXR1cyA6IHsgdHlwZSA6ICdlbicsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFFbnRyeVNlcnZlck5vZGVTdGF0dXMsIHN1YlR5cGUgOiAnS2FsdHVyYUVudHJ5U2VydmVyTm9kZVN0YXR1cycgfSxcblx0XHRcdFx0c2hvdWxkQ3JlYXRlUmVjb3JkZWRFbnRyeSA6IHsgdHlwZSA6ICdiJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
