"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaLiveEntry = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaRecordStatus_1 = require("./KalturaRecordStatus");
var KalturaDVRStatus_1 = require("./KalturaDVRStatus");
var KalturaLiveStreamConfiguration_1 = require("./KalturaLiveStreamConfiguration");
var KalturaLivePublishStatus_1 = require("./KalturaLivePublishStatus");
var KalturaLiveStreamPushPublishConfiguration_1 = require("./KalturaLiveStreamPushPublishConfiguration");
var KalturaLiveEntryRecordingOptions_1 = require("./KalturaLiveEntryRecordingOptions");
var KalturaEntryServerNodeStatus_1 = require("./KalturaEntryServerNodeStatus");
var KalturaNullableBoolean_1 = require("./KalturaNullableBoolean");
var KalturaViewMode_1 = require("./KalturaViewMode");
var KalturaRecordingStatus_1 = require("./KalturaRecordingStatus");
var KalturaMediaEntry_1 = require("./KalturaMediaEntry");
var KalturaLiveEntry = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaLiveEntry, _super);
    function KalturaLiveEntry(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.liveStreamConfigurations === 'undefined')
            _this.liveStreamConfigurations = [];
        if (typeof _this.publishConfigurations === 'undefined')
            _this.publishConfigurations = [];
        return _this;
    }
    KalturaLiveEntry.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaLiveEntry' },
            offlineMessage: { type: 's' },
            recordStatus: { type: 'en', subTypeConstructor: KalturaRecordStatus_1.KalturaRecordStatus, subType: 'KalturaRecordStatus' },
            dvrStatus: { type: 'en', subTypeConstructor: KalturaDVRStatus_1.KalturaDVRStatus, subType: 'KalturaDVRStatus' },
            dvrWindow: { type: 'n' },
            lastElapsedRecordingTime: { type: 'n' },
            liveStreamConfigurations: { type: 'a', subTypeConstructor: KalturaLiveStreamConfiguration_1.KalturaLiveStreamConfiguration, subType: 'KalturaLiveStreamConfiguration' },
            recordedEntryId: { type: 's' },
            pushPublishEnabled: { type: 'en', subTypeConstructor: KalturaLivePublishStatus_1.KalturaLivePublishStatus, subType: 'KalturaLivePublishStatus' },
            publishConfigurations: { type: 'a', subTypeConstructor: KalturaLiveStreamPushPublishConfiguration_1.KalturaLiveStreamPushPublishConfiguration, subType: 'KalturaLiveStreamPushPublishConfiguration' },
            firstBroadcast: { type: 'n', readOnly: true },
            lastBroadcast: { type: 'n', readOnly: true },
            currentBroadcastStartTime: { type: 'n' },
            recordingOptions: { type: 'o', subTypeConstructor: KalturaLiveEntryRecordingOptions_1.KalturaLiveEntryRecordingOptions, subType: 'KalturaLiveEntryRecordingOptions' },
            liveStatus: { type: 'en', readOnly: true, subTypeConstructor: KalturaEntryServerNodeStatus_1.KalturaEntryServerNodeStatus, subType: 'KalturaEntryServerNodeStatus' },
            segmentDuration: { type: 'n' },
            explicitLive: { type: 'en', subTypeConstructor: KalturaNullableBoolean_1.KalturaNullableBoolean, subType: 'KalturaNullableBoolean' },
            viewMode: { type: 'en', subTypeConstructor: KalturaViewMode_1.KalturaViewMode, subType: 'KalturaViewMode' },
            recordingStatus: { type: 'en', subTypeConstructor: KalturaRecordingStatus_1.KalturaRecordingStatus, subType: 'KalturaRecordingStatus' },
            lastBroadcastEndTime: { type: 'n', readOnly: true },
            broadcastTime: { type: 'n' }
        });
        return result;
    };
    return KalturaLiveEntry;
}(KalturaMediaEntry_1.KalturaMediaEntry));
exports.KalturaLiveEntry = KalturaLiveEntry;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaLiveEntry', KalturaLiveEntry);

//# sourceMappingURL=data:application/json;charset=utf8;base64,
