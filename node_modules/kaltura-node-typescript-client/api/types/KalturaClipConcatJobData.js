"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaClipConcatJobData = void 0;
var tslib_1 = require("tslib");
var kaltura_types_factory_1 = require("../kaltura-types-factory");
var KalturaOperationAttributes_1 = require("./KalturaOperationAttributes");
var KalturaJobData_1 = require("./KalturaJobData");
var KalturaClipConcatJobData = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaClipConcatJobData, _super);
    function KalturaClipConcatJobData(data) {
        var _this = _super.call(this, data) || this;
        if (typeof _this.operationAttributes === 'undefined')
            _this.operationAttributes = [];
        return _this;
    }
    KalturaClipConcatJobData.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            objectType: { type: 'c', default: 'KalturaClipConcatJobData' },
            destEntryId: { type: 's' },
            tempEntryId: { type: 's' },
            sourceEntryId: { type: 's' },
            importUrl: { type: 's' },
            partnerId: { type: 'n' },
            priority: { type: 'n' },
            operationAttributes: { type: 'a', subTypeConstructor: KalturaOperationAttributes_1.KalturaOperationAttributes, subType: 'KalturaOperationAttributes' },
            resourceOrder: { type: 'n' },
            conversionParams: { type: 's' }
        });
        return result;
    };
    return KalturaClipConcatJobData;
}(KalturaJobData_1.KalturaJobData));
exports.KalturaClipConcatJobData = KalturaClipConcatJobData;
kaltura_types_factory_1.KalturaTypesFactory.registerType('KalturaClipConcatJobData', KalturaClipConcatJobData);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9LYWx0dXJhQ2xpcENvbmNhdEpvYkRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGtFQUErRDtBQUMvRCwyRUFBMEU7QUFDMUUsbURBQXNFO0FBZXRFO0lBQThDLG9EQUFjO0lBWXhELGtDQUFZLElBQW9DO1FBQWhELFlBRUksa0JBQU0sSUFBSSxDQUFDLFNBRWQ7UUFERyxJQUFJLE9BQU8sS0FBSSxDQUFDLG1CQUFtQixLQUFLLFdBQVc7WUFBRSxLQUFJLENBQUMsbUJBQW1CLEdBQUcsRUFBRSxDQUFDOztJQUN2RixDQUFDO0lBRVMsK0NBQVksR0FBdEI7UUFFSSxJQUFNLE1BQU0sR0FBRyxpQkFBTSxZQUFZLFdBQUUsQ0FBQztRQUNwQyxNQUFNLENBQUMsTUFBTSxDQUNULE1BQU0sQ0FBQyxVQUFVLEVBQ2pCO1lBQ0ksVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxPQUFPLEVBQUcsMEJBQTBCLEVBQUU7WUFDN0UsV0FBVyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUM1QixXQUFXLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzVCLGFBQWEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDOUIsU0FBUyxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtZQUMxQixTQUFTLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzFCLFFBQVEsRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUU7WUFDekIsbUJBQW1CLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLGtCQUFrQixFQUFHLHVEQUEwQixFQUFFLE9BQU8sRUFBRyw0QkFBNEIsRUFBRTtZQUM3SCxhQUFhLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFO1lBQzlCLGdCQUFnQixFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRTtTQUN4QixDQUNKLENBQUM7UUFDRixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBQ0wsK0JBQUM7QUFBRCxDQXRDQSxBQXNDQyxDQXRDNkMsK0JBQWMsR0FzQzNEO0FBdENZLDREQUF3QjtBQXdDckMsMkNBQW1CLENBQUMsWUFBWSxDQUFDLDBCQUEwQixFQUFDLHdCQUF3QixDQUFDLENBQUMiLCJmaWxlIjoiYXBpL3R5cGVzL0thbHR1cmFDbGlwQ29uY2F0Sm9iRGF0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgS2FsdHVyYU9iamVjdE1ldGFkYXRhIH0gZnJvbSAnLi4va2FsdHVyYS1vYmplY3QtYmFzZSc7XG5pbXBvcnQgeyBLYWx0dXJhVHlwZXNGYWN0b3J5IH0gZnJvbSAnLi4va2FsdHVyYS10eXBlcy1mYWN0b3J5JztcbmltcG9ydCB7IEthbHR1cmFPcGVyYXRpb25BdHRyaWJ1dGVzIH0gZnJvbSAnLi9LYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlcyc7XG5pbXBvcnQgeyBLYWx0dXJhSm9iRGF0YSwgS2FsdHVyYUpvYkRhdGFBcmdzIH0gZnJvbSAnLi9LYWx0dXJhSm9iRGF0YSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2FsdHVyYUNsaXBDb25jYXRKb2JEYXRhQXJncyAgZXh0ZW5kcyBLYWx0dXJhSm9iRGF0YUFyZ3Mge1xuICAgIGRlc3RFbnRyeUlkPyA6IHN0cmluZztcblx0dGVtcEVudHJ5SWQ/IDogc3RyaW5nO1xuXHRzb3VyY2VFbnRyeUlkPyA6IHN0cmluZztcblx0aW1wb3J0VXJsPyA6IHN0cmluZztcblx0cGFydG5lcklkPyA6IG51bWJlcjtcblx0cHJpb3JpdHk/IDogbnVtYmVyO1xuXHRvcGVyYXRpb25BdHRyaWJ1dGVzPyA6IEthbHR1cmFPcGVyYXRpb25BdHRyaWJ1dGVzW107XG5cdHJlc291cmNlT3JkZXI/IDogbnVtYmVyO1xuXHRjb252ZXJzaW9uUGFyYW1zPyA6IHN0cmluZztcbn1cblxuXG5leHBvcnQgY2xhc3MgS2FsdHVyYUNsaXBDb25jYXRKb2JEYXRhIGV4dGVuZHMgS2FsdHVyYUpvYkRhdGEge1xuXG4gICAgZGVzdEVudHJ5SWQgOiBzdHJpbmc7XG5cdHRlbXBFbnRyeUlkIDogc3RyaW5nO1xuXHRzb3VyY2VFbnRyeUlkIDogc3RyaW5nO1xuXHRpbXBvcnRVcmwgOiBzdHJpbmc7XG5cdHBhcnRuZXJJZCA6IG51bWJlcjtcblx0cHJpb3JpdHkgOiBudW1iZXI7XG5cdG9wZXJhdGlvbkF0dHJpYnV0ZXMgOiBLYWx0dXJhT3BlcmF0aW9uQXR0cmlidXRlc1tdO1xuXHRyZXNvdXJjZU9yZGVyIDogbnVtYmVyO1xuXHRjb252ZXJzaW9uUGFyYW1zIDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT8gOiBLYWx0dXJhQ2xpcENvbmNhdEpvYkRhdGFBcmdzKVxuICAgIHtcbiAgICAgICAgc3VwZXIoZGF0YSk7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcGVyYXRpb25BdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJykgdGhpcy5vcGVyYXRpb25BdHRyaWJ1dGVzID0gW107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9nZXRNZXRhZGF0YSgpIDogS2FsdHVyYU9iamVjdE1ldGFkYXRhXG4gICAge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdXBlci5fZ2V0TWV0YWRhdGEoKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHJlc3VsdC5wcm9wZXJ0aWVzLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG9iamVjdFR5cGUgOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnS2FsdHVyYUNsaXBDb25jYXRKb2JEYXRhJyB9LFxuXHRcdFx0XHRkZXN0RW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHR0ZW1wRW50cnlJZCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRzb3VyY2VFbnRyeUlkIDogeyB0eXBlIDogJ3MnIH0sXG5cdFx0XHRcdGltcG9ydFVybCA6IHsgdHlwZSA6ICdzJyB9LFxuXHRcdFx0XHRwYXJ0bmVySWQgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0cHJpb3JpdHkgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0b3BlcmF0aW9uQXR0cmlidXRlcyA6IHsgdHlwZSA6ICdhJywgc3ViVHlwZUNvbnN0cnVjdG9yIDogS2FsdHVyYU9wZXJhdGlvbkF0dHJpYnV0ZXMsIHN1YlR5cGUgOiAnS2FsdHVyYU9wZXJhdGlvbkF0dHJpYnV0ZXMnIH0sXG5cdFx0XHRcdHJlc291cmNlT3JkZXIgOiB7IHR5cGUgOiAnbicgfSxcblx0XHRcdFx0Y29udmVyc2lvblBhcmFtcyA6IHsgdHlwZSA6ICdzJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5LYWx0dXJhVHlwZXNGYWN0b3J5LnJlZ2lzdGVyVHlwZSgnS2FsdHVyYUNsaXBDb25jYXRKb2JEYXRhJyxLYWx0dXJhQ2xpcENvbmNhdEpvYkRhdGEpO1xuIl19
