"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiveReportsExportToCsvAction = void 0;
var tslib_1 = require("tslib");
var KalturaLiveReportExportResponse_1 = require("./KalturaLiveReportExportResponse");
var KalturaLiveReportExportType_1 = require("./KalturaLiveReportExportType");
var KalturaLiveReportExportParams_1 = require("./KalturaLiveReportExportParams");
var kaltura_request_1 = require("../kaltura-request");
/**
 * Build request payload for service 'liveReports' action 'exportToCsv'.
 *
 *
 *
 * Server response type:         KalturaLiveReportExportResponse
 * Server failure response type: KalturaAPIException
 * @class
 * @extends KalturaRequest
 */
var LiveReportsExportToCsvAction = /** @class */ (function (_super) {
    tslib_1.__extends(LiveReportsExportToCsvAction, _super);
    function LiveReportsExportToCsvAction(data) {
        return _super.call(this, data, { responseType: 'o', responseSubType: 'KalturaLiveReportExportResponse', responseConstructor: KalturaLiveReportExportResponse_1.KalturaLiveReportExportResponse }) || this;
    }
    LiveReportsExportToCsvAction.prototype._getMetadata = function () {
        var result = _super.prototype._getMetadata.call(this);
        Object.assign(result.properties, {
            service: { type: 'c', default: 'livereports' },
            action: { type: 'c', default: 'exportToCsv' },
            reportType: { type: 'en', subTypeConstructor: KalturaLiveReportExportType_1.KalturaLiveReportExportType, subType: 'KalturaLiveReportExportType' },
            params: { type: 'o', subTypeConstructor: KalturaLiveReportExportParams_1.KalturaLiveReportExportParams, subType: 'KalturaLiveReportExportParams' }
        });
        return result;
    };
    return LiveReportsExportToCsvAction;
}(kaltura_request_1.KalturaRequest));
exports.LiveReportsExportToCsvAction = LiveReportsExportToCsvAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS90eXBlcy9MaXZlUmVwb3J0c0V4cG9ydFRvQ3N2QWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxxRkFBb0Y7QUFFcEYsNkVBQTRFO0FBQzVFLGlGQUFnRjtBQUNoRixzREFBd0U7QUFPeEU7Ozs7Ozs7OztHQVNHO0FBQ0g7SUFBa0Qsd0RBQStDO0lBSzdGLHNDQUFZLElBQXVDO2VBRS9DLGtCQUFNLElBQUksRUFBRSxFQUFDLFlBQVksRUFBRyxHQUFHLEVBQUUsZUFBZSxFQUFHLGlDQUFpQyxFQUFFLG1CQUFtQixFQUFHLGlFQUErQixFQUFHLENBQUM7SUFDbkosQ0FBQztJQUVTLG1EQUFZLEdBQXRCO1FBRUksSUFBTSxNQUFNLEdBQUcsaUJBQU0sWUFBWSxXQUFFLENBQUM7UUFDcEMsTUFBTSxDQUFDLE1BQU0sQ0FDVCxNQUFNLENBQUMsVUFBVSxFQUNqQjtZQUNJLE9BQU8sRUFBRyxFQUFFLElBQUksRUFBRyxHQUFHLEVBQUUsT0FBTyxFQUFHLGFBQWEsRUFBRTtZQUM3RCxNQUFNLEVBQUcsRUFBRSxJQUFJLEVBQUcsR0FBRyxFQUFFLE9BQU8sRUFBRyxhQUFhLEVBQUU7WUFDaEQsVUFBVSxFQUFHLEVBQUUsSUFBSSxFQUFHLElBQUksRUFBRSxrQkFBa0IsRUFBRyx5REFBMkIsRUFBRSxPQUFPLEVBQUcsNkJBQTZCLEVBQUU7WUFDdkgsTUFBTSxFQUFHLEVBQUUsSUFBSSxFQUFHLEdBQUcsRUFBRSxrQkFBa0IsRUFBRyw2REFBNkIsRUFBRSxPQUFPLEVBQUcsK0JBQStCLEVBQUU7U0FDN0csQ0FDSixDQUFDO1FBQ0YsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUNMLG1DQUFDO0FBQUQsQ0F4QkEsQUF3QkMsQ0F4QmlELGdDQUFjLEdBd0IvRDtBQXhCWSxvRUFBNEIiLCJmaWxlIjoiYXBpL3R5cGVzL0xpdmVSZXBvcnRzRXhwb3J0VG9Dc3ZBY3Rpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEthbHR1cmFPYmplY3RNZXRhZGF0YSB9IGZyb20gJy4uL2thbHR1cmEtb2JqZWN0LWJhc2UnO1xuaW1wb3J0IHsgS2FsdHVyYUxpdmVSZXBvcnRFeHBvcnRSZXNwb25zZSB9IGZyb20gJy4vS2FsdHVyYUxpdmVSZXBvcnRFeHBvcnRSZXNwb25zZSc7XG5cbmltcG9ydCB7IEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0VHlwZSB9IGZyb20gJy4vS2FsdHVyYUxpdmVSZXBvcnRFeHBvcnRUeXBlJztcbmltcG9ydCB7IEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0UGFyYW1zIH0gZnJvbSAnLi9LYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFBhcmFtcyc7XG5pbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCwgS2FsdHVyYVJlcXVlc3RBcmdzIH0gZnJvbSAnLi4va2FsdHVyYS1yZXF1ZXN0JztcblxuZXhwb3J0IGludGVyZmFjZSBMaXZlUmVwb3J0c0V4cG9ydFRvQ3N2QWN0aW9uQXJncyAgZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdEFyZ3Mge1xuICAgIHJlcG9ydFR5cGUgOiBLYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFR5cGU7XG5cdHBhcmFtcyA6IEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0UGFyYW1zO1xufVxuXG4vKipcbiAqIEJ1aWxkIHJlcXVlc3QgcGF5bG9hZCBmb3Igc2VydmljZSAnbGl2ZVJlcG9ydHMnIGFjdGlvbiAnZXhwb3J0VG9Dc3YnLlxuICpcbiAqIFxuICpcbiAqIFNlcnZlciByZXNwb25zZSB0eXBlOiAgICAgICAgIEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0UmVzcG9uc2VcbiAqIFNlcnZlciBmYWlsdXJlIHJlc3BvbnNlIHR5cGU6IEthbHR1cmFBUElFeGNlcHRpb25cbiAqIEBjbGFzc1xuICogQGV4dGVuZHMgS2FsdHVyYVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIExpdmVSZXBvcnRzRXhwb3J0VG9Dc3ZBY3Rpb24gZXh0ZW5kcyBLYWx0dXJhUmVxdWVzdDxLYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFJlc3BvbnNlPiB7XG5cbiAgICByZXBvcnRUeXBlIDogS2FsdHVyYUxpdmVSZXBvcnRFeHBvcnRUeXBlO1xuXHRwYXJhbXMgOiBLYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFBhcmFtcztcblxuICAgIGNvbnN0cnVjdG9yKGRhdGEgOiBMaXZlUmVwb3J0c0V4cG9ydFRvQ3N2QWN0aW9uQXJncylcbiAgICB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHtyZXNwb25zZVR5cGUgOiAnbycsIHJlc3BvbnNlU3ViVHlwZSA6ICdLYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFJlc3BvbnNlJywgcmVzcG9uc2VDb25zdHJ1Y3RvciA6IEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0UmVzcG9uc2UgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZ2V0TWV0YWRhdGEoKSA6IEthbHR1cmFPYmplY3RNZXRhZGF0YVxuICAgIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc3VwZXIuX2dldE1ldGFkYXRhKCk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICByZXN1bHQucHJvcGVydGllcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzZXJ2aWNlIDogeyB0eXBlIDogJ2MnLCBkZWZhdWx0IDogJ2xpdmVyZXBvcnRzJyB9LFxuXHRcdFx0XHRhY3Rpb24gOiB7IHR5cGUgOiAnYycsIGRlZmF1bHQgOiAnZXhwb3J0VG9Dc3YnIH0sXG5cdFx0XHRcdHJlcG9ydFR5cGUgOiB7IHR5cGUgOiAnZW4nLCBzdWJUeXBlQ29uc3RydWN0b3IgOiBLYWx0dXJhTGl2ZVJlcG9ydEV4cG9ydFR5cGUsIHN1YlR5cGUgOiAnS2FsdHVyYUxpdmVSZXBvcnRFeHBvcnRUeXBlJyB9LFxuXHRcdFx0XHRwYXJhbXMgOiB7IHR5cGUgOiAnbycsIHN1YlR5cGVDb25zdHJ1Y3RvciA6IEthbHR1cmFMaXZlUmVwb3J0RXhwb3J0UGFyYW1zLCBzdWJUeXBlIDogJ0thbHR1cmFMaXZlUmVwb3J0RXhwb3J0UGFyYW1zJyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG4iXX0=
