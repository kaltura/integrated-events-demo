"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaMultiResponse = void 0;
var tslib_1 = require("tslib");
var KalturaMultiResponse = /** @class */ (function (_super) {
    tslib_1.__extends(KalturaMultiResponse, _super);
    function KalturaMultiResponse(results) {
        if (results === void 0) { results = []; }
        var _newTarget = this.constructor;
        var _this = _super.call(this) || this;
        if (_newTarget) {
            // Set the prototype explicitly - see: https://github.com/Microsoft/TypeScript/wiki/FAQ#why-doesnt-extending-built-ins-like-error-array-and-map-work
            Object.setPrototypeOf(_this, _newTarget.prototype);
        }
        if (results && results.length > 0) {
            _this.push.apply(_this, results);
        }
        return _this;
    }
    KalturaMultiResponse.prototype.hasErrors = function () {
        return this.filter(function (result) { return result.error; }).length > 0;
    };
    KalturaMultiResponse.prototype.getFirstError = function () {
        var result = null;
        for (var i = 0; i < this.length; i++) {
            result = this[i].error;
            if (result) {
                break;
            }
        }
        return result;
    };
    return KalturaMultiResponse;
}(Array));
exports.KalturaMultiResponse = KalturaMultiResponse;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwaS9rYWx0dXJhLW11bHRpLXJlc3BvbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQTtJQUEwQyxnREFBMkI7SUFDbkUsOEJBQVksT0FBb0M7UUFBcEMsd0JBQUEsRUFBQSxZQUFvQzs7UUFBaEQsWUFDRSxpQkFBTyxTQVVSO1FBUkMsZ0JBQWdCO1lBQ2Qsb0pBQW9KO1lBQ3BKLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSSxFQUFFLFdBQVcsU0FBUyxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNqQyxLQUFJLENBQUMsSUFBSSxPQUFULEtBQUksRUFBUyxPQUFPLEVBQUU7U0FDdkI7O0lBQ0gsQ0FBQztJQUVNLHdDQUFTLEdBQWhCO1FBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLEtBQUssRUFBWixDQUFZLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFTSw0Q0FBYSxHQUFwQjtRQUNFLElBQUksTUFBTSxHQUF3QixJQUFJLENBQUM7UUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFFdkIsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTTthQUNQO1NBQ0Y7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBR0gsMkJBQUM7QUFBRCxDQS9CQSxBQStCQyxDQS9CeUMsS0FBSyxHQStCOUM7QUEvQlksb0RBQW9CIiwiZmlsZSI6ImFwaS9rYWx0dXJhLW11bHRpLXJlc3BvbnNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2FsdHVyYVJlc3BvbnNlIH0gZnJvbSBcIi4va2FsdHVyYS1yZXNwb25zZVwiO1xuaW1wb3J0IHsgS2FsdHVyYUFQSUV4Y2VwdGlvbiB9IGZyb20gJy4va2FsdHVyYS1hcGktZXhjZXB0aW9uJztcblxuZXhwb3J0IGNsYXNzIEthbHR1cmFNdWx0aVJlc3BvbnNlIGV4dGVuZHMgQXJyYXk8S2FsdHVyYVJlc3BvbnNlPGFueT4+IHtcbiAgY29uc3RydWN0b3IocmVzdWx0czogS2FsdHVyYVJlc3BvbnNlPGFueT5bXSA9IFtdKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGlmIChuZXcudGFyZ2V0KSB7XG4gICAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5IC0gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvd2lraS9GQVEjd2h5LWRvZXNudC1leHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC13b3JrXG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRzICYmIHJlc3VsdHMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5wdXNoKC4uLnJlc3VsdHMpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBoYXNFcnJvcnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKHJlc3VsdCA9PiByZXN1bHQuZXJyb3IpLmxlbmd0aCA+IDA7XG4gIH1cblxuICBwdWJsaWMgZ2V0Rmlyc3RFcnJvcigpOiBLYWx0dXJhQVBJRXhjZXB0aW9uIHtcbiAgICBsZXQgcmVzdWx0OiBLYWx0dXJhQVBJRXhjZXB0aW9uID0gbnVsbDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdCA9IHRoaXNbaV0uZXJyb3I7XG5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuXG59XG4iXX0=
