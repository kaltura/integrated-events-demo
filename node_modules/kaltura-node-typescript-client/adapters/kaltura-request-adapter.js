"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaRequestAdapter = void 0;
var tslib_1 = require("tslib");
var kaltura_api_exception_1 = require("../api/kaltura-api-exception");
var kaltura_client_exception_1 = require("../api/kaltura-client-exception");
var utils_1 = require("./utils");
var KalturaRequestAdapter = /** @class */ (function () {
    function KalturaRequestAdapter() {
    }
    KalturaRequestAdapter.prototype.transmit = function (request, clientOptions, defaultRequestOptions) {
        var parameters = (0, utils_1.prepareParameters)(request, clientOptions, defaultRequestOptions);
        var service = parameters.service, action = parameters.action, body = tslib_1.__rest(parameters, ["service", "action"]);
        var customHeaders = defaultRequestOptions.customHeaders;
        var endpoint = (0, utils_1.createEndpoint)(request, clientOptions, service, action);
        return (0, utils_1.createCancelableAction)({ endpoint: endpoint, headers: (0, utils_1.getHeaders)(customHeaders), body: body })
            .then(function (result) {
            try {
                var response = request.handleResponse(result);
                if (response.error) {
                    throw response.error;
                }
                else {
                    return response.result;
                }
            }
            catch (error) {
                if (error instanceof kaltura_client_exception_1.KalturaClientException) {
                    throw new kaltura_client_exception_1.KalturaClientException(error.message, error.code, tslib_1.__assign(tslib_1.__assign({}, (error.args || {})), { service: service, action: action }));
                }
                else if (error instanceof kaltura_api_exception_1.KalturaAPIException) {
                    throw new kaltura_api_exception_1.KalturaAPIException(error.message, error.code, tslib_1.__assign(tslib_1.__assign({}, (error.args || {})), { service: service, action: action }));
                }
                else {
                    var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
                    throw new kaltura_client_exception_1.KalturaClientException('client::response-unknown-error', errorMessage || 'Failed to parse response', { service: service, action: action });
                }
            }
        }, function (error) {
            var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
            var args = tslib_1.__assign(tslib_1.__assign({}, (error.args || {})), { service: service, action: action });
            throw new kaltura_client_exception_1.KalturaClientException("client::request-network-error", errorMessage || 'Error connecting to server', args);
        });
    };
    return KalturaRequestAdapter;
}());
exports.KalturaRequestAdapter = KalturaRequestAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkYXB0ZXJzL2thbHR1cmEtcmVxdWVzdC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxzRUFBbUU7QUFDbkUsNEVBQXlFO0FBR3pFLGlDQUFnRztBQUdoRztJQUFBO0lBcUNBLENBQUM7SUFwQ1Esd0NBQVEsR0FBZixVQUNFLE9BQTBCLEVBQzFCLGFBQW1DLEVBQ25DLHFCQUE0QztRQUU1QyxJQUFNLFVBQVUsR0FBRyxJQUFBLHlCQUFpQixFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUscUJBQXFCLENBQUMsQ0FBQztRQUM1RSxJQUFBLE9BQU8sR0FBc0IsVUFBVSxRQUFoQyxFQUFFLE1BQU0sR0FBYyxVQUFVLE9BQXhCLEVBQUssSUFBSSxrQkFBSyxVQUFVLEVBQXpDLHFCQUE0QixDQUFGLENBQWdCO1FBQ3hDLElBQUEsYUFBYSxHQUFLLHFCQUFxQixjQUExQixDQUEyQjtRQUNoRCxJQUFNLFFBQVEsR0FBRyxJQUFBLHNCQUFjLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFekUsT0FBTyxJQUFBLDhCQUFzQixFQUFJLEVBQUUsUUFBUSxVQUFBLEVBQUUsT0FBTyxFQUFFLElBQUEsa0JBQVUsRUFBQyxhQUFhLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDO2FBQ3JGLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDVixJQUFJO2dCQUNGLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2hELElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtvQkFDbEIsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDTCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7aUJBQ3hCO2FBQ0Y7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxJQUFJLEtBQUssWUFBWSxpREFBc0IsRUFBRTtvQkFDM0MsTUFBTSxJQUFJLGlEQUFzQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLElBQUksd0NBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxLQUFFLE9BQU8sU0FBQSxFQUFFLE1BQU0sUUFBQSxJQUFHLENBQUM7aUJBQ3pHO3FCQUFNLElBQUksS0FBSyxZQUFZLDJDQUFtQixFQUFFO29CQUMvQyxNQUFNLElBQUksMkNBQW1CLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsSUFBSSx3Q0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEtBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLElBQUcsQ0FBQztpQkFDdEc7cUJBQU07b0JBQ0wsSUFBTSxZQUFZLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztvQkFDdkcsTUFBTSxJQUFJLGlEQUFzQixDQUFDLGdDQUFnQyxFQUFFLFlBQVksSUFBSSwwQkFBMEIsRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLE1BQU0sUUFBQSxFQUFFLENBQUMsQ0FBQztpQkFDckk7YUFDRjtRQUNILENBQUMsRUFDQyxVQUFBLEtBQUs7WUFDSCxJQUFNLFlBQVksR0FBRyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZHLElBQU0sSUFBSSx5Q0FBUSxDQUFPLEtBQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLEtBQUUsT0FBTyxTQUFBLEVBQUUsTUFBTSxRQUFBLEdBQUUsQ0FBQTtZQUM5RCxNQUFNLElBQUksaURBQXNCLENBQUMsK0JBQStCLEVBQUUsWUFBWSxJQUFJLDRCQUE0QixFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3hILENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQUNILDRCQUFDO0FBQUQsQ0FyQ0EsQUFxQ0MsSUFBQTtBQXJDWSxzREFBcUIiLCJmaWxlIjoiYWRhcHRlcnMva2FsdHVyYS1yZXF1ZXN0LWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLYWx0dXJhUmVxdWVzdCB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLXJlcXVlc3QnO1xuaW1wb3J0IHsgS2FsdHVyYUFQSUV4Y2VwdGlvbiB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLWFwaS1leGNlcHRpb24nO1xuaW1wb3J0IHsgS2FsdHVyYUNsaWVudEV4Y2VwdGlvbiB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLWNsaWVudC1leGNlcHRpb24nO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vYXBpL2thbHR1cmEtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFDbGllbnRPcHRpb25zIH0gZnJvbSAnLi4va2FsdHVyYS1jbGllbnQtb3B0aW9ucyc7XG5pbXBvcnQgeyBjcmVhdGVDYW5jZWxhYmxlQWN0aW9uLCBjcmVhdGVFbmRwb2ludCwgZ2V0SGVhZGVycywgcHJlcGFyZVBhcmFtZXRlcnMgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IENhbmNlbGFibGVBY3Rpb24gfSBmcm9tICcuLi9jYW5jZWxhYmxlLWFjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhUmVxdWVzdEFkYXB0ZXIge1xuICBwdWJsaWMgdHJhbnNtaXQ8VD4oXG4gICAgcmVxdWVzdDogS2FsdHVyYVJlcXVlc3Q8VD4sIFxuICAgIGNsaWVudE9wdGlvbnM6IEthbHR1cmFDbGllbnRPcHRpb25zLCBcbiAgICBkZWZhdWx0UmVxdWVzdE9wdGlvbnM6IEthbHR1cmFSZXF1ZXN0T3B0aW9uc1xuICApOiBDYW5jZWxhYmxlQWN0aW9uPFQ+IHtcbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gcHJlcGFyZVBhcmFtZXRlcnMocmVxdWVzdCwgY2xpZW50T3B0aW9ucywgZGVmYXVsdFJlcXVlc3RPcHRpb25zKTtcbiAgICBjb25zdCB7IHNlcnZpY2UsIGFjdGlvbiwgLi4uYm9keSB9ID0gcGFyYW1ldGVycztcbiAgICBjb25zdCB7IGN1c3RvbUhlYWRlcnMgfSA9IGRlZmF1bHRSZXF1ZXN0T3B0aW9ucztcbiAgICBjb25zdCBlbmRwb2ludCA9IGNyZWF0ZUVuZHBvaW50KHJlcXVlc3QsIGNsaWVudE9wdGlvbnMsIHNlcnZpY2UsIGFjdGlvbik7XG5cbiAgICByZXR1cm4gY3JlYXRlQ2FuY2VsYWJsZUFjdGlvbjxUPih7IGVuZHBvaW50LCBoZWFkZXJzOiBnZXRIZWFkZXJzKGN1c3RvbUhlYWRlcnMpLCBib2R5IH0pXG4gICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gcmVxdWVzdC5oYW5kbGVSZXNwb25zZShyZXN1bHQpO1xuICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgcmVzcG9uc2UuZXJyb3I7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEthbHR1cmFDbGllbnRFeGNlcHRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBLYWx0dXJhQ2xpZW50RXhjZXB0aW9uKGVycm9yLm1lc3NhZ2UsIGVycm9yLmNvZGUsIHsgLi4uKGVycm9yLmFyZ3MgfHwge30pLCBzZXJ2aWNlLCBhY3Rpb24gfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEthbHR1cmFBUElFeGNlcHRpb24pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBLYWx0dXJhQVBJRXhjZXB0aW9uKGVycm9yLm1lc3NhZ2UsIGVycm9yLmNvZGUsIHsgLi4uKGVycm9yLmFyZ3MgfHwge30pLCBzZXJ2aWNlLCBhY3Rpb24gfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogbnVsbDtcbiAgICAgICAgICAgIHRocm93IG5ldyBLYWx0dXJhQ2xpZW50RXhjZXB0aW9uKCdjbGllbnQ6OnJlc3BvbnNlLXVua25vd24tZXJyb3InLCBlcnJvck1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBwYXJzZSByZXNwb25zZScsIHsgc2VydmljZSwgYWN0aW9uIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBhcmdzID0geyAuLi4oKDxhbnk+ZXJyb3IpLmFyZ3MgfHwge30pLCBzZXJ2aWNlLCBhY3Rpb24gfVxuICAgICAgICAgIHRocm93IG5ldyBLYWx0dXJhQ2xpZW50RXhjZXB0aW9uKFwiY2xpZW50OjpyZXF1ZXN0LW5ldHdvcmstZXJyb3JcIiwgZXJyb3JNZXNzYWdlIHx8ICdFcnJvciBjb25uZWN0aW5nIHRvIHNlcnZlcicsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgfVxufVxuIl19
