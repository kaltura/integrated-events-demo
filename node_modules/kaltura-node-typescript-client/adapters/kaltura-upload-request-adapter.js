"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaUploadRequestAdapter = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("./utils");
var kaltura_client_exception_1 = require("../api/kaltura-client-exception");
var kaltura_api_exception_1 = require("../api/kaltura-api-exception");
var cancelable_action_1 = require("../cancelable-action");
var got_1 = require("got");
var FormData = require("form-data");
var kaltura_logger_1 = require("../api/kaltura-logger");
var serviceStr = 'uploadtoken';
var actionStr = 'upload';
var KalturaUploadRequestAdapter = /** @class */ (function () {
    function KalturaUploadRequestAdapter(clientOptions, defaultRequestOptions) {
        this.clientOptions = clientOptions;
        this.defaultRequestOptions = defaultRequestOptions;
        /* noop */
    }
    KalturaUploadRequestAdapter.prototype.transmit = function (request) {
        var _this = this;
        return new cancelable_action_1.CancelableAction(function (resolve, reject, action) {
            var uploadedFileSize = !isNaN(request.uploadedFileSize) && isFinite(request.uploadedFileSize) && request.uploadedFileSize > 0
                ? request.uploadedFileSize
                : 0;
            var data = {
                resume: !!uploadedFileSize,
                finalChunk: false,
                resumeAt: uploadedFileSize
            };
            var activeAction;
            var handleChunkUploadError = function (reason) {
                activeAction = null;
                reject(reason);
            };
            var handleChunkUploadSuccess = function (result) {
                if (!data.finalChunk) {
                    activeAction = _this._chunkUpload(request, data).then(handleChunkUploadSuccess, handleChunkUploadError);
                    return;
                }
                activeAction = null;
                try {
                    var response = request.handleResponse(result);
                    if (response.error) {
                        throw response.error;
                    }
                    else {
                        resolve(response.result);
                    }
                }
                catch (error) {
                    if (error instanceof kaltura_client_exception_1.KalturaClientException) {
                        reject(new kaltura_client_exception_1.KalturaClientException(error.message, error.code, tslib_1.__assign(tslib_1.__assign({}, (error.args || {})), { service: serviceStr, action: actionStr })));
                    }
                    else if (error instanceof kaltura_api_exception_1.KalturaAPIException) {
                        reject(new kaltura_api_exception_1.KalturaAPIException(error.message, error.code, tslib_1.__assign(tslib_1.__assign({}, (error.args || {})), { service: serviceStr, action: actionStr })));
                    }
                    else {
                        var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
                        reject(new kaltura_client_exception_1.KalturaClientException('client::response-unknown-error', errorMessage || 'Failed to parse response', { service: serviceStr, action: actionStr }));
                    }
                }
            };
            activeAction = _this._chunkUpload(request, data).then(handleChunkUploadSuccess, handleChunkUploadError);
            return function () {
                if (activeAction) {
                    activeAction.cancel();
                    activeAction = null;
                }
            };
        });
    };
    KalturaUploadRequestAdapter.prototype._getFormData = function (_a) {
        var fileName = _a.fileName, fileData = _a.fileData, ks = _a.ks;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var form, ab, buffer;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        form = new FormData();
                        form.append('fileName', fileName);
                        form.append('ks', ks);
                        return [4 /*yield*/, fileData.arrayBuffer()];
                    case 1:
                        ab = _b.sent();
                        buffer = Buffer.from(ab);
                        form.append('fileData', buffer, { contentType: fileData.type, filename: fileName });
                        return [2 /*return*/, form];
                }
            });
        });
    };
    KalturaUploadRequestAdapter.prototype._getChunkFileSize = function () {
        var userChunkFileSize = this.clientOptions ? this.clientOptions.chunkFileSize : null;
        var actualChunkFileSize = 5e6; // default 5 mb
        if (userChunkFileSize && Number.isFinite(userChunkFileSize) && !Number.isNaN(userChunkFileSize)) {
            if (userChunkFileSize < 1e5) {
                kaltura_logger_1.Logger.warn("user requested for invalid upload chunk size '".concat(userChunkFileSize, "'. minimal value 100Kb. using minimal value 100Kb instead"));
                actualChunkFileSize = 1e5;
            }
            else {
                actualChunkFileSize = userChunkFileSize;
            }
        }
        kaltura_logger_1.Logger.info("using chunk size of ".concat(userChunkFileSize, " bytes"));
        return actualChunkFileSize;
    };
    KalturaUploadRequestAdapter.prototype._prepareRequest = function (request, uploadChunkData) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var actualChunkFileSize, file, fileStart, fileEnd, form, _a, service, action, ks, params, endpointUrl, searchParams;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        actualChunkFileSize = this._getChunkFileSize();
                        file = request.getFileInfo().file;
                        uploadChunkData.finalChunk = (file.size - uploadChunkData.resumeAt) <= actualChunkFileSize;
                        fileStart = uploadChunkData.resumeAt;
                        fileEnd = uploadChunkData.finalChunk ? file.size : fileStart + actualChunkFileSize;
                        return [4 /*yield*/, this._getFormData({
                                fileName: file.name,
                                fileData: file.slice(fileStart, fileEnd, file.type),
                                ks: this.defaultRequestOptions.ks
                            })];
                    case 1:
                        form = _b.sent();
                        _a = (0, utils_1.prepareParameters)(request, this.clientOptions, this.defaultRequestOptions), service = _a.service, action = _a.action, ks = _a.ks, params = tslib_1.__rest(_a, ["service", "action", "ks"]);
                        endpointUrl = (0, utils_1.createEndpoint)(request, this.clientOptions, service, action);
                        searchParams = new URLSearchParams(tslib_1.__assign(tslib_1.__assign({}, params), { resume: uploadChunkData.resume, resumeAt: uploadChunkData.resumeAt, finalChunk: uploadChunkData.finalChunk }));
                        return [2 /*return*/, { endpointUrl: endpointUrl, form: form, searchParams: searchParams }];
                }
            });
        });
    };
    KalturaUploadRequestAdapter.prototype._chunkUpload = function (request, uploadChunkData) {
        var _this = this;
        return new cancelable_action_1.CancelableAction(function (resolve, reject) {
            var isComplete = false, isAborted = false;
            var xMe, xKalturaSession;
            var gotRequest;
            _this._prepareRequest(request, uploadChunkData).then(function (_a) {
                var endpointUrl = _a.endpointUrl, form = _a.form, searchParams = _a.searchParams;
                if (isAborted) {
                    return;
                }
                gotRequest = got_1.default.post(endpointUrl, { body: form, searchParams: searchParams });
                // save headers and parse response:
                gotRequest.then(function (response) {
                    var _a, _b;
                    isComplete = true;
                    xMe = ((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a['x-me']) || '';
                    xKalturaSession = ((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b['x-kaltura-session']) || '';
                    kaltura_logger_1.Logger.debug("Kaltura response completed for: ".concat(serviceStr, "/").concat(actionStr, ", x-me: ").concat(xMe, ", x-kaltura-session: ").concat(xKalturaSession));
                    return gotRequest.json();
                })
                    // handle parsed response:
                    .then(function (parsedResponse) {
                    if ((parsedResponse === null || parsedResponse === void 0 ? void 0 : parsedResponse.objectType) === 'KalturaAPIException') {
                        reject(new kaltura_api_exception_1.KalturaAPIException(parsedResponse.message, parsedResponse.code, tslib_1.__assign(tslib_1.__assign({}, (parsedResponse.args || {})), { service: serviceStr, action: actionStr })));
                        return;
                    }
                    if (parsedResponse.uploadedFileSize === undefined || parsedResponse.uploadedFileSize === null) {
                        reject(new kaltura_client_exception_1.KalturaClientException('client::upload-failure', "uploaded chunk of file failed, expected response with property 'uploadedFileSize'", { service: serviceStr, action: actionStr }));
                        return;
                    }
                    if (!uploadChunkData.finalChunk) {
                        uploadChunkData.resumeAt = Number(parsedResponse.uploadedFileSize);
                        uploadChunkData.resume = true;
                    }
                    resolve(parsedResponse);
                })
                    // handle errors:
                    .catch(function (e) {
                    var _a, _b, _c, _d, _e;
                    isComplete = true;
                    xMe || (xMe = ((_b = (_a = e.response) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b['x-me']) || '');
                    xKalturaSession || (xKalturaSession = ((_d = (_c = e.response) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d['x-kaltura-session']) || '');
                    var msg = ((_e = e.response) === null || _e === void 0 ? void 0 : _e.body) || e.message || 'failed to upload file';
                    var err = new kaltura_client_exception_1.KalturaClientException('client::upload-failure', msg);
                    kaltura_logger_1.Logger.error("Kaltura response error: '".concat(msg || '', "', for: ").concat(serviceStr, "/").concat(actionStr, ", x-me: ").concat(xMe, ", x-kaltura-session: ").concat(xKalturaSession));
                    reject(err);
                });
            });
            return function () {
                if (!isComplete) {
                    isComplete = true;
                    isAborted = true;
                    gotRequest === null || gotRequest === void 0 ? void 0 : gotRequest.cancel();
                }
            };
        });
    };
    return KalturaUploadRequestAdapter;
}());
exports.KalturaUploadRequestAdapter = KalturaUploadRequestAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
