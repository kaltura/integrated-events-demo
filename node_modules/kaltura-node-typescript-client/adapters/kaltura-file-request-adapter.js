"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaFileRequestAdapter = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("./utils");
var kaltura_client_exception_1 = require("../api/kaltura-client-exception");
var kaltura_api_exception_1 = require("../api/kaltura-api-exception");
var KalturaFileRequestAdapter = /** @class */ (function () {
    function KalturaFileRequestAdapter() {
    }
    KalturaFileRequestAdapter.prototype.transmit = function (request, clientOptions, defaultRequestOptions) {
        var parameters = (0, utils_1.prepareParameters)(request, clientOptions, defaultRequestOptions);
        var service = parameters.service, action = parameters.action, body = tslib_1.__rest(parameters, ["service", "action"]);
        var customHeaders = defaultRequestOptions.customHeaders;
        var endpoint = (0, utils_1.createEndpoint)(request, clientOptions, service, action);
        return (0, utils_1.createCancelableAction)({ endpoint: endpoint, headers: (0, utils_1.getHeaders)(customHeaders), body: body }, 'text')
            .then(function (result) {
            try {
                var response = request.handleResponse(result);
                if (response.error) {
                    throw response.error;
                }
                else {
                    return response.result;
                }
            }
            catch (error) {
                if (error instanceof kaltura_client_exception_1.KalturaClientException || error instanceof kaltura_api_exception_1.KalturaAPIException) {
                    throw error;
                }
                else {
                    var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
                    throw new kaltura_client_exception_1.KalturaClientException('client::response-unknown-error', errorMessage || 'Failed to parse response');
                }
            }
        }, function (error) {
            var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
            throw new kaltura_client_exception_1.KalturaClientException("client::request-network-error", errorMessage || 'Error connecting to server');
        });
    };
    return KalturaFileRequestAdapter;
}());
exports.KalturaFileRequestAdapter = KalturaFileRequestAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkYXB0ZXJzL2thbHR1cmEtZmlsZS1yZXF1ZXN0LWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLGlDQUFnRztBQUVoRyw0RUFBeUU7QUFDekUsc0VBQW1FO0FBR25FO0lBQUE7SUFrQ0EsQ0FBQztJQWpDUSw0Q0FBUSxHQUFmLFVBQ0UsT0FBMkIsRUFDM0IsYUFBbUMsRUFDbkMscUJBQTRDO1FBRTVDLElBQU0sVUFBVSxHQUFHLElBQUEseUJBQWlCLEVBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1FBQzVFLElBQUEsT0FBTyxHQUFzQixVQUFVLFFBQWhDLEVBQUUsTUFBTSxHQUFjLFVBQVUsT0FBeEIsRUFBSyxJQUFJLGtCQUFLLFVBQVUsRUFBekMscUJBQTRCLENBQUYsQ0FBZ0I7UUFDeEMsSUFBQSxhQUFhLEdBQUsscUJBQXFCLGNBQTFCLENBQTJCO1FBQ2hELElBQU0sUUFBUSxHQUFHLElBQUEsc0JBQWMsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUV6RSxPQUFPLElBQUEsOEJBQXNCLEVBQVMsRUFBRSxRQUFRLFVBQUEsRUFBRSxPQUFPLEVBQUUsSUFBQSxrQkFBVSxFQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksTUFBQSxFQUFFLEVBQUUsTUFBTSxDQUFDO2FBQ2xHLElBQUksQ0FBQyxVQUFBLE1BQU07WUFDVixJQUFJO2dCQUNGLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBQ2hELElBQUksUUFBUSxDQUFDLEtBQUssRUFBRTtvQkFDbEIsTUFBTSxRQUFRLENBQUMsS0FBSyxDQUFDO2lCQUN0QjtxQkFBTTtvQkFDTCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7aUJBQ3hCO2FBQ0Y7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxJQUFJLEtBQUssWUFBWSxpREFBc0IsSUFBSSxLQUFLLFlBQVksMkNBQW1CLEVBQUU7b0JBQ25GLE1BQU0sS0FBSyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLElBQU0sWUFBWSxHQUFHLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3ZHLE1BQU0sSUFBSSxpREFBc0IsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFZLElBQUksMEJBQTBCLENBQUMsQ0FBQztpQkFDaEg7YUFDRjtRQUNILENBQUMsRUFDRCxVQUFBLEtBQUs7WUFDSCxJQUFNLFlBQVksR0FBRyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZHLE1BQU0sSUFBSSxpREFBc0IsQ0FBQywrQkFBK0IsRUFBRSxZQUFZLElBQUksNEJBQTRCLENBQUMsQ0FBQztRQUNsSCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDSCxnQ0FBQztBQUFELENBbENBLEFBa0NDLElBQUE7QUFsQ1ksOERBQXlCIiwiZmlsZSI6ImFkYXB0ZXJzL2thbHR1cmEtZmlsZS1yZXF1ZXN0LWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLYWx0dXJhRmlsZVJlcXVlc3QgfSBmcm9tICcuLi9hcGkva2FsdHVyYS1maWxlLXJlcXVlc3QnO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vYXBpL2thbHR1cmEtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IGNyZWF0ZUNhbmNlbGFibGVBY3Rpb24sIGNyZWF0ZUVuZHBvaW50LCBnZXRIZWFkZXJzLCBwcmVwYXJlUGFyYW1ldGVycyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgS2FsdHVyYUNsaWVudE9wdGlvbnMgfSBmcm9tICcuLi9rYWx0dXJhLWNsaWVudC1vcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFDbGllbnRFeGNlcHRpb24gfSBmcm9tICcuLi9hcGkva2FsdHVyYS1jbGllbnQtZXhjZXB0aW9uJztcbmltcG9ydCB7IEthbHR1cmFBUElFeGNlcHRpb24gfSBmcm9tICcuLi9hcGkva2FsdHVyYS1hcGktZXhjZXB0aW9uJztcbmltcG9ydCB7IENhbmNlbGFibGVBY3Rpb24gfSBmcm9tICcuLi9jYW5jZWxhYmxlLWFjdGlvbic7XG5cbmV4cG9ydCBjbGFzcyBLYWx0dXJhRmlsZVJlcXVlc3RBZGFwdGVyIHtcbiAgcHVibGljIHRyYW5zbWl0KFxuICAgIHJlcXVlc3Q6IEthbHR1cmFGaWxlUmVxdWVzdCwgXG4gICAgY2xpZW50T3B0aW9uczogS2FsdHVyYUNsaWVudE9wdGlvbnMsIFxuICAgIGRlZmF1bHRSZXF1ZXN0T3B0aW9uczogS2FsdHVyYVJlcXVlc3RPcHRpb25zXG4gICk6IENhbmNlbGFibGVBY3Rpb248c3RyaW5nPiB7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IHByZXBhcmVQYXJhbWV0ZXJzKHJlcXVlc3QsIGNsaWVudE9wdGlvbnMsIGRlZmF1bHRSZXF1ZXN0T3B0aW9ucyk7XG4gICAgY29uc3QgeyBzZXJ2aWNlLCBhY3Rpb24sIC4uLmJvZHkgfSA9IHBhcmFtZXRlcnM7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSBkZWZhdWx0UmVxdWVzdE9wdGlvbnM7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjcmVhdGVFbmRwb2ludChyZXF1ZXN0LCBjbGllbnRPcHRpb25zLCBzZXJ2aWNlLCBhY3Rpb24pO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUNhbmNlbGFibGVBY3Rpb248c3RyaW5nPih7IGVuZHBvaW50LCBoZWFkZXJzOiBnZXRIZWFkZXJzKGN1c3RvbUhlYWRlcnMpLCBib2R5IH0sICd0ZXh0JylcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXF1ZXN0LmhhbmRsZVJlc3BvbnNlKHJlc3VsdCk7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyByZXNwb25zZS5lcnJvcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgS2FsdHVyYUNsaWVudEV4Y2VwdGlvbiB8fCBlcnJvciBpbnN0YW5jZW9mIEthbHR1cmFBUElFeGNlcHRpb24pIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycgPyBlcnJvciA6IG51bGw7XG4gICAgICAgICAgICB0aHJvdyBuZXcgS2FsdHVyYUNsaWVudEV4Y2VwdGlvbignY2xpZW50OjpyZXNwb25zZS11bmtub3duLWVycm9yJywgZXJyb3JNZXNzYWdlIHx8ICdGYWlsZWQgdG8gcGFyc2UgcmVzcG9uc2UnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvciA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogbnVsbDtcbiAgICAgICAgdGhyb3cgbmV3IEthbHR1cmFDbGllbnRFeGNlcHRpb24oXCJjbGllbnQ6OnJlcXVlc3QtbmV0d29yay1lcnJvclwiLCBlcnJvck1lc3NhZ2UgfHwgJ0Vycm9yIGNvbm5lY3RpbmcgdG8gc2VydmVyJyk7XG4gICAgICB9KTtcbiAgfVxufVxuIl19
