"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KalturaMultiRequestAdapter = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("./utils");
var kaltura_api_exception_1 = require("../api/kaltura-api-exception");
var kaltura_client_exception_1 = require("../api/kaltura-client-exception");
var KalturaMultiRequestAdapter = /** @class */ (function () {
    function KalturaMultiRequestAdapter() {
    }
    KalturaMultiRequestAdapter.prototype.transmit = function (request, clientOptions, defaultRequestOptions) {
        var parameters = (0, utils_1.prepareParameters)(request, clientOptions, defaultRequestOptions);
        var service = parameters.service, action = parameters.action, body = tslib_1.__rest(parameters, ["service", "action"]);
        var customHeaders = defaultRequestOptions.customHeaders;
        var endpoint = (0, utils_1.createEndpoint)(request, clientOptions, service, action);
        return ((0, utils_1.createCancelableAction)({ endpoint: endpoint, headers: (0, utils_1.getHeaders)(customHeaders), body: body })
            .then(function (result) {
            try {
                return request.handleResponse(result);
            }
            catch (error) {
                if (error instanceof kaltura_client_exception_1.KalturaClientException || error instanceof kaltura_api_exception_1.KalturaAPIException) {
                    throw error;
                }
                else {
                    var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
                    throw new kaltura_client_exception_1.KalturaClientException('client::multi-response-unknown-error', errorMessage || 'Failed to parse response');
                }
            }
        }, function (error) {
            var errorMessage = error instanceof Error ? error.message : typeof error === 'string' ? error : null;
            throw new kaltura_client_exception_1.KalturaClientException("client::multi-request-network-error", errorMessage || 'Error connecting to server');
        }));
    };
    return KalturaMultiRequestAdapter;
}());
exports.KalturaMultiRequestAdapter = KalturaMultiRequestAdapter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkYXB0ZXJzL2thbHR1cmEtbXVsdGktcmVxdWVzdC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxpQ0FBZ0c7QUFDaEcsc0VBQW1FO0FBQ25FLDRFQUF5RTtBQUt6RTtJQUFBO0lBeUJBLENBQUM7SUF4QkMsNkNBQVEsR0FBUixVQUFTLE9BQTRCLEVBQUUsYUFBbUMsRUFBRSxxQkFBNEM7UUFDdEgsSUFBTSxVQUFVLEdBQUcsSUFBQSx5QkFBaUIsRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDNUUsSUFBQSxPQUFPLEdBQXNCLFVBQVUsUUFBaEMsRUFBRSxNQUFNLEdBQWMsVUFBVSxPQUF4QixFQUFLLElBQUksa0JBQUssVUFBVSxFQUF6QyxxQkFBNEIsQ0FBRixDQUFnQjtRQUN4QyxJQUFBLGFBQWEsR0FBSyxxQkFBcUIsY0FBMUIsQ0FBMkI7UUFDaEQsSUFBTSxRQUFRLEdBQUcsSUFBQSxzQkFBYyxFQUFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRXpFLE9BQVksQ0FBQyxJQUFBLDhCQUFzQixFQUF1QixFQUFFLFFBQVEsVUFBQSxFQUFFLE9BQU8sRUFBRSxJQUFBLGtCQUFVLEVBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxNQUFBLEVBQUUsQ0FBQzthQUM5RyxJQUFJLENBQUMsVUFBQSxNQUFNO1lBQ1YsSUFBSTtnQkFDRixPQUFPLE9BQU8sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdkM7WUFBQyxPQUFPLEtBQUssRUFBRTtnQkFDZCxJQUFJLEtBQUssWUFBWSxpREFBc0IsSUFBSSxLQUFLLFlBQVksMkNBQW1CLEVBQUU7b0JBQ25GLE1BQU0sS0FBSyxDQUFDO2lCQUNiO3FCQUFNO29CQUNMLElBQU0sWUFBWSxHQUFHLEtBQUssWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7b0JBQ3ZHLE1BQU0sSUFBSSxpREFBc0IsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFZLElBQUksMEJBQTBCLENBQUMsQ0FBQztpQkFDdEg7YUFDRjtRQUNILENBQUMsRUFDQyxVQUFBLEtBQUs7WUFDSCxJQUFNLFlBQVksR0FBRyxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3ZHLE1BQU0sSUFBSSxpREFBc0IsQ0FBQyxxQ0FBcUMsRUFBRSxZQUFZLElBQUksNEJBQTRCLENBQUMsQ0FBQztRQUN4SCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQ0FBQztJQUNILGlDQUFDO0FBQUQsQ0F6QkEsQUF5QkMsSUFBQTtBQXpCWSxnRUFBMEIiLCJmaWxlIjoiYWRhcHRlcnMva2FsdHVyYS1tdWx0aS1yZXF1ZXN0LWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLYWx0dXJhTXVsdGlSZXF1ZXN0IH0gZnJvbSAnLi4vYXBpL2thbHR1cmEtbXVsdGktcmVxdWVzdCc7XG5pbXBvcnQgeyBLYWx0dXJhTXVsdGlSZXNwb25zZSB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLW11bHRpLXJlc3BvbnNlJztcbmltcG9ydCB7IGNyZWF0ZUNhbmNlbGFibGVBY3Rpb24sIGNyZWF0ZUVuZHBvaW50LCBnZXRIZWFkZXJzLCBwcmVwYXJlUGFyYW1ldGVycyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgS2FsdHVyYUFQSUV4Y2VwdGlvbiB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLWFwaS1leGNlcHRpb24nO1xuaW1wb3J0IHsgS2FsdHVyYUNsaWVudEV4Y2VwdGlvbiB9IGZyb20gJy4uL2FwaS9rYWx0dXJhLWNsaWVudC1leGNlcHRpb24nO1xuaW1wb3J0IHsgS2FsdHVyYVJlcXVlc3RPcHRpb25zIH0gZnJvbSAnLi4vYXBpL2thbHR1cmEtcmVxdWVzdC1vcHRpb25zJztcbmltcG9ydCB7IEthbHR1cmFDbGllbnRPcHRpb25zIH0gZnJvbSAnLi4va2FsdHVyYS1jbGllbnQtb3B0aW9ucyc7XG5pbXBvcnQgeyBDYW5jZWxhYmxlQWN0aW9uIH0gZnJvbSAnLi4vY2FuY2VsYWJsZS1hY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgS2FsdHVyYU11bHRpUmVxdWVzdEFkYXB0ZXIge1xuICB0cmFuc21pdChyZXF1ZXN0OiBLYWx0dXJhTXVsdGlSZXF1ZXN0LCBjbGllbnRPcHRpb25zOiBLYWx0dXJhQ2xpZW50T3B0aW9ucywgZGVmYXVsdFJlcXVlc3RPcHRpb25zOiBLYWx0dXJhUmVxdWVzdE9wdGlvbnMpOiBDYW5jZWxhYmxlQWN0aW9uPEthbHR1cmFNdWx0aVJlc3BvbnNlPiB7XG4gICAgY29uc3QgcGFyYW1ldGVycyA9IHByZXBhcmVQYXJhbWV0ZXJzKHJlcXVlc3QsIGNsaWVudE9wdGlvbnMsIGRlZmF1bHRSZXF1ZXN0T3B0aW9ucyk7XG4gICAgY29uc3QgeyBzZXJ2aWNlLCBhY3Rpb24sIC4uLmJvZHkgfSA9IHBhcmFtZXRlcnM7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSBkZWZhdWx0UmVxdWVzdE9wdGlvbnM7XG4gICAgY29uc3QgZW5kcG9pbnQgPSBjcmVhdGVFbmRwb2ludChyZXF1ZXN0LCBjbGllbnRPcHRpb25zLCBzZXJ2aWNlLCBhY3Rpb24pO1xuXG4gICAgcmV0dXJuIDxhbnk+KGNyZWF0ZUNhbmNlbGFibGVBY3Rpb248S2FsdHVyYU11bHRpUmVzcG9uc2U+KHsgZW5kcG9pbnQsIGhlYWRlcnM6IGdldEhlYWRlcnMoY3VzdG9tSGVhZGVycyksIGJvZHkgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIHJlcXVlc3QuaGFuZGxlUmVzcG9uc2UocmVzdWx0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBLYWx0dXJhQ2xpZW50RXhjZXB0aW9uIHx8IGVycm9yIGluc3RhbmNlb2YgS2FsdHVyYUFQSUV4Y2VwdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogbnVsbDtcbiAgICAgICAgICAgIHRocm93IG5ldyBLYWx0dXJhQ2xpZW50RXhjZXB0aW9uKCdjbGllbnQ6Om11bHRpLXJlc3BvbnNlLXVua25vd24tZXJyb3InLCBlcnJvck1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byBwYXJzZSByZXNwb25zZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogdHlwZW9mIGVycm9yID09PSAnc3RyaW5nJyA/IGVycm9yIDogbnVsbDtcbiAgICAgICAgICB0aHJvdyBuZXcgS2FsdHVyYUNsaWVudEV4Y2VwdGlvbihcImNsaWVudDo6bXVsdGktcmVxdWVzdC1uZXR3b3JrLWVycm9yXCIsIGVycm9yTWVzc2FnZSB8fCAnRXJyb3IgY29ubmVjdGluZyB0byBzZXJ2ZXInKTtcbiAgICAgICAgfSkpO1xuICB9XG59XG4iXX0=
