"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCancelableAction = exports.safeJsonParse = exports.prepareParameters = exports.getHeaders = exports.buildQuerystring = exports.createClientTag = exports.buildUrl = exports.createEndpoint = void 0;
var tslib_1 = require("tslib");
var cancelable_action_1 = require("../cancelable-action");
var kaltura_client_exception_1 = require("../api/kaltura-client-exception");
var environment_1 = require("../environment");
var got_1 = require("got");
var kaltura_logger_1 = require("../api/kaltura-logger");
function createEndpoint(request, options, service, action, additionalQueryParams) {
    var endpoint = options.endpointUrl;
    var clientTag = createClientTag(request, options);
    var url = "".concat(endpoint, "/api_v3/service/").concat(service);
    if (action) {
        url += "/action/".concat(action);
    }
    var queryParams = tslib_1.__assign(tslib_1.__assign({}, (additionalQueryParams || {})), (clientTag ? { clientTag: clientTag } : {}));
    return buildUrl(url, queryParams);
}
exports.createEndpoint = createEndpoint;
function buildUrl(url, querystring) {
    var formattedUrl = (url).trim();
    if (!querystring) {
        return formattedUrl;
    }
    var urlHasQuerystring = formattedUrl.indexOf('?') !== -1;
    var formattedQuerystring = _buildQuerystring(querystring);
    return "".concat(formattedUrl).concat(urlHasQuerystring ? '&' : '?').concat(formattedQuerystring);
}
exports.buildUrl = buildUrl;
function _buildQuerystring(data, prefix) {
    var str = [], p;
    for (p in data) {
        if (data.hasOwnProperty(p)) {
            var k = prefix ? prefix + "[" + p + "]" : p, v = data[p];
            str.push((v !== null && typeof v === "object") ?
                _buildQuerystring(v, k) :
                encodeURIComponent(k) + "=" + encodeURIComponent(v));
        }
    }
    return str.join("&");
}
function createClientTag(request, options) {
    var networkTag = (request.getNetworkTag() || "").trim();
    var clientTag = (options.clientTag || "").trim() || "ng-app";
    if (networkTag && networkTag.length) {
        return "".concat(clientTag, "_").concat(networkTag);
    }
    else {
        return clientTag;
    }
}
exports.createClientTag = createClientTag;
function buildQuerystring(data, prefix) {
    var str = [], p;
    for (p in data) {
        if (data.hasOwnProperty(p)) {
            var k = prefix ? prefix + "[" + p + "]" : p, v = data[p];
            str.push((v !== null && typeof v === "object") ?
                buildQuerystring(v, k) :
                encodeURIComponent(k) + "=" + encodeURIComponent(v));
        }
    }
    return str.join("&");
}
exports.buildQuerystring = buildQuerystring;
function getHeaders(customHeaders) {
    if (customHeaders === void 0) { customHeaders = {}; }
    var headers = tslib_1.__assign({ "Accept": "application/json", "Content-Type": "application/json" }, customHeaders);
    return headers;
}
exports.getHeaders = getHeaders;
function prepareParameters(request, options, defaultRequestOptions) {
    return Object.assign({}, request.buildRequest(defaultRequestOptions), {
        apiVersion: environment_1.environment.request.apiVersion,
        format: 1
    });
}
exports.prepareParameters = prepareParameters;
function safeJsonParse(obj) {
    try {
        return JSON.parse(obj);
    }
    catch (e) { /* noop */ }
}
exports.safeJsonParse = safeJsonParse;
function createCancelableAction(data, responseType) {
    var _a, _b;
    if (responseType === void 0) { responseType = 'json'; }
    var endPoint = (data === null || data === void 0 ? void 0 : data.endpoint) || '';
    var service = ((_a = endPoint === null || endPoint === void 0 ? void 0 : endPoint.match('service/([^\/]+)')) === null || _a === void 0 ? void 0 : _a[1]) || '';
    var action = ((_b = endPoint === null || endPoint === void 0 ? void 0 : endPoint.match('action/([^\?]+)')) === null || _b === void 0 ? void 0 : _b[1]) || '';
    var result = new cancelable_action_1.CancelableAction(function (resolve, reject) {
        var cancelableRequest = got_1.default.post(data.endpoint, {
            json: data.body,
            headers: data.headers,
        });
        var xMe, xKalturaSession;
        cancelableRequest.then(function (response) {
            var _a, _b;
            xMe = ((_a = response === null || response === void 0 ? void 0 : response.headers) === null || _a === void 0 ? void 0 : _a['x-me']) || '';
            xKalturaSession = ((_b = response === null || response === void 0 ? void 0 : response.headers) === null || _b === void 0 ? void 0 : _b['x-kaltura-session']) || '';
            kaltura_logger_1.Logger.debug("Kaltura response completed for: ".concat(service, "/").concat(action, ", x-me: ").concat(xMe, ", x-kaltura-session: ").concat(xKalturaSession, ", url: ").concat(endPoint));
        }).catch(function (e) {
            var _a, _b, _c, _d;
            xMe = ((_b = (_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b['x-me']) || '';
            xKalturaSession = ((_d = (_c = e === null || e === void 0 ? void 0 : e.response) === null || _c === void 0 ? void 0 : _c.headers) === null || _d === void 0 ? void 0 : _d['x-kaltura-session']) || '';
        });
        cancelableRequest[responseType]()
            .then(function (response) {
            if (typeof response === 'string' && response.includes('KalturaAPIException')) {
                response = safeJsonParse(response) || response;
            }
            if ((response === null || response === void 0 ? void 0 : response.objectType) === 'KalturaAPIException') {
                kaltura_logger_1.Logger.error("Kaltura API Exception: '".concat(response.message || '', "', for: ").concat(service, "/").concat(action, ", x-me: ").concat(xMe, ", x-kaltura-session: ").concat(xKalturaSession, ", url: ").concat(endPoint));
            }
            return response;
        })
            .then(resolve)
            .catch(function (e) {
            var _a, _b, _c;
            kaltura_logger_1.Logger.error("Kaltura Error: '".concat(e.message, "', for: ").concat(service, "/").concat(action, ", x-me: ").concat(xMe, ", x-kaltura-session: ").concat(xKalturaSession, ", url: ").concat(endPoint));
            var args = xMe || xKalturaSession ? { xMe: xMe, xKalturaSession: xKalturaSession } : undefined;
            var error = ((_a = e.response) === null || _a === void 0 ? void 0 : _a.statusCode) === 200
                ? new Error((_b = e.response) === null || _b === void 0 ? void 0 : _b.body)
                : new kaltura_client_exception_1.KalturaClientException('client::failure', ((_c = e.response) === null || _c === void 0 ? void 0 : _c.body) || e.message || 'failed to transmit request', args);
            reject(error);
        });
        return function () { return cancelableRequest.cancel(); };
    });
    return result;
}
exports.createCancelableAction = createCancelableAction;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
